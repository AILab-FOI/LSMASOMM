# DCharts description generated by SVM-AToM3-plugin, written by Thomas Feng
#   Source: D:/EclipseWorkspace/atom3/Kernel/UserInterface/defaultUI_Statechart/UI_Statechart_MDL.py
#   Date:   June 19, 2006
#   Time:   1:25:1

CONNECTIONS:

STATECHART:
  Initial [DS]
  Exit
  Postscript
  Bounding Box Edit
  Drag Label
  Scale Text
  GG Graph Select
  Active Event Loop
    Add To Selection
    New Selection
    Remove From Selection
    Main [DS]
    Drag Nodes
    Scale Entity
    Arrow Editor
      Default [DS]
      Active Point
    New Arrow
      Snap Points [DS]
      No Snap
      Drop Point
      Drop Point2

ENTER:
  N: Drag Label
  O: enteringDragMode( atom3i )

ENTER:
  N: Active Event Loop.Main
  O: cb.setLabelDragModeCursor()

ENTER:
  N: Active Event Loop.New Arrow.Snap Points
  O: atom3i.pilotArrow.enteringArrowMode( atom3i )

ENTER:
  N: Active Event Loop.New Arrow.Drop Point2
  O: dropArrowPoints( atom3i, eventhandler.get_event_params(), snap=False)
     
     
     eventhandler.event('[Done]')

ENTER:
  N: Active Event Loop.Drag Nodes
  O: enteringDragMode( atom3i )

ENTER:
  N: Scale Text
  O: cb.enteringReSizer( atom3i )

ENTER:
  N: Active Event Loop.Arrow Editor.Active Point
  O: atom3i.arrowEditor.enteringActiveControlPointMode( atom3i )

ENTER:
  N: Active Event Loop.Scale Entity
  O: cb.enteringReSizer( atom3i )

ENTER:
  N: Active Event Loop.Arrow Editor.Default
  O: atom3i.arrowEditor.enteringArrowEditorMode( atom3i , eventhandler.get_event_params() )

ENTER:
  N: Active Event Loop.New Arrow.Drop Point
  O: dropArrowPoints( atom3i, eventhandler.get_event_params() )
     
     eventhandler.event('[Done]')

ENTER:
  N: Postscript
  O: atom3i.postscriptBox.enteringPostscript()

ENTER:
  N: Active Event Loop.New Arrow.No Snap
  O: atom3i.pilotArrow.enteringArrowMode( atom3i )

EXIT:
  S: GG Graph Select
  O: cb.setMatchChoice( atom3i, eventhandler.get_event_params() )


TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Remove From Selection
  E: <Alt-ButtonPress-1>
  C: cb.isNoItemUnderCursor( atom3i, eventhandler.get_event_params())
  O: event=eventhandler.get_event_params()
     cb.clearSelectionTuple()
     startNewSelectionBox(atom3i, event, "red")
     
     setCursor( atom3i.parent, 'Selection' )
     setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Any-Motion>
  C: 1
  O: savePosition = cb.getCanvasCoords( eventhandler.get_event_params()  )

TRANSITION:
  S: Active Event Loop.Remove From Selection
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1
  O: cb.deleteFromSelectionDict( getFinalSelectionBoxItems( atom3i ) )
                       
     # Enable highlighting on selected items
     cb.highlighter(1)  
     
     setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Add To Selection
  E: <Shift-ButtonPress-1>
  C: cb.isNoItemUnderCursor( atom3i, eventhandler.get_event_params())
  O: event=eventhandler.get_event_params()
     cb.clearSelectionTuple()
     startNewSelectionBox(atom3i, event, "green")
     setCursor( atom3i.parent, 'Selection' )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.New Selection
  E: <ButtonPress-1>
  C: cb.isNoItemUnderCursor( atom3i, eventhandler.get_event_params())
  O: cb.clearSelectionTuple()
     startNewSelectionBox(atom3i, eventhandler.get_event_params(), "yellow")
     
     cb.highlighter( 0 )      
     cb.clearSelectionDict()
     
     setCursor( atom3i.parent, 'Selection' )

TRANSITION:
  S: Active Event Loop.Add To Selection
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1
  O: cb.updateSelectionDict( getFinalSelectionBoxItems( atom3i )  )
                       
     # Enable highlighting on selected items
     cb.highlighter(1)  
     
     setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Active Event Loop.New Selection
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1
  O: cb.updateSelectionDict( getFinalSelectionBoxItems( atom3i )  )
                       
     # Enable highlighting on selected items
     cb.highlighter(1)  
     
     setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.New Selection
  E: <ButtonPress-1>
  C: cb.isItemUnderCursorUnselected( atom3i, eventhandler.get_event_params())
  O: event = eventhandler.get_event_params()
     
     cb.clearSelectionTuple()
     # Item under cursor, make sure it's in the selection
     cb.appendSelectionTuple( cb.getItemUnderCursor( atom3i, event)[0]  )
     
     cb.highlighter(0) 
     cb.clearSelectionDict() 
     startNewSelectionBox(atom3i,event , "yellow")
     
     setCursor( atom3i.parent, 'Selection' )

TRANSITION:
  S: Active Event Loop.Drag Nodes
  N: Active Event Loop.Drag Nodes
  E: <Any-Motion>
  C: 1
  O: dragInMotion(atom3i,eventhandler.get_event_params() )
     
     
     wasDragged = True

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Drag Nodes
  E: <ButtonPress-1>
  C: cb.isItemUnderCursorSelected( atom3i, eventhandler.get_event_params()) and not cb.isLabelDragMode()
  O: # Create an object set from the selectionDict
     cb.buildSelectionObjectSet()     
      # Start dragging!
     dragStart( atom3i )    
     setCursor( atom3i.parent, 'Drag' )
     
     
     wasDragged = False

TRANSITION:
  S: Active Event Loop.Drag Nodes
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1
  O: dragFinish( atom3i, eventhandler.get_event_params() )  
     setDefaultCursor( atom3i.parent )
     
     
     if(not wasDragged): cb.clearSelectionTuple()
     if(not wasDragged): cb.highlighter( 0 )      
     if(not wasDragged): cb.clearSelectionDict()
     if(wasDragged): cb.highlighter( 1 )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Add To Selection
  E: <Shift-ButtonPress-1>
  C: cb.isItemUnderCursorUnselected( atom3i, eventhandler.get_event_params())
  O: event=eventhandler.get_event_params()
     
     startNewSelectionBox(atom3i, event, "green")
     
     
     # Item under cursor, make sure it's in the selection
     cb.appendSelectionTuple( cb.getItemUnderCursor( atom3i, event)[0]  )
     
     setCursor( atom3i.parent, 'Selection' )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Remove From Selection
  E: <Alt-ButtonPress-1>
  C: cb.isItemUnderCursorSelected( atom3i, eventhandler.get_event_params())
  O: event=eventhandler.get_event_params()
     
     startNewSelectionBox(atom3i, event, "red")
     
     
     # Item under cursor, make sure it's in the selection
     cb.appendSelectionTuple( cb.getItemUnderCursor( atom3i, event)[0]  )
     
     setCursor( atom3i.parent, 'Selection' )

TRANSITION:
  S: Initial
  N: Active Event Loop
  E: Start
  C: 1
  O: from CallbackHandlers import *
     from Cursors                 import setCursor, setDefaultCursor
     from Utilities                 import modelChange,optimizeConnectionPorts
     import ZoomFocus 
     import SnapGrid
     
     atom3i=eventhandler.get_event_params()
     cb=atom3i.cb

TRANSITION:
  S: Active Event Loop.Remove From Selection
  N: Active Event Loop.Remove From Selection
  E: <Any-Motion>
  C: 1
  O: selectionBoxDragging(atom3i, eventhandler.get_event_params())

TRANSITION:
  S: Active Event Loop.New Selection
  N: Active Event Loop.New Selection
  E: <Any-Motion>
  C: 1
  O: selectionBoxDragging(atom3i,eventhandler.get_event_params()) 
     
     ##atom3i.execAction( selectionBoxDragging, 
     ##            [atom3i, eventhandler.get_event_params()] )

TRANSITION:
  S: Active Event Loop.Add To Selection
  N: Active Event Loop.Add To Selection
  E: <Any-Motion>
  C: 1
  O: selectionBoxDragging(atom3i, eventhandler.get_event_params())

TRANSITION:
  S: Active Event Loop
  N: Active Event Loop
  E: Reset
  C: 1
  O: setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Scale Entity
  E: <KeyPress-r>
  C: not cb.isLabelDragMode()
  O: cb.initReSizer()
     setCursor( atom3i.parent, 'Sizing' )

TRANSITION:
  S: Active Event Loop.Scale Entity
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1
  O: setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Active Event Loop.Scale Entity
  N: Active Event Loop.Scale Entity
  E: <Any-Motion>
  C: 1
  O: scaleWithMotion( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-ButtonPress-3>
  C: 1
  O: atom3ActionMap( atom3i, eventhandler.get_event_params()  )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <ButtonPress-3>
  C: 1
  O: createDynamicMenu( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-a>
  C: 1
  O: selectAllVisibleObjects( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-Delete>
  C: 1
  O: cb.clearSelectionDict()
     atom3i.clearModel()
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-Delete>
  C: 1
  O: #deleteSelected(atom3i)
     getSelectedItemsForDelete(atom3i)

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-s>
  C: 1
  O: cb.smoothSelected()
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: Edit Properties
  C: 1
  O: event =  eventhandler.get_event_params() 
     atom3i.editclass( event.x_root, event.y_root )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-Left>
  C: 1
  O: cb.buildSelectionObjectSet()
     selection = cb.getSelectionObjectSet()
     dragStart(atom3i)
     dragMotion(atom3i,[0,0],[-1,0],selection)
     dragDrop(atom3i,selection)
     optimizeConnectionPorts( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-Right>
  C: 1
  O: cb.buildSelectionObjectSet()
     selection = cb.getSelectionObjectSet()
     dragStart(atom3i)
     dragMotion(atom3i,[0,0],[1,0],selection)
     dragDrop(atom3i,selection)
     optimizeConnectionPorts( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-Down>
  C: 1
  O: cb.buildSelectionObjectSet()
     selection = cb.getSelectionObjectSet()
     dragStart(atom3i)
     dragMotion(atom3i,[0,0],[0,1],selection)
     dragDrop(atom3i,selection)
     optimizeConnectionPorts( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-Up>
  C: 1
  O: cb.buildSelectionObjectSet()
     selection = cb.getSelectionObjectSet()
     dragStart(atom3i)
     dragMotion(atom3i,[0,0],[0,-1],selection)
     dragDrop(atom3i,selection)
     optimizeConnectionPorts( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-o>
  C: 1
  O: atom3i.open()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-s>
  C: 1
  O: atom3i.save(0, atom3i.statusbar.getState( atom3i.statusbar.MODEL )[1][0] )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Alt-KeyPress-s>
  C: 1
  O: atom3i.save(0)

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F1>
  C: atom3i.optionsDatabase.showOptionsDatabase()
  O: atom3i.loadImmediateOptions()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F2>
  C: 1
  O: atom3i.showConsole()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F3>
  C: 1
  O: atom3i.openMetaModel()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F9>
  C: 1
  O: toggleCreateAsSmooth( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F4>
  C: 1
  O: atom3i.closeMetaModel()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F6>
  C: 1
  O: atom3i.popupMenuCreator.LastModelPopup(eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F7>
  C: 1
  O: atom3i.popupMenuCreator.LastMetaModelPopup( eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-m>
  C: 1
  O: atom3i.popupMenuCreator.ModelPopup( eventhandler.get_event_params()  )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-t>
  C: 1
  O: atom3i.popupMenuCreator.TransformationPopup( eventhandler.get_event_params()  )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-m>
  C: 1
  O: atom3i.popupMenuCreator.ModelPopup( eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-f>
  C: 1
  O: atom3i.popupMenuCreator.FilePopup( eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-l>
  C: 1
  O: atom3i.popupMenuCreator.LayoutPopup( eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop
  N: Exit
  E: <Alt-x>
  C: atom3i.exitFromATOM3()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Arrow Editor
  E: <Double-ButtonPress-1>
  C: 1
  O: startArrowEditorMode( atom3i, eventhandler.get_event_params()  ) 
     
     setCursor( atom3i.parent, 'Arrow Editor Idle' )
     
     # OBFUSCATION WARNING:
     # If start arrow editor mode fails, it is assumed that the 
     # user is clicking a non-link and wants to do Edit 
     # Properties on it. 
     # On entering ArrowEditor mode, 'Reset' then 
     # 'Edit Properties' events will be generated.

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Default
  E: <ButtonPress-3>
  C: 1
  O: atom3i.arrowEditor.clearActiveControlPoint()
     setCursor( atom3i.parent, 'Arrow Editor Idle' )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Default
  E: <KeyPress-Delete>
  C: 1
  O: pos = cb.getCanvasCoords( eventhandler.get_event_params()   )
     atom3i.arrowEditor.deleteControlPoint(  pos )
     setCursor( atom3i.parent, 'Arrow Editor Idle' )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Default
  N: Active Event Loop.Arrow Editor.Default
  E: <ButtonPress-3>
  C: 1
  O: atom3i.popupMenuCreator.ArrowEditorPopup( eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Default
  N: Active Event Loop.Arrow Editor.Default
  E: <KeyPress-s>
  C: 1
  O: atom3i.arrowEditor.smoothArrow()

TRANSITION:
  S: Active Event Loop.Arrow Editor.Default
  N: Active Event Loop.Arrow Editor.Default
  E: Edit Properties
  C: 1
  O: itemHandler = atom3i.arrowEditor.getArrowHandler()
     #atom3i.editclass( 0,0,itemHandler )
     event =  eventhandler.get_event_params() 
     atom3i.editclass( event.x_root, event.y_root, itemHandler )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Active Point
  E: <Any-Motion>
  C: 1
  O: atom3i.arrowEditor.setInMotion(  eventhandler.get_event_params()   )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Active Point
  E: <KeyPress-Left>
  C: 1
  O: atom3i.arrowEditor.dragOps(0,0,-1,0,mouseMove=False )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Active Point
  E: <KeyPress-Right>
  C: 1
  O: atom3i.arrowEditor.dragOps(0,0,1,0,mouseMove=False )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Active Point
  E: <KeyPress-Up>
  C: 1
  O: atom3i.arrowEditor.dragOps(0,0,0,1,mouseMove=False )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Active Point
  E: <KeyPress-Down>
  C: 1
  O: atom3i.arrowEditor.dragOps(0,0,0,-1,mouseMove=False )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Default
  N: Active Event Loop.Main
  E: <ButtonPress-1>
  C: not editPoint(atom3i, eventhandler.get_event_params()) 
  O: atom3i.arrowEditor.removeOldEditorArrow()
     setDefaultCursor( atom3i.parent )
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Active Event Loop.Arrow Editor.Default
  N: Active Event Loop.Arrow Editor.Default
  E: <KeyPress-space>
  C: 1
  O: atom3i.arrowEditor.toggleMoveLabelDrawingMode()
     editPoint( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Default
  N: Active Event Loop.Arrow Editor.Active Point
  E: <KeyPress-Insert>
  C: 1
  O: pos = cb.getCanvasCoords( eventhandler.get_event_params()   )
     atom3i.arrowEditor.insertControlPoint( pos )
     modelChange( atom3i )
     
     setCursor( atom3i.parent, 'Arrow Editor Active' )

TRANSITION:
  S: Active Event Loop.Arrow Editor.Default
  N: Active Event Loop.Arrow Editor.Active Point
  E: <ButtonPress-1>
  C: editPoint(atom3i, eventhandler.get_event_params()) 
  O: setCursor(atom3i.parent, 'Arrow Editor Active')

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Active Point
  E: <KeyPress-space>
  C: 1
  O: atom3i.arrowEditor.toggleMoveLabelDrawingMode()
     editPoint( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Drag Nodes
  E: <Control-KeyPress-v>
  C: 1
  O: pasteLoader( atom3i, eventhandler.get_event_params()  )
     setCursor( atom3i.parent, 'Drag' )
     
     wasDragged = False

TRANSITION:
  S: Active Event Loop.New Arrow.Snap Points
  N: Active Event Loop.New Arrow.Snap Points
  E: <Any-Motion>
  C: 1
  O: realtimeArrowMotion( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.New Arrow.Snap Points
  N: Active Event Loop.New Arrow.Snap Points
  E: <ButtonPress-3>
  C: 1
  O: arrowRollback( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.New Arrow.No Snap
  N: Active Event Loop.New Arrow.No Snap
  E: <Any-Motion>
  C: 1
  O: realtimeArrowMotion( atom3i, eventhandler.get_event_params(), snap=False )

TRANSITION:
  S: Active Event Loop.New Arrow.No Snap
  N: Active Event Loop.New Arrow.No Snap
  E: <ButtonPress-3>
  C: 1
  O: arrowRollback( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.New Arrow.Snap Points
  N: Active Event Loop.New Arrow.No Snap
  E: <KeyPress-space>
  C: 1
  O: setCursor( atom3i.parent, 'New Arrow No Snap' )
     realtimeArrowMotion( atom3i, eventhandler.get_event_params(), snap=False )

TRANSITION:
  S: Active Event Loop.New Arrow.No Snap
  N: Active Event Loop.New Arrow.Snap Points
  E: <KeyPress-space>
  C: 1
  O: setCursor( atom3i.parent, 'New Arrow' )
     realtimeArrowMotion( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F8>
  C: 1
  O: atom3i.popupMenuCreator.SourcePathPopup( eventhandler.get_event_params()  )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-c>
  C: 1
  O: copySave( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-d>
  C: 1
  O: cb.highlighter(0)
     cb.clearSelectionDict()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-x>
  C: 1
  O: cutSave( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Alt-KeyPress-c>
  C: 1
  O: copyObjectAttributes( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Alt-KeyPress-v>
  C: 1
  O: pasteObjectAttributes( atom3i, eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.New Arrow
  E: <Control-ButtonPress-1>
  C: 1
  O: startArrowDrawing( atom3i, eventhandler.get_event_params() )  
     setCursor( atom3i.parent, 'New Arrow' )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-z>
  C: 1
  O: atom3i.undoer.undo()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-y>
  C: 1
  O: atom3i.undoer.redo()

TRANSITION:
  S: Active Event Loop.Main
  N: Postscript
  E: <KeyPress-F5>
  C: 1
  O: atom3i.postscriptBox.createMask( eventhandler.get_event_params()   )
     setCursor( atom3i.parent, 'Postscript' )

TRANSITION:
  S: Postscript
  N: Active Event Loop.Main
  E: <ButtonPress-3>
  C: 1
  O: atom3i.postscriptBox.generatePostscript()
     atom3i.disableSnapGridForPrinting(False)
     setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Postscript
  N: Bounding Box Edit
  E: <ButtonPress-1>
  C: atom3i.postscriptBox.setActiveSide( cb.getCanvasCoords( eventhandler.get_event_params() )  )
  O: setCursor( atom3i.parent, 'Sizing' )

TRANSITION:
  S: Bounding Box Edit
  N: Postscript
  E: <ButtonPress-3>
  C: 1
  O: setCursor( atom3i.parent, 'Postscript' )

TRANSITION:
  S: Bounding Box Edit
  N: Bounding Box Edit
  E: <Any-Motion>
  C: 1
  O: atom3i.postscriptBox.inMotion( cb.getCanvasCoords( eventhandler.get_event_params() ) )

TRANSITION:
  S: Active Event Loop.Main
  N: Drag Label
  E: <ButtonPress-1>
  C: cb.isItemUnderCursorSelected( atom3i, eventhandler.get_event_params()) and cb.isLabelDragMode()
  O: # Create an object set from the selectionDict
     cb.buildSelectionObjectSet()     
     cb.getCanvasCoords( eventhandler.get_event_params() )
     setCursor( atom3i.parent, 'Drag Label Motion' )

TRANSITION:
  S: Drag Label
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1
  O: setDefaultCursor( atom3i.parent )
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Drag Label
  N: Drag Label
  E: <Any-Motion>
  C: 1
  O: dragLabelsInMotion(atom3i,eventhandler.get_event_params() )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-space>
  C: 1
  O: cb.toggleLabelDragMode()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F10>
  C: 1
  O: atom3i.toggleSnapGrid()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F12>
  C: 1
  O: import ArrowOptimizer
     ArrowOptimizer.applyLayout( atom3i = atom3i )
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-F11>
  C: 1
  O: import SpringLayout
     selection = cb.buildSelectionObjectSet()
     SpringLayout.applyLayout( atom3i = atom3i, selection = selection )
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Control-KeyPress-f>
  C: 1
  O: import ForceTransfer
     ForceTransfer.applyLayout( atom3i=atom3i , selection=cb.buildSelectionObjectSet() )
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Scale Text
  N: Scale Text
  E: <Any-Motion>
  C: 1
  O: scaleWithMotion( atom3i, eventhandler.get_event_params(), textMode=True )

TRANSITION:
  S: Active Event Loop.Main
  N: Scale Text
  E: <KeyPress-r>
  C: cb.isLabelDragMode()
  O: cb.initReSizer()
     setCursor( atom3i.parent, 'Sizing' )

TRANSITION:
  S: Scale Text
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1
  O: setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Scale Text
  N: Scale Text
  E: <ButtonPress-3>
  C: 1
  O: scaleReset( atom3i, textMode=True )

TRANSITION:
  S: Active Event Loop.Scale Entity
  N: Active Event Loop.Scale Entity
  E: <ButtonPress-3>
  C: 1
  O: scaleReset( atom3i )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: Reboot
  C: 1
  O: atom3i.reboot_AToM3()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-z>
  C: 1
  O: ZoomFocus.applyLayout( atom3i )
     SnapGrid.applyLayout( atom3i )   #<-- Zoom could mess up the snapgrid...
     optimizeConnectionPorts( atom3i, doAllLinks=True ) 
     modelChange( atom3i ) # Model changed, update statusbar & undo

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Drag Nodes
  E: <KeyPress-d>
  C: cb.getOverlappedItemUnderCursor( atom3i, eventhandler.get_event_params() )
  O: # Create an object set from the selectionDict
     cb.buildSelectionObjectSet()     
      # Start dragging!
     dragStart( atom3i )    
     setCursor( atom3i.parent, 'Drag' )
     
     wasDragged = False

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <KeyPress-e>
  C: cb.getOverlappedItemUnderCursor( atom3i, eventhandler.get_event_params(), 'Select Object to Edit' )
  O: # Edit the item we get from the guard condition
     listOfLists = cb.getSelectionDict().values()
     item, obj = listOfLists[0] # There should only be one value actually
     
     #x,y = cb.getLastClickCoord()
     #atom3i.editclass(x,y,item )
     event =  eventhandler.get_event_params() 
     atom3i.editclass( event.x_root, event.y_root, item )

TRANSITION:
  S: Active Event Loop.Main
  N: GG Graph Select
  E: GG Select
  C: 1

TRANSITION:
  S: GG Graph Select
  N: Active Event Loop.Main
  E: <Any-ButtonRelease-1>
  C: 1

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <Shift-KeyPress-Delete>
  C: 1
  O: getSelectedItemsForDelete(atom3i, entityOnlyFlag=True)

TRANSITION:
  S: Active Event Loop.Arrow Editor.Active Point
  N: Active Event Loop.Arrow Editor.Default
  E: <KeyPress-Return>
  C: 1
  O: atom3i.arrowEditor.clearActiveControlPoint()
     setCursor( atom3i.parent, 'Arrow Editor Idle' )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Arrow Editor
  E: <Shift-ButtonPress-3>
  C: 1
  O: startArrowEditorMode( atom3i, eventhandler.get_event_params()  ) 
     
     setCursor( atom3i.parent, 'Arrow Editor Idle' )

TRANSITION:
  S: Active Event Loop.Main
  N: Postscript
  E: Postscript
  C: 1
  O: atom3i.postscriptBox.createMask( eventhandler.get_event_params()   )
     setCursor( atom3i.parent, 'Postscript' )

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <serviceNodeDeleteRequest>
  C: 1
  O: # This should only be triggered by CallbackHandlers.getSelectedItemsForDelete() which gives us a DeleteEvent, not a Tkinter event. This DeleteEvent has a destroy method to delete a single ASGNode instance.
     event = eventhandler.get_event_params()
     event.destroy()

TRANSITION:
  S: Active Event Loop.Main
  N: Active Event Loop.Main
  E: <serviceLinkDeleteRequest>
  C: 1
  O: # This should only be triggered by CallbackHandlers.getSelectedItemsForDelete() which gives us a DeleteEvent, not a Tkinter event. This DeleteEvent has a destroy method to delete a single ASGNode instance.
     event = eventhandler.get_event_params()
     event.destroy()

TRANSITION:
  S: Active Event Loop.New Arrow
  N: Active Event Loop
  E: <Arrow Created>
  C: 1
  O: setDefaultCursor( atom3i.parent )

TRANSITION:
  S: Active Event Loop.New Arrow.Snap Points
  N: Active Event Loop.New Arrow.Drop Point
  E: <ButtonPress-1>
  C: 1

TRANSITION:
  S: Active Event Loop.New Arrow.Drop Point
  N: Active Event Loop.New Arrow.Snap Points
  E: [Done]
  C: 1

TRANSITION:
  S: Active Event Loop.New Arrow.No Snap
  N: Active Event Loop.New Arrow.Drop Point2
  E: <ButtonPress-1>
  C: 1

TRANSITION:
  S: Active Event Loop.New Arrow.Drop Point2
  N: Active Event Loop.New Arrow.No Snap
  E: [Done]
  C: 1

TRANSITION:
  S: Postscript
  N: Active Event Loop.Main
  E: Done
  C: 1
  O: atom3i.postscriptBox.generatePostscript()
     atom3i.disableSnapGridForPrinting(False)
     setDefaultCursor( atom3i.parent )

