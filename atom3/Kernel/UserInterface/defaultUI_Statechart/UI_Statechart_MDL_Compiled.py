# Python source code generated by SCC (StateChart Compiler) 0.3, written by Thomas Feng
#   Source: D:/EclipseWorkspace/atom3/Kernel/UserInterface/defaultUI_Statechart\UI_Statechart_MDL.des
#   Date:   June 19, 2006
#   Time:   1:25:4


# Header Section -- definition and module importation used by the following parts
import sys
import copy
import time
import string
import thread
import threading
import time


class State:

  def __init__(self):

    self.StateID=-1
    self.Next=None

  def copy(self):

    s=State()
    s.StateID=self.StateID
    if self.Next!=None:
      s.Next=self.Next.copy()
    return s


class History:

  def __init__(self):

    self.States=None
    self.Times=None
    self.Submodel=None


class EventList:

  def __init__(self):

    self.Event=None
    self.Next=None

  def Append(self, e):

    if isinstance(e, str):
      el=EventList()
      el.Event=e
      cur=this
      while cur.Next!=None and cur.Event!=e:
        cur=cur.Next
      if cur.Event!=e:
        cur.Next=el

    elif isinstance(e, EventList):
      el=e
      while el!=None:
        self.Append(el.Event)
        el=el.Next


class StringList:

  def __init__(self, str=""):

    self.str=str
    self.Next=None

  def sort(self):

    if self.Next!=None:
      self.Next=self.Next.sort()
      if self.Next.str<self.str:
        first=self.Next
        prev=self.Next
        next=self.Next.Next
        while next!=None and next.str<self.str:
          prev=next
          next=next.Next
        self.Next=next
        prev.Next=self
        return first
    return self


class IntList:

  def __init__(self, int=0):

    self.int=int
    self.Next=None


class Hierarchy:

  def __init__(self):

    self.StateName=None
    self.PathName=None
    self.StateNum=-1
    self.Level=-1
    self.Next=None


class StateMachine:

  def eventStr2Int(self, event):

    return -1

  def getCurrentStateList(self):

    return None

  def getCurrentState(self):

    return "[]"

  def getEnabledEvents(self):

    return None

  def initModel(self, run_initializer=1, run_enter_actions=1):

    pass

  def isInState(self, s, check_substate=1, use_backup=1):

    return 0

  def getParentState(self, state):

    return -1

  def isHistoryState(self, state):

    return 0

  def isLeafState(self, state):

    return 0

  def getHierarchy(self, start_level=0, state_prefix=None):

    return None

  def topLevelHistory(self):

    pass

  def recordAllEnteredStates(self):

    pass

  def runAllEnterActions(self):

    pass

  def runInitializer(self):

    pass

  def runFinalizer(self):

    pass

  def runInteractor(self):

    pass

  def state(self):

    pass

  def handleEvent(self, se, params=[], cond=None, scheduler=None):

    return 0

  def event(self, e, params=[], cond=None, scheduler=None):

    pass


def startsWith(s, ss):

  return ss==None or (s!=None and len(s)>=len(ss) and s[0:len(ss)]==ss)


# used only when --ext is set
from code import InteractiveInterpreter


# Main Class -- the top level model that is executed from the command line
class UI_Statechart_MDL(StateMachine):

  # Constants for this model
  StateNum=22
  EventNames=["<Alt-ButtonPress-1>",
              "<Alt-KeyPress-c>",
              "<Alt-KeyPress-s>",
              "<Alt-KeyPress-v>",
              "<Alt-x>",
              "<Any-ButtonRelease-1>",
              "<Any-Motion>",
              "<Arrow Created>",
              "<ButtonPress-1>",
              "<ButtonPress-3>",
              "<Control-ButtonPress-1>",
              "<Control-ButtonPress-3>",
              "<Control-KeyPress-Delete>",
              "<Control-KeyPress-a>",
              "<Control-KeyPress-c>",
              "<Control-KeyPress-d>",
              "<Control-KeyPress-f>",
              "<Control-KeyPress-o>",
              "<Control-KeyPress-s>",
              "<Control-KeyPress-v>",
              "<Control-KeyPress-x>",
              "<Control-KeyPress-y>",
              "<Control-KeyPress-z>",
              "<Double-ButtonPress-1>",
              "<KeyPress-Delete>",
              "<KeyPress-Down>",
              "<KeyPress-F10>",
              "<KeyPress-F11>",
              "<KeyPress-F12>",
              "<KeyPress-F1>",
              "<KeyPress-F2>",
              "<KeyPress-F3>",
              "<KeyPress-F4>",
              "<KeyPress-F5>",
              "<KeyPress-F6>",
              "<KeyPress-F7>",
              "<KeyPress-F8>",
              "<KeyPress-F9>",
              "<KeyPress-Insert>",
              "<KeyPress-Left>",
              "<KeyPress-Return>",
              "<KeyPress-Right>",
              "<KeyPress-Up>",
              "<KeyPress-d>",
              "<KeyPress-e>",
              "<KeyPress-f>",
              "<KeyPress-l>",
              "<KeyPress-m>",
              "<KeyPress-r>",
              "<KeyPress-s>",
              "<KeyPress-space>",
              "<KeyPress-t>",
              "<KeyPress-z>",
              "<Shift-ButtonPress-1>",
              "<Shift-ButtonPress-3>",
              "<Shift-KeyPress-Delete>",
              "<serviceLinkDeleteRequest>",
              "<serviceNodeDeleteRequest>",
              "Done",
              "Edit Properties",
              "GG Select",
              "Postscript",
              "Reboot",
              "Reset",
              "Start",
              "[Done]" 
             ]
  StateNames=["Active Event Loop",
              "Active Event Loop.Add To Selection",
              "Active Event Loop.Arrow Editor",
              "Active Event Loop.Arrow Editor.Active Point",
              "Active Event Loop.Arrow Editor.Default",
              "Active Event Loop.Drag Nodes",
              "Active Event Loop.Main",
              "Active Event Loop.New Arrow",
              "Active Event Loop.New Arrow.Drop Point",
              "Active Event Loop.New Arrow.Drop Point2",
              "Active Event Loop.New Arrow.No Snap",
              "Active Event Loop.New Arrow.Snap Points",
              "Active Event Loop.New Selection",
              "Active Event Loop.Remove From Selection",
              "Active Event Loop.Scale Entity",
              "Bounding Box Edit",
              "Drag Label",
              "Exit",
              "GG Graph Select",
              "Initial",
              "Postscript",
              "Scale Text" 
             ]
  ParentTable=[-1,  # Active Event Loop -- parent (None)
               0,  # Active Event Loop.Add To Selection -- parent Active Event Loop
               0,  # Active Event Loop.Arrow Editor -- parent Active Event Loop
               2,  # Active Event Loop.Arrow Editor.Active Point -- parent Active Event Loop.Arrow Editor
               2,  # Active Event Loop.Arrow Editor.Default -- parent Active Event Loop.Arrow Editor
               0,  # Active Event Loop.Drag Nodes -- parent Active Event Loop
               0,  # Active Event Loop.Main -- parent Active Event Loop
               0,  # Active Event Loop.New Arrow -- parent Active Event Loop
               7,  # Active Event Loop.New Arrow.Drop Point -- parent Active Event Loop.New Arrow
               7,  # Active Event Loop.New Arrow.Drop Point2 -- parent Active Event Loop.New Arrow
               7,  # Active Event Loop.New Arrow.No Snap -- parent Active Event Loop.New Arrow
               7,  # Active Event Loop.New Arrow.Snap Points -- parent Active Event Loop.New Arrow
               0,  # Active Event Loop.New Selection -- parent Active Event Loop
               0,  # Active Event Loop.Remove From Selection -- parent Active Event Loop
               0,  # Active Event Loop.Scale Entity -- parent Active Event Loop
               -1,  # Bounding Box Edit -- parent (None)
               -1,  # Drag Label -- parent (None)
               -1,  # Exit -- parent (None)
               -1,  # GG Graph Select -- parent (None)
               -1,  # Initial -- parent (None)
               -1,  # Postscript -- parent (None)
               -1   # Scale Text -- parent (None)
              ]
  HistoryStateTable=[0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0 
                    ]
  LeafStateTable=[None,
                  "Active Event Loop.Add To Selection",
                  None,
                  "Active Event Loop.Arrow Editor.Active Point",
                  "Active Event Loop.Arrow Editor.Default",
                  "Active Event Loop.Drag Nodes",
                  "Active Event Loop.Main",
                  None,
                  "Active Event Loop.New Arrow.Drop Point",
                  "Active Event Loop.New Arrow.Drop Point2",
                  "Active Event Loop.New Arrow.No Snap",
                  "Active Event Loop.New Arrow.Snap Points",
                  "Active Event Loop.New Selection",
                  "Active Event Loop.Remove From Selection",
                  "Active Event Loop.Scale Entity",
                  "Bounding Box Edit",
                  "Drag Label",
                  "Exit",
                  "GG Graph Select",
                  "Initial",
                  "Postscript",
                  "Scale Text" 
                 ]
  OrthogonalInBetween=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 
                      ]
  OrthogonalTable=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 
                  ]
  IntervalTable=[None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None 
                ]
  RescheduleTable=[-1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1,
                   -1 
                  ]
  Hierarchy=[[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Add To Selection
             [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Arrow Editor
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Arrow Editor.Active Point
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Arrow Editor.Default
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Drag Nodes
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Main
             [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.New Arrow
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.New Arrow.Drop Point
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.New Arrow.Drop Point2
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.New Arrow.No Snap
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.New Arrow.Snap Points
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.New Selection
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Remove From Selection
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Active Event Loop.Scale Entity
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Bounding Box Edit
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Drag Label
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Exit
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state GG Graph Select
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Initial
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # substates of state Postscript
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]   # substates of state Scale Text
            ]
  CommonStateTable=[[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] 
                   ]
  Description=None

  ##Lock=thread.allocate_lock()
  CurrentModel=None

  def __init__(self, Interpreter=None, Parent=None, OldInstance=None):

    # Variables
    self.Parent=Parent
    self.HistoryCount=0
    self.state=None
    self.BackState=None
    if OldInstance!=None:
      self.Submodels=OldInstance.Submodels
    else:
      self.Submodels=[]
      for i in range(UI_Statechart_MDL.StateNum):
        self.Submodels.append(None)
    self.history=[]
    for i in range(UI_Statechart_MDL.StateNum):
      self.history.append(None)

    # Constructor
    for i in range(UI_Statechart_MDL.StateNum):
      self.history[i]=History()
      self.history[i].States=[]
      self.history[i].Times=[]
      for j in range(UI_Statechart_MDL.StateNum):
        self.history[i].States.append(-1)
        self.history[i].Times.append(-1)

    self.TimedTransitions=[] # used only when --ext is set
    for i in range(UI_Statechart_MDL.StateNum):
      self.TimedTransitions.append(None)

    self.clearEnteredStates()
    self.HasInteractor=0

    # Interpreter of action code
    if self.Parent==None:  # Top-level model
      if Interpreter:
        self.DefaultInterpreter=Interpreter
      else:
        self.DefaultInterpreter=InteractiveInterpreter()
      self.setupInterpreter()

      ##self.EventsCond=threading.Condition()
      ##self.SchedulerCond=threading.Condition()
      self.Schedules=[]
      self.PendingEvents=None
      self.PendingEventsTail=None
    else:
      self.DefaultInterpreter=Interpreter
    self.Started=0
    self.Stopped=0

    self.description=UI_Statechart_MDL.Description

  # Methods
  def isParent(self, sp, sc):

    return sc>=0 and (sp<0 or UI_Statechart_MDL.Hierarchy[sp][sc])

  def isInState(self, s, check_substate=1, use_backup=1):

    if isinstance(s, int):
      if use_backup:
        st=self.BackState
      else:
        st=self.state
      while st!=None:
        if st.StateID==s or (check_substate and self.isParent(s, st.StateID)):
          return 1
        else:
          st=st.Next
      return 0

    elif isinstance(s, str):
      i=0
      while i<UI_Statechart_MDL.StateNum:
        if s==UI_Statechart_MDL.StateNames[i]:
          return self.isInState(i, check_substate, use_backup)
        i=i+1
      i=0
      while i<UI_Statechart_MDL.StateNum:
        stname=UI_Statechart_MDL.StateNames[i]
        if self.Submodels[i]!=None and startsWith(s, stname+"."):
          pos=len(stname)+1
          SubmodelState=s[pos:]
          return self.isInState(i, 0, use_backup) and self.Submodels[i].isInState(SubmodelState, check_substate, use_backup);
        i=i+1
      return 0

    else:
      return 0

  class main_callable:
    def __call__(self, argv):
      model=UI_Statechart_MDL()
      cmd=""
      model.initModel()
      if model.HasInteractor:
        model.runInteractor()
      else:
        ##cond=thread.allocate_lock()
        while cmd!="exit":
          sys.__stdout__.write(model.getCurrentState()+" > ")
          cmd=string.strip(sys.__stdin__.readline())
          if cmd=="exit":
            break
          if not model.Stopped:
            ##cond.acquire()
            ##model.event(cmd, [], cond)
            model.event(cmd, [])
            ##cond.acquire()
            ##cond.release()
      model.runFinalizer()
  main=main_callable()

  def initModel(self, run_initializer=1, run_enter_actions=1, TkInstance = None ):

    self.clearEnteredStates()
    if self.Parent==None and UI_Statechart_MDL.Description!=None:
      sys.__stdout__.write(UI_Statechart_MDL.Description+"\n")
    self.addInState(19) # init state "Initial"
    self.recordEnteredState(19)
    if run_initializer:
      self.runInitializer()
    if not self.HasInteractor:
      self.start(None, run_enter_actions, TkInstance )

  def applyMask(self, mask, dest):

    i=0
    while i<UI_Statechart_MDL.StateNum:
      dest[i]=dest[i] and mask[i]
      i=i+1

  def handleEvent(self, se, params=[], cond=None, scheduler=None):

    if not self.Started:
      if cond:
        cond.release()
      return 0
    self.params=params
    handled=0
    table=[]
    i=0
    while i<UI_Statechart_MDL.StateNum:
      table.append(1)
      i=i+1
    if self.state:
      self.BackState=self.state.copy()
    else:
      self.BackState=None
    e=self.eventStr2Int(se)
    if e==0: # event "<Alt-ButtonPress-1>"
      if table[6] and self.isInState(6) and self.testCondition(0):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(2) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 13)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(1):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(3) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 13)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==1: # event "<Alt-KeyPress-c>"
      if table[6] and self.isInState(6) and self.testCondition(2):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(4) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==2: # event "<Alt-KeyPress-s>"
      if table[6] and self.isInState(6) and self.testCondition(3):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(5) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==3: # event "<Alt-KeyPress-v>"
      if table[6] and self.isInState(6) and self.testCondition(4):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(6) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==4: # event "<Alt-x>"
      if table[0] and self.isInState(0) and self.testCondition(5):
        if (scheduler==self or scheduler==None) and table[0]:
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(0, 17)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[0], table)
          handled=1
    elif e==5: # event "<Any-ButtonRelease-1>"
      if table[13] and self.isInState(13) and self.testCondition(6):
        if (scheduler==self or scheduler==None) and table[13]:
          self.runActionCode(7) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(13, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[13], table)
          handled=1
      if table[1] and self.isInState(1) and self.testCondition(7):
        if (scheduler==self or scheduler==None) and table[1]:
          self.runActionCode(8) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(1, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[1], table)
          handled=1
      if table[12] and self.isInState(12) and self.testCondition(8):
        if (scheduler==self or scheduler==None) and table[12]:
          self.runActionCode(9) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(12, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[12], table)
          handled=1
      if table[5] and self.isInState(5) and self.testCondition(9):
        if (scheduler==self or scheduler==None) and table[5]:
          self.runActionCode(10) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(5, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[5], table)
          handled=1
      if table[14] and self.isInState(14) and self.testCondition(10):
        if (scheduler==self or scheduler==None) and table[14]:
          self.runActionCode(11) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(14, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[14], table)
          handled=1
      if table[16] and self.isInState(16) and self.testCondition(11):
        if (scheduler==self or scheduler==None) and table[16]:
          self.runActionCode(12) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(16, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[16], table)
          handled=1
      if table[21] and self.isInState(21) and self.testCondition(12):
        if (scheduler==self or scheduler==None) and table[21]:
          self.runActionCode(13) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(21, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[21], table)
          handled=1
      if table[18] and self.isInState(18) and self.testCondition(13):
        if (scheduler==self or scheduler==None) and table[18]:
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(18, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[18], table)
          handled=1
    elif e==6: # event "<Any-Motion>"
      if table[6] and self.isInState(6) and self.testCondition(14):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(14) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[5] and self.isInState(5) and self.testCondition(15):
        if (scheduler==self or scheduler==None) and table[5]:
          self.runActionCode(15) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(5, 5)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[5], table)
          handled=1
      if table[13] and self.isInState(13) and self.testCondition(16):
        if (scheduler==self or scheduler==None) and table[13]:
          self.runActionCode(16) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(13, 13)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[13], table)
          handled=1
      if table[12] and self.isInState(12) and self.testCondition(17):
        if (scheduler==self or scheduler==None) and table[12]:
          self.runActionCode(17) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(12, 12)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[12], table)
          handled=1
      if table[1] and self.isInState(1) and self.testCondition(18):
        if (scheduler==self or scheduler==None) and table[1]:
          self.runActionCode(18) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(1, 1)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[1], table)
          handled=1
      if table[14] and self.isInState(14) and self.testCondition(19):
        if (scheduler==self or scheduler==None) and table[14]:
          self.runActionCode(19) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(14, 14)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[14], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(20):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(20) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
      if table[11] and self.isInState(11) and self.testCondition(21):
        if (scheduler==self or scheduler==None) and table[11]:
          self.runActionCode(21) # output action(s)
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(11, 11)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[11], table)
          handled=1
      if table[10] and self.isInState(10) and self.testCondition(22):
        if (scheduler==self or scheduler==None) and table[10]:
          self.runActionCode(22) # output action(s)
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(10, 10)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[10], table)
          handled=1
      if table[15] and self.isInState(15) and self.testCondition(23):
        if (scheduler==self or scheduler==None) and table[15]:
          self.runActionCode(23) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(15, 15)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[15], table)
          handled=1
      if table[16] and self.isInState(16) and self.testCondition(24):
        if (scheduler==self or scheduler==None) and table[16]:
          self.runActionCode(24) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(16, 16)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[16], table)
          handled=1
      if table[21] and self.isInState(21) and self.testCondition(25):
        if (scheduler==self or scheduler==None) and table[21]:
          self.runActionCode(25) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(21, 21)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[21], table)
          handled=1
    elif e==7: # event "<Arrow Created>"
      if table[7] and self.isInState(7) and self.testCondition(26):
        if (scheduler==self or scheduler==None) and table[7]:
          self.runActionCode(26) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(7, 0)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[7], table)
          handled=1
    elif e==8: # event "<ButtonPress-1>"
      if table[6] and self.isInState(6) and self.testCondition(27):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(27) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 12)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(28):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(28) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 12)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(29):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(29) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 5)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[4] and self.isInState(4) and self.testCondition(30):
        if (scheduler==self or scheduler==None) and table[4]:
          self.runActionCode(30) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(4, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[4], table)
          handled=1
      if table[4] and self.isInState(4) and self.testCondition(31):
        if (scheduler==self or scheduler==None) and table[4]:
          self.runActionCode(31) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(4, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[4], table)
          handled=1
      if table[20] and self.isInState(20) and self.testCondition(32):
        if (scheduler==self or scheduler==None) and table[20]:
          self.runActionCode(32) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(20, 15)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[20], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(33):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(33) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(6, 16)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[11] and self.isInState(11) and self.testCondition(34):
        if (scheduler==self or scheduler==None) and table[11]:
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(11, 8)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[11], table)
          handled=1
      if table[10] and self.isInState(10) and self.testCondition(35):
        if (scheduler==self or scheduler==None) and table[10]:
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(10, 9)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[10], table)
          handled=1
    elif e==9: # event "<ButtonPress-3>"
      if table[6] and self.isInState(6) and self.testCondition(36):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(34) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(37):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(35) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 4)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
      if table[4] and self.isInState(4) and self.testCondition(38):
        if (scheduler==self or scheduler==None) and table[4]:
          self.runActionCode(36) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(4, 4)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[4], table)
          handled=1
      if table[11] and self.isInState(11) and self.testCondition(39):
        if (scheduler==self or scheduler==None) and table[11]:
          self.runActionCode(37) # output action(s)
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(11, 11)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[11], table)
          handled=1
      if table[10] and self.isInState(10) and self.testCondition(40):
        if (scheduler==self or scheduler==None) and table[10]:
          self.runActionCode(38) # output action(s)
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(10, 10)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[10], table)
          handled=1
      if table[20] and self.isInState(20) and self.testCondition(41):
        if (scheduler==self or scheduler==None) and table[20]:
          self.runActionCode(39) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(20, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[20], table)
          handled=1
      if table[15] and self.isInState(15) and self.testCondition(42):
        if (scheduler==self or scheduler==None) and table[15]:
          self.runActionCode(40) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(15, 20)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[15], table)
          handled=1
      if table[21] and self.isInState(21) and self.testCondition(43):
        if (scheduler==self or scheduler==None) and table[21]:
          self.runActionCode(41) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(21, 21)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[21], table)
          handled=1
      if table[14] and self.isInState(14) and self.testCondition(44):
        if (scheduler==self or scheduler==None) and table[14]:
          self.runActionCode(42) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(14, 14)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[14], table)
          handled=1
    elif e==10: # event "<Control-ButtonPress-1>"
      if table[6] and self.isInState(6) and self.testCondition(45):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(43) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 7)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==11: # event "<Control-ButtonPress-3>"
      if table[6] and self.isInState(6) and self.testCondition(46):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(44) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==12: # event "<Control-KeyPress-Delete>"
      if table[6] and self.isInState(6) and self.testCondition(47):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(45) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==13: # event "<Control-KeyPress-a>"
      if table[6] and self.isInState(6) and self.testCondition(48):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(46) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==14: # event "<Control-KeyPress-c>"
      if table[6] and self.isInState(6) and self.testCondition(49):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(47) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==15: # event "<Control-KeyPress-d>"
      if table[6] and self.isInState(6) and self.testCondition(50):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(48) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==16: # event "<Control-KeyPress-f>"
      if table[6] and self.isInState(6) and self.testCondition(51):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(49) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==17: # event "<Control-KeyPress-o>"
      if table[6] and self.isInState(6) and self.testCondition(52):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(50) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==18: # event "<Control-KeyPress-s>"
      if table[6] and self.isInState(6) and self.testCondition(53):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(51) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==19: # event "<Control-KeyPress-v>"
      if table[6] and self.isInState(6) and self.testCondition(54):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(52) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 5)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==20: # event "<Control-KeyPress-x>"
      if table[6] and self.isInState(6) and self.testCondition(55):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(53) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==21: # event "<Control-KeyPress-y>"
      if table[6] and self.isInState(6) and self.testCondition(56):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(54) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==22: # event "<Control-KeyPress-z>"
      if table[6] and self.isInState(6) and self.testCondition(57):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(55) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==23: # event "<Double-ButtonPress-1>"
      if table[6] and self.isInState(6) and self.testCondition(58):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(56) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 2)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==24: # event "<KeyPress-Delete>"
      if table[6] and self.isInState(6) and self.testCondition(59):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(57) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(60):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(58) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 4)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
    elif e==25: # event "<KeyPress-Down>"
      if table[6] and self.isInState(6) and self.testCondition(61):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(59) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(62):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(60) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
    elif e==26: # event "<KeyPress-F10>"
      if table[6] and self.isInState(6) and self.testCondition(63):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(61) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==27: # event "<KeyPress-F11>"
      if table[6] and self.isInState(6) and self.testCondition(64):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(62) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==28: # event "<KeyPress-F12>"
      if table[6] and self.isInState(6) and self.testCondition(65):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(63) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==29: # event "<KeyPress-F1>"
      if table[6] and self.isInState(6) and self.testCondition(66):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(64) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==30: # event "<KeyPress-F2>"
      if table[6] and self.isInState(6) and self.testCondition(67):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(65) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==31: # event "<KeyPress-F3>"
      if table[6] and self.isInState(6) and self.testCondition(68):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(66) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==32: # event "<KeyPress-F4>"
      if table[6] and self.isInState(6) and self.testCondition(69):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(67) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==33: # event "<KeyPress-F5>"
      if table[6] and self.isInState(6) and self.testCondition(70):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(68) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(6, 20)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==34: # event "<KeyPress-F6>"
      if table[6] and self.isInState(6) and self.testCondition(71):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(69) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==35: # event "<KeyPress-F7>"
      if table[6] and self.isInState(6) and self.testCondition(72):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(70) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==36: # event "<KeyPress-F8>"
      if table[6] and self.isInState(6) and self.testCondition(73):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(71) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==37: # event "<KeyPress-F9>"
      if table[6] and self.isInState(6) and self.testCondition(74):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(72) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==38: # event "<KeyPress-Insert>"
      if table[4] and self.isInState(4) and self.testCondition(75):
        if (scheduler==self or scheduler==None) and table[4]:
          self.runActionCode(73) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(4, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[4], table)
          handled=1
    elif e==39: # event "<KeyPress-Left>"
      if table[6] and self.isInState(6) and self.testCondition(76):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(74) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(77):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(75) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
    elif e==40: # event "<KeyPress-Return>"
      if table[3] and self.isInState(3) and self.testCondition(78):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(76) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 4)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
    elif e==41: # event "<KeyPress-Right>"
      if table[6] and self.isInState(6) and self.testCondition(79):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(77) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(80):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(78) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
    elif e==42: # event "<KeyPress-Up>"
      if table[6] and self.isInState(6) and self.testCondition(81):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(79) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(82):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(80) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
    elif e==43: # event "<KeyPress-d>"
      if table[6] and self.isInState(6) and self.testCondition(83):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(81) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 5)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==44: # event "<KeyPress-e>"
      if table[6] and self.isInState(6) and self.testCondition(84):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(82) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==45: # event "<KeyPress-f>"
      if table[6] and self.isInState(6) and self.testCondition(85):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(83) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==46: # event "<KeyPress-l>"
      if table[6] and self.isInState(6) and self.testCondition(86):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(84) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==47: # event "<KeyPress-m>"
      if table[6] and self.isInState(6) and self.testCondition(87):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(85) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(88):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(86) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==48: # event "<KeyPress-r>"
      if table[6] and self.isInState(6) and self.testCondition(89):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(87) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 14)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(90):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(88) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(6, 21)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==49: # event "<KeyPress-s>"
      if table[6] and self.isInState(6) and self.testCondition(91):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(89) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[4] and self.isInState(4) and self.testCondition(92):
        if (scheduler==self or scheduler==None) and table[4]:
          self.runActionCode(90) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(4, 4)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[4], table)
          handled=1
    elif e==50: # event "<KeyPress-space>"
      if table[4] and self.isInState(4) and self.testCondition(93):
        if (scheduler==self or scheduler==None) and table[4]:
          self.runActionCode(91) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(4, 4)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[4], table)
          handled=1
      if table[3] and self.isInState(3) and self.testCondition(94):
        if (scheduler==self or scheduler==None) and table[3]:
          self.runActionCode(92) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(3, 3)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[3], table)
          handled=1
      if table[11] and self.isInState(11) and self.testCondition(95):
        if (scheduler==self or scheduler==None) and table[11]:
          self.runActionCode(93) # output action(s)
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(11, 10)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[11], table)
          handled=1
      if table[10] and self.isInState(10) and self.testCondition(96):
        if (scheduler==self or scheduler==None) and table[10]:
          self.runActionCode(94) # output action(s)
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(10, 11)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[10], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(97):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(95) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==51: # event "<KeyPress-t>"
      if table[6] and self.isInState(6) and self.testCondition(98):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(96) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==52: # event "<KeyPress-z>"
      if table[6] and self.isInState(6) and self.testCondition(99):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(97) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==53: # event "<Shift-ButtonPress-1>"
      if table[6] and self.isInState(6) and self.testCondition(100):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(98) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 1)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[6] and self.isInState(6) and self.testCondition(101):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(99) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 1)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==54: # event "<Shift-ButtonPress-3>"
      if table[6] and self.isInState(6) and self.testCondition(102):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(100) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 2)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==55: # event "<Shift-KeyPress-Delete>"
      if table[6] and self.isInState(6) and self.testCondition(103):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(101) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==56: # event "<serviceLinkDeleteRequest>"
      if table[6] and self.isInState(6) and self.testCondition(104):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(102) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==57: # event "<serviceNodeDeleteRequest>"
      if table[6] and self.isInState(6) and self.testCondition(105):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(103) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==58: # event "Done"
      if table[20] and self.isInState(20) and self.testCondition(106):
        if (scheduler==self or scheduler==None) and table[20]:
          self.runActionCode(104) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(20, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[20], table)
          handled=1
    elif e==59: # event "Edit Properties"
      if table[6] and self.isInState(6) and self.testCondition(107):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(105) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
      if table[4] and self.isInState(4) and self.testCondition(108):
        if (scheduler==self or scheduler==None) and table[4]:
          self.runActionCode(106) # output action(s)
          self.runExitActionsForStates(2)
	  self.clearEnteredStates()
          self.changeState(4, 4)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[4], table)
          handled=1
    elif e==60: # event "GG Select"
      if table[6] and self.isInState(6) and self.testCondition(109):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(6, 18)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==61: # event "Postscript"
      if table[6] and self.isInState(6) and self.testCondition(110):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(107) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(6, 20)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==62: # event "Reboot"
      if table[6] and self.isInState(6) and self.testCondition(111):
        if (scheduler==self or scheduler==None) and table[6]:
          self.runActionCode(108) # output action(s)
          self.runExitActionsForStates(0)
	  self.clearEnteredStates()
          self.changeState(6, 6)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[6], table)
          handled=1
    elif e==63: # event "Reset"
      if table[0] and self.isInState(0) and self.testCondition(112):
        if (scheduler==self or scheduler==None) and table[0]:
          self.runActionCode(109) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(0, 0)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[0], table)
          handled=1
    elif e==64: # event "Start"
      if table[19] and self.isInState(19) and self.testCondition(113):
        if (scheduler==self or scheduler==None) and table[19]:
          self.runActionCode(110) # output action(s)
          self.runExitActionsForStates(-1)
	  self.clearEnteredStates()
          self.changeState(19, 0)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[19], table)
          handled=1
    elif e==65: # event "[Done]"
      if table[8] and self.isInState(8) and self.testCondition(114):
        if (scheduler==self or scheduler==None) and table[8]:
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(8, 11)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[8], table)
          handled=1
      if table[9] and self.isInState(9) and self.testCondition(115):
        if (scheduler==self or scheduler==None) and table[9]:
          self.runExitActionsForStates(7)
	  self.clearEnteredStates()
          self.changeState(9, 10)
          self.runEnterActionsForStates(self.StatesEntered, 1)
          self.applyMask(UI_Statechart_MDL.OrthogonalTable[9], table)
          handled=1
    if cond and self.Parent==None:  # Top-level model
      cond.release()
    if not handled and e>=0 and (scheduler==self or scheduler==None) and UI_Statechart_MDL.RescheduleTable[e]>=0:
      self.addSchedule(UI_Statechart_MDL.RescheduleTable[e], UI_Statechart_MDL.IntervalTable[e], UI_Statechart_MDL.EventNames[e], scheduler)
    return handled

  def forceIntoState(self, s):

    changed=0
    s2=self.state
    while s2!=None:
      HasCommonParent=0
      for i in range(UI_Statechart_MDL.StateNum):
        if self.isParent(i, s2.StateID) and self.isParent(i, s):
          HasCommonParent=1
          if not self.hasOrthogonalStateInBetween(i, s2.StateID):
            self.changeState(s2.StateID, s)
            changed=1
      if not HasCommonParent:
        self.changeState(s2.StateID, s)
        changed=1
      s2=s2.Next
    if not changed:
      self.addInState(s)

  def changeState(self, s1, s2, check_history=0, top_level=0):

    # t1=common(s1, s2)
    t1=UI_Statechart_MDL.CommonStateTable[s1][s2]
    self.recordHistory(t1)
    if t1>=0:
      self.removeOutStates(t1)
    else:
      self.state=None
    # t2=history(s2)
    t2=UI_Statechart_MDL.HistoryStateTable[s2]
    if t2==0: # no history
      self.generateStates(t1, s2)
    elif t2==1: # normal history
      if not check_history:
        self.generateStates(t1, s2)
      elif self.hasHistoryRecorded(s2) and self.Submodels[s2]==None:
        self.generateStates(t1, self.history[s2].States[s2])
      else:
        self.generateStates(t1, s2, 1)
    elif t2==2: # deep history
      if check_history and self.hasHistoryRecorded(s2):
        if self.Submodels[s2]:
          self.recordEnteredState(s2, 1, 1, t1)
          self.addInState(s2)
        else:
          for i in range(UI_Statechart_MDL.StateNum):
            hs=self.history[s2].States[i]
            if hs>=0 and self.isLeafState(hs):
              self.recordEnteredState(hs, 1, 1, t1)
              self.addInState(hs)
      else:
        self.generateStates(t1, s2)

  def addInState(self, s):

    if not self.isInState(s, 1, 0):
      st=State()
      st.StateID=s
      st.Next=self.state
      self.state=st
      return 1
    else:
      return 0

  def generateStates(self, common, dest, history_type=0):

    if common==-1:
      if dest==0:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(6):
              self.recordEnteredState(6)
              self.addInState(6)  # move into leaf state "Active Event Loop.Main"
      elif dest==1:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(1):
              self.recordEnteredState(1)
              self.addInState(1)  # move into leaf state "Active Event Loop.Add To Selection"
      elif dest==2:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(2):
              self.recordEnteredState(2)
              if history_type!=2 or self.check_history(4):
                self.recordEnteredState(4)
                self.addInState(4)  # move into leaf state "Active Event Loop.Arrow Editor.Default"
      elif dest==3:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(2):
              self.recordEnteredState(2)
              if history_type!=2 or self.check_history(3):
                self.recordEnteredState(3)
                self.addInState(3)  # move into leaf state "Active Event Loop.Arrow Editor.Active Point"
      elif dest==4:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(2):
              self.recordEnteredState(2)
              if history_type!=2 or self.check_history(4):
                self.recordEnteredState(4)
                self.addInState(4)  # move into leaf state "Active Event Loop.Arrow Editor.Default"
      elif dest==5:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(5):
              self.recordEnteredState(5)
              self.addInState(5)  # move into leaf state "Active Event Loop.Drag Nodes"
      elif dest==6:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(6):
              self.recordEnteredState(6)
              self.addInState(6)  # move into leaf state "Active Event Loop.Main"
      elif dest==7:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(7):
              self.recordEnteredState(7)
              if history_type!=2 or self.check_history(11):
                self.recordEnteredState(11)
                self.addInState(11)  # move into leaf state "Active Event Loop.New Arrow.Snap Points"
      elif dest==8:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(7):
              self.recordEnteredState(7)
              if history_type!=2 or self.check_history(8):
                self.recordEnteredState(8)
                self.addInState(8)  # move into leaf state "Active Event Loop.New Arrow.Drop Point"
      elif dest==9:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(7):
              self.recordEnteredState(7)
              if history_type!=2 or self.check_history(9):
                self.recordEnteredState(9)
                self.addInState(9)  # move into leaf state "Active Event Loop.New Arrow.Drop Point2"
      elif dest==10:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(7):
              self.recordEnteredState(7)
              if history_type!=2 or self.check_history(10):
                self.recordEnteredState(10)
                self.addInState(10)  # move into leaf state "Active Event Loop.New Arrow.No Snap"
      elif dest==11:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(7):
              self.recordEnteredState(7)
              if history_type!=2 or self.check_history(11):
                self.recordEnteredState(11)
                self.addInState(11)  # move into leaf state "Active Event Loop.New Arrow.Snap Points"
      elif dest==12:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(12):
              self.recordEnteredState(12)
              self.addInState(12)  # move into leaf state "Active Event Loop.New Selection"
      elif dest==13:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(13):
              self.recordEnteredState(13)
              self.addInState(13)  # move into leaf state "Active Event Loop.Remove From Selection"
      elif dest==14:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(0):
            self.recordEnteredState(0)
            if history_type!=2 or self.check_history(14):
              self.recordEnteredState(14)
              self.addInState(14)  # move into leaf state "Active Event Loop.Scale Entity"
      elif dest==15:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(15):
            self.recordEnteredState(15)
            self.addInState(15)  # move into leaf state "Bounding Box Edit"
      elif dest==16:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(16):
            self.recordEnteredState(16)
            self.addInState(16)  # move into leaf state "Drag Label"
      elif dest==17:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(17):
            self.recordEnteredState(17)
            self.addInState(17)  # move into leaf state "Exit"
      elif dest==18:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(18):
            self.recordEnteredState(18)
            self.addInState(18)  # move into leaf state "GG Graph Select"
      elif dest==19:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(19):
            self.recordEnteredState(19)
            self.addInState(19)  # move into leaf state "Initial"
      elif dest==20:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(20):
            self.recordEnteredState(20)
            self.addInState(20)  # move into leaf state "Postscript"
      elif dest==21:
        if history_type!=2 or self.check_history(-1):
          if history_type!=2 or self.check_history(21):
            self.recordEnteredState(21)
            self.addInState(21)  # move into leaf state "Scale Text"
    elif common==0:
      if dest==0:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(6):
            self.recordEnteredState(6)
            self.addInState(6)  # move into leaf state "Active Event Loop.Main"
      elif dest==1:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(1):
            self.recordEnteredState(1)
            self.addInState(1)  # move into leaf state "Active Event Loop.Add To Selection"
      elif dest==2:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(2):
            self.recordEnteredState(2)
            if history_type!=2 or self.check_history(4):
              self.recordEnteredState(4)
              self.addInState(4)  # move into leaf state "Active Event Loop.Arrow Editor.Default"
      elif dest==3:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(2):
            self.recordEnteredState(2)
            if history_type!=2 or self.check_history(3):
              self.recordEnteredState(3)
              self.addInState(3)  # move into leaf state "Active Event Loop.Arrow Editor.Active Point"
      elif dest==4:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(2):
            self.recordEnteredState(2)
            if history_type!=2 or self.check_history(4):
              self.recordEnteredState(4)
              self.addInState(4)  # move into leaf state "Active Event Loop.Arrow Editor.Default"
      elif dest==5:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(5):
            self.recordEnteredState(5)
            self.addInState(5)  # move into leaf state "Active Event Loop.Drag Nodes"
      elif dest==6:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(6):
            self.recordEnteredState(6)
            self.addInState(6)  # move into leaf state "Active Event Loop.Main"
      elif dest==7:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(7):
            self.recordEnteredState(7)
            if history_type!=2 or self.check_history(11):
              self.recordEnteredState(11)
              self.addInState(11)  # move into leaf state "Active Event Loop.New Arrow.Snap Points"
      elif dest==8:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(7):
            self.recordEnteredState(7)
            if history_type!=2 or self.check_history(8):
              self.recordEnteredState(8)
              self.addInState(8)  # move into leaf state "Active Event Loop.New Arrow.Drop Point"
      elif dest==9:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(7):
            self.recordEnteredState(7)
            if history_type!=2 or self.check_history(9):
              self.recordEnteredState(9)
              self.addInState(9)  # move into leaf state "Active Event Loop.New Arrow.Drop Point2"
      elif dest==10:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(7):
            self.recordEnteredState(7)
            if history_type!=2 or self.check_history(10):
              self.recordEnteredState(10)
              self.addInState(10)  # move into leaf state "Active Event Loop.New Arrow.No Snap"
      elif dest==11:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(7):
            self.recordEnteredState(7)
            if history_type!=2 or self.check_history(11):
              self.recordEnteredState(11)
              self.addInState(11)  # move into leaf state "Active Event Loop.New Arrow.Snap Points"
      elif dest==12:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(12):
            self.recordEnteredState(12)
            self.addInState(12)  # move into leaf state "Active Event Loop.New Selection"
      elif dest==13:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(13):
            self.recordEnteredState(13)
            self.addInState(13)  # move into leaf state "Active Event Loop.Remove From Selection"
      elif dest==14:
        if history_type!=2 or self.check_history(0):
          if history_type!=2 or self.check_history(14):
            self.recordEnteredState(14)
            self.addInState(14)  # move into leaf state "Active Event Loop.Scale Entity"
    elif common==1:
      if dest==1:
        if history_type!=2 or self.check_history(1):
          self.addInState(1)  # move into leaf state "Active Event Loop.Add To Selection"
    elif common==2:
      if dest==2:
        if history_type!=2 or self.check_history(2):
          if history_type!=2 or self.check_history(4):
            self.recordEnteredState(4)
            self.addInState(4)  # move into leaf state "Active Event Loop.Arrow Editor.Default"
      elif dest==3:
        if history_type!=2 or self.check_history(2):
          if history_type!=2 or self.check_history(3):
            self.recordEnteredState(3)
            self.addInState(3)  # move into leaf state "Active Event Loop.Arrow Editor.Active Point"
      elif dest==4:
        if history_type!=2 or self.check_history(2):
          if history_type!=2 or self.check_history(4):
            self.recordEnteredState(4)
            self.addInState(4)  # move into leaf state "Active Event Loop.Arrow Editor.Default"
    elif common==3:
      if dest==3:
        if history_type!=2 or self.check_history(3):
          self.addInState(3)  # move into leaf state "Active Event Loop.Arrow Editor.Active Point"
    elif common==4:
      if dest==4:
        if history_type!=2 or self.check_history(4):
          self.addInState(4)  # move into leaf state "Active Event Loop.Arrow Editor.Default"
    elif common==5:
      if dest==5:
        if history_type!=2 or self.check_history(5):
          self.addInState(5)  # move into leaf state "Active Event Loop.Drag Nodes"
    elif common==6:
      if dest==6:
        if history_type!=2 or self.check_history(6):
          self.addInState(6)  # move into leaf state "Active Event Loop.Main"
    elif common==7:
      if dest==7:
        if history_type!=2 or self.check_history(7):
          if history_type!=2 or self.check_history(11):
            self.recordEnteredState(11)
            self.addInState(11)  # move into leaf state "Active Event Loop.New Arrow.Snap Points"
      elif dest==8:
        if history_type!=2 or self.check_history(7):
          if history_type!=2 or self.check_history(8):
            self.recordEnteredState(8)
            self.addInState(8)  # move into leaf state "Active Event Loop.New Arrow.Drop Point"
      elif dest==9:
        if history_type!=2 or self.check_history(7):
          if history_type!=2 or self.check_history(9):
            self.recordEnteredState(9)
            self.addInState(9)  # move into leaf state "Active Event Loop.New Arrow.Drop Point2"
      elif dest==10:
        if history_type!=2 or self.check_history(7):
          if history_type!=2 or self.check_history(10):
            self.recordEnteredState(10)
            self.addInState(10)  # move into leaf state "Active Event Loop.New Arrow.No Snap"
      elif dest==11:
        if history_type!=2 or self.check_history(7):
          if history_type!=2 or self.check_history(11):
            self.recordEnteredState(11)
            self.addInState(11)  # move into leaf state "Active Event Loop.New Arrow.Snap Points"
    elif common==8:
      if dest==8:
        if history_type!=2 or self.check_history(8):
          self.addInState(8)  # move into leaf state "Active Event Loop.New Arrow.Drop Point"
    elif common==9:
      if dest==9:
        if history_type!=2 or self.check_history(9):
          self.addInState(9)  # move into leaf state "Active Event Loop.New Arrow.Drop Point2"
    elif common==10:
      if dest==10:
        if history_type!=2 or self.check_history(10):
          self.addInState(10)  # move into leaf state "Active Event Loop.New Arrow.No Snap"
    elif common==11:
      if dest==11:
        if history_type!=2 or self.check_history(11):
          self.addInState(11)  # move into leaf state "Active Event Loop.New Arrow.Snap Points"
    elif common==12:
      if dest==12:
        if history_type!=2 or self.check_history(12):
          self.addInState(12)  # move into leaf state "Active Event Loop.New Selection"
    elif common==13:
      if dest==13:
        if history_type!=2 or self.check_history(13):
          self.addInState(13)  # move into leaf state "Active Event Loop.Remove From Selection"
    elif common==14:
      if dest==14:
        if history_type!=2 or self.check_history(14):
          self.addInState(14)  # move into leaf state "Active Event Loop.Scale Entity"
    elif common==15:
      if dest==15:
        if history_type!=2 or self.check_history(15):
          self.addInState(15)  # move into leaf state "Bounding Box Edit"
    elif common==16:
      if dest==16:
        if history_type!=2 or self.check_history(16):
          self.addInState(16)  # move into leaf state "Drag Label"
    elif common==17:
      if dest==17:
        if history_type!=2 or self.check_history(17):
          self.addInState(17)  # move into leaf state "Exit"
    elif common==18:
      if dest==18:
        if history_type!=2 or self.check_history(18):
          self.addInState(18)  # move into leaf state "GG Graph Select"
    elif common==19:
      if dest==19:
        if history_type!=2 or self.check_history(19):
          self.addInState(19)  # move into leaf state "Initial"
    elif common==20:
      if dest==20:
        if history_type!=2 or self.check_history(20):
          self.addInState(20)  # move into leaf state "Postscript"
    elif common==21:
      if dest==21:
        if history_type!=2 or self.check_history(21):
          self.addInState(21)  # move into leaf state "Scale Text"

  def removeOutStates(self, common_state):

    s=self.state
    prev=None
    while s!=None:
      if self.isParent(common_state, s.StateID):
        if prev==None:
          self.state=self.state.Next
        else:
          prev.Next=s.Next
      else:
        prev=s
      s=s.Next

  def eventStr2Int(self, event):

    for i in range(66):
      if event==UI_Statechart_MDL.EventNames[i]:
        return i
    return -1

  def stateInt2Str(self, state):

    if state==-1:
      return ""
    else:
      return UI_Statechart_MDL.StateNames[state]

  def getCurrentStateList(self):

    sl=StringList()
    slend=sl
    s=self.state
    while s!=None:
      sm=self.Submodels[s.StateID]
      curstate=self.stateInt2Str(s.StateID)
      if sm!=None:
        slend.Next=sm.getCurrentStateList()
        while slend.Next!=None:
          slend.Next.str=curstate+"."+slend.Next.str
          slend=slend.Next
      else:
        slend.Next=StringList(curstate)
        slend=slend.Next
      s=s.Next
    return sl.Next

  def getCurrentState(self, states=None):

    if states==None:
      states=self.getCurrentStateList()
      if states!=None:
        states=states.sort()
        strst="['%s'%s]" % (states.str, self.getCurrentState(states))
      else:
        strst="[]"
    else:
      if states.Next:
        strst=", '%s'%s" % (states.Next.str, self.getCurrentState(states.Next))
      else:
        strst=""
    return strst

  def getParentState(self, state):

    return UI_Statechart_MDL.ParentTable[state]

  def getSubstates(self, state):

    substates=None
    if state==-1: # substates of ""
      # add substate "Active Event Loop"
      st=IntList()
      st.int=0
      st.Next=substates
      substates=st
      # add substate "Bounding Box Edit"
      st=IntList()
      st.int=15
      st.Next=substates
      substates=st
      # add substate "Drag Label"
      st=IntList()
      st.int=16
      st.Next=substates
      substates=st
      # add substate "Exit"
      st=IntList()
      st.int=17
      st.Next=substates
      substates=st
      # add substate "GG Graph Select"
      st=IntList()
      st.int=18
      st.Next=substates
      substates=st
      # add substate "Initial"
      st=IntList()
      st.int=19
      st.Next=substates
      substates=st
      # add substate "Postscript"
      st=IntList()
      st.int=20
      st.Next=substates
      substates=st
      # add substate "Scale Text"
      st=IntList()
      st.int=21
      st.Next=substates
      substates=st
    elif state==0: # substates of "Active Event Loop"
      # add substate "Active Event Loop.Add To Selection"
      st=IntList()
      st.int=1
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.Arrow Editor"
      st=IntList()
      st.int=2
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.Drag Nodes"
      st=IntList()
      st.int=5
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.Main"
      st=IntList()
      st.int=6
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.New Arrow"
      st=IntList()
      st.int=7
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.New Selection"
      st=IntList()
      st.int=12
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.Remove From Selection"
      st=IntList()
      st.int=13
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.Scale Entity"
      st=IntList()
      st.int=14
      st.Next=substates
      substates=st
    elif state==1: # substates of "Active Event Loop.Add To Selection"
      pass
    elif state==2: # substates of "Active Event Loop.Arrow Editor"
      # add substate "Active Event Loop.Arrow Editor.Active Point"
      st=IntList()
      st.int=3
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.Arrow Editor.Default"
      st=IntList()
      st.int=4
      st.Next=substates
      substates=st
    elif state==3: # substates of "Active Event Loop.Arrow Editor.Active Point"
      pass
    elif state==4: # substates of "Active Event Loop.Arrow Editor.Default"
      pass
    elif state==5: # substates of "Active Event Loop.Drag Nodes"
      pass
    elif state==6: # substates of "Active Event Loop.Main"
      pass
    elif state==7: # substates of "Active Event Loop.New Arrow"
      # add substate "Active Event Loop.New Arrow.Drop Point"
      st=IntList()
      st.int=8
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.New Arrow.Drop Point2"
      st=IntList()
      st.int=9
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.New Arrow.No Snap"
      st=IntList()
      st.int=10
      st.Next=substates
      substates=st
      # add substate "Active Event Loop.New Arrow.Snap Points"
      st=IntList()
      st.int=11
      st.Next=substates
      substates=st
    elif state==8: # substates of "Active Event Loop.New Arrow.Drop Point"
      pass
    elif state==9: # substates of "Active Event Loop.New Arrow.Drop Point2"
      pass
    elif state==10: # substates of "Active Event Loop.New Arrow.No Snap"
      pass
    elif state==11: # substates of "Active Event Loop.New Arrow.Snap Points"
      pass
    elif state==12: # substates of "Active Event Loop.New Selection"
      pass
    elif state==13: # substates of "Active Event Loop.Remove From Selection"
      pass
    elif state==14: # substates of "Active Event Loop.Scale Entity"
      pass
    elif state==15: # substates of "Bounding Box Edit"
      pass
    elif state==16: # substates of "Drag Label"
      pass
    elif state==17: # substates of "Exit"
      pass
    elif state==18: # substates of "GG Graph Select"
      pass
    elif state==19: # substates of "Initial"
      pass
    elif state==20: # substates of "Postscript"
      pass
    elif state==21: # substates of "Scale Text"
      pass
    return substates

  def isHistoryState(self, state):

    return UI_Statechart_MDL.HistoryStateTable[state]>0

  def isLeafState(self, state):

    if isinstance(state, int):
      return UI_Statechart_MDL.LeafStateTable[state]!=None

    elif isinstance(state, str):
      for i in range(UI_Statechart_MDL.StateNum):
        if UI_Statechart_MDL.LeafStateTable[i]==None:
          continue
        if state==UI_Statechart_MDL.LeafStateTable[i] and self.Submodels[i]==None:
          return 1
        elif startsWith(state, UI_Statechart_MDL.LeafStateTable[i]+".") and self.Submodels[i]!=None:
          SubmodelState=state[UI_Statechart_MDL.LeafStateTable[i].length()+1:]
          return self.Submodels[i].isLeafState(SubmodelState)
    return 0

  def isHistoryUp2Date(self, state, time):

    for i in range(UI_Statechart_MDL.StateNum):
      if self.history[state].Times[i]>=time:
        return 1
    return 0

  def mergeHistory(self, state, states, times):

    max=-1
    for i in range(UI_Statechart_MDL.StateNum):
      if times[i]>max:
        max=times[i]
    if self.isHistoryUp2Date(state, max):
      for i in range(UI_Statechart_MDL.StateNum):
        if times[i]>self.history[state].Times[i]:
          self.history[state].States[i]=states[i]
          self.history[state].Times[i]=times[i]
    else:
      self.history[state].States=copy.copy(states)
      self.history[state].Times=copy.copy(times)

  def recordHistory(self, top_state):

    curtime=self.HistoryCount
    self.HistoryCount=self.HistoryCount+1
    s=self.state
    while s!=None:
      child=s.StateID
      states=[]
      times=[]
      for i in range(UI_Statechart_MDL.StateNum):
        states.append(-1)
        times.append(-1)
      states[child]=child
      times[child]=curtime
      if top_state<0 or self.isParent(top_state, child):
        parent=self.getParentState(child)
        if self.isHistoryState(child):
          self.history[child].Submodel=self.Submodels[child]
        while parent>=0 and times[parent]!=curtime:
          states[parent]=child
          times[parent]=curtime
          if self.isHistoryState(parent):
            self.mergeHistory(parent, states, times)
          if parent==top_state:
            break
          child=parent
          parent=self.getParentState(child)
      s=s.Next

  def hasHistoryRecorded(self, state):

    for i in range(UI_Statechart_MDL.StateNum):
      if self.history[state].States[i]!=-1:
        return 1
      if self.Submodels[state]!=None:
        return 1
    return 0

  def hasOrthogonalStateInBetween(self, parent, leaf):

    return UI_Statechart_MDL.OrthogonalInBetween[parent+1][leaf]

  def check_history(self, dest):

    s=self.state
    while s!=None:
      if self.isParent(dest, s.StateID) and not self.hasOrthogonalStateInBetween(dest, s.StateID):
        return 0
      s=s.Next
    return 1

  def getEnabledEvents(self):

    events=EventList()
    if self.isInState(6):
      events.Append("<Alt-ButtonPress-1>")
    if self.isInState(6):
      events.Append("<Alt-ButtonPress-1>")
    if self.isInState(6):
      events.Append("<Alt-KeyPress-c>")
    if self.isInState(6):
      events.Append("<Alt-KeyPress-s>")
    if self.isInState(6):
      events.Append("<Alt-KeyPress-v>")
    if self.isInState(0):
      events.Append("<Alt-x>")
    if self.isInState(13):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(1):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(12):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(5):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(14):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(16):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(21):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(18):
      events.Append("<Any-ButtonRelease-1>")
    if self.isInState(6):
      events.Append("<Any-Motion>")
    if self.isInState(5):
      events.Append("<Any-Motion>")
    if self.isInState(13):
      events.Append("<Any-Motion>")
    if self.isInState(12):
      events.Append("<Any-Motion>")
    if self.isInState(1):
      events.Append("<Any-Motion>")
    if self.isInState(14):
      events.Append("<Any-Motion>")
    if self.isInState(3):
      events.Append("<Any-Motion>")
    if self.isInState(11):
      events.Append("<Any-Motion>")
    if self.isInState(10):
      events.Append("<Any-Motion>")
    if self.isInState(15):
      events.Append("<Any-Motion>")
    if self.isInState(16):
      events.Append("<Any-Motion>")
    if self.isInState(21):
      events.Append("<Any-Motion>")
    if self.isInState(7):
      events.Append("<Arrow Created>")
    if self.isInState(6):
      events.Append("<ButtonPress-1>")
    if self.isInState(6):
      events.Append("<ButtonPress-1>")
    if self.isInState(6):
      events.Append("<ButtonPress-1>")
    if self.isInState(4):
      events.Append("<ButtonPress-1>")
    if self.isInState(4):
      events.Append("<ButtonPress-1>")
    if self.isInState(20):
      events.Append("<ButtonPress-1>")
    if self.isInState(6):
      events.Append("<ButtonPress-1>")
    if self.isInState(11):
      events.Append("<ButtonPress-1>")
    if self.isInState(10):
      events.Append("<ButtonPress-1>")
    if self.isInState(6):
      events.Append("<ButtonPress-3>")
    if self.isInState(3):
      events.Append("<ButtonPress-3>")
    if self.isInState(4):
      events.Append("<ButtonPress-3>")
    if self.isInState(11):
      events.Append("<ButtonPress-3>")
    if self.isInState(10):
      events.Append("<ButtonPress-3>")
    if self.isInState(20):
      events.Append("<ButtonPress-3>")
    if self.isInState(15):
      events.Append("<ButtonPress-3>")
    if self.isInState(21):
      events.Append("<ButtonPress-3>")
    if self.isInState(14):
      events.Append("<ButtonPress-3>")
    if self.isInState(6):
      events.Append("<Control-ButtonPress-1>")
    if self.isInState(6):
      events.Append("<Control-ButtonPress-3>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-Delete>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-a>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-c>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-d>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-f>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-o>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-s>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-v>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-x>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-y>")
    if self.isInState(6):
      events.Append("<Control-KeyPress-z>")
    if self.isInState(6):
      events.Append("<Double-ButtonPress-1>")
    if self.isInState(6):
      events.Append("<KeyPress-Delete>")
    if self.isInState(3):
      events.Append("<KeyPress-Delete>")
    if self.isInState(6):
      events.Append("<KeyPress-Down>")
    if self.isInState(3):
      events.Append("<KeyPress-Down>")
    if self.isInState(6):
      events.Append("<KeyPress-F10>")
    if self.isInState(6):
      events.Append("<KeyPress-F11>")
    if self.isInState(6):
      events.Append("<KeyPress-F12>")
    if self.isInState(6):
      events.Append("<KeyPress-F1>")
    if self.isInState(6):
      events.Append("<KeyPress-F2>")
    if self.isInState(6):
      events.Append("<KeyPress-F3>")
    if self.isInState(6):
      events.Append("<KeyPress-F4>")
    if self.isInState(6):
      events.Append("<KeyPress-F5>")
    if self.isInState(6):
      events.Append("<KeyPress-F6>")
    if self.isInState(6):
      events.Append("<KeyPress-F7>")
    if self.isInState(6):
      events.Append("<KeyPress-F8>")
    if self.isInState(6):
      events.Append("<KeyPress-F9>")
    if self.isInState(4):
      events.Append("<KeyPress-Insert>")
    if self.isInState(6):
      events.Append("<KeyPress-Left>")
    if self.isInState(3):
      events.Append("<KeyPress-Left>")
    if self.isInState(3):
      events.Append("<KeyPress-Return>")
    if self.isInState(6):
      events.Append("<KeyPress-Right>")
    if self.isInState(3):
      events.Append("<KeyPress-Right>")
    if self.isInState(6):
      events.Append("<KeyPress-Up>")
    if self.isInState(3):
      events.Append("<KeyPress-Up>")
    if self.isInState(6):
      events.Append("<KeyPress-d>")
    if self.isInState(6):
      events.Append("<KeyPress-e>")
    if self.isInState(6):
      events.Append("<KeyPress-f>")
    if self.isInState(6):
      events.Append("<KeyPress-l>")
    if self.isInState(6):
      events.Append("<KeyPress-m>")
    if self.isInState(6):
      events.Append("<KeyPress-m>")
    if self.isInState(6):
      events.Append("<KeyPress-r>")
    if self.isInState(6):
      events.Append("<KeyPress-r>")
    if self.isInState(6):
      events.Append("<KeyPress-s>")
    if self.isInState(4):
      events.Append("<KeyPress-s>")
    if self.isInState(4):
      events.Append("<KeyPress-space>")
    if self.isInState(3):
      events.Append("<KeyPress-space>")
    if self.isInState(11):
      events.Append("<KeyPress-space>")
    if self.isInState(10):
      events.Append("<KeyPress-space>")
    if self.isInState(6):
      events.Append("<KeyPress-space>")
    if self.isInState(6):
      events.Append("<KeyPress-t>")
    if self.isInState(6):
      events.Append("<KeyPress-z>")
    if self.isInState(6):
      events.Append("<Shift-ButtonPress-1>")
    if self.isInState(6):
      events.Append("<Shift-ButtonPress-1>")
    if self.isInState(6):
      events.Append("<Shift-ButtonPress-3>")
    if self.isInState(6):
      events.Append("<Shift-KeyPress-Delete>")
    if self.isInState(6):
      events.Append("<serviceLinkDeleteRequest>")
    if self.isInState(6):
      events.Append("<serviceNodeDeleteRequest>")
    if self.isInState(20):
      events.Append("Done")
    if self.isInState(6):
      events.Append("Edit Properties")
    if self.isInState(4):
      events.Append("Edit Properties")
    if self.isInState(6):
      events.Append("GG Select")
    if self.isInState(6):
      events.Append("Postscript")
    if self.isInState(6):
      events.Append("Reboot")
    if self.isInState(0):
      events.Append("Reset")
    if self.isInState(19):
      events.Append("Start")
    if self.isInState(8):
      events.Append("[Done]")
    if self.isInState(9):
      events.Append("[Done]")
    return events.Next

  def getHierarchy(self, start_level, state_prefix):

    h=Hierarchy()
    lasth=h
    # Generate state "Active Event Loop" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Active Event Loop"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop"
    lasth.Next.StateNum=0
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    # Generate state "Active Event Loop.Add To Selection" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Add To Selection"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Add To Selection"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Add To Selection"
    lasth.Next.StateNum=1
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Active Event Loop.Arrow Editor" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Arrow Editor"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Arrow Editor"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Arrow Editor"
    lasth.Next.StateNum=2
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Active Event Loop.Arrow Editor.Active Point" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Active Point"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Arrow Editor.Active Point"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Arrow Editor.Active Point"
    lasth.Next.StateNum=3
    lasth.Next.Level=start_level+2
    lasth=lasth.Next
    # Generate state "Active Event Loop.Arrow Editor.Default" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Default"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Arrow Editor.Default"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Arrow Editor.Default"
    lasth.Next.StateNum=4
    lasth.Next.Level=start_level+2
    lasth=lasth.Next
    # Generate state "Active Event Loop.Drag Nodes" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Drag Nodes"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Drag Nodes"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Drag Nodes"
    lasth.Next.StateNum=5
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Active Event Loop.Main" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Main"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Main"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Main"
    lasth.Next.StateNum=6
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Active Event Loop.New Arrow" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="New Arrow"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.New Arrow"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.New Arrow"
    lasth.Next.StateNum=7
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Active Event Loop.New Arrow.Drop Point" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Drop Point"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.New Arrow.Drop Point"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.New Arrow.Drop Point"
    lasth.Next.StateNum=8
    lasth.Next.Level=start_level+2
    lasth=lasth.Next
    # Generate state "Active Event Loop.New Arrow.Drop Point2" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Drop Point2"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.New Arrow.Drop Point2"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.New Arrow.Drop Point2"
    lasth.Next.StateNum=9
    lasth.Next.Level=start_level+2
    lasth=lasth.Next
    # Generate state "Active Event Loop.New Arrow.No Snap" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="No Snap"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.New Arrow.No Snap"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.New Arrow.No Snap"
    lasth.Next.StateNum=10
    lasth.Next.Level=start_level+2
    lasth=lasth.Next
    # Generate state "Active Event Loop.New Arrow.Snap Points" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Snap Points"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.New Arrow.Snap Points"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.New Arrow.Snap Points"
    lasth.Next.StateNum=11
    lasth.Next.Level=start_level+2
    lasth=lasth.Next
    # Generate state "Active Event Loop.New Selection" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="New Selection"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.New Selection"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.New Selection"
    lasth.Next.StateNum=12
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Active Event Loop.Remove From Selection" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Remove From Selection"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Remove From Selection"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Remove From Selection"
    lasth.Next.StateNum=13
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Active Event Loop.Scale Entity" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Scale Entity"
    if state_prefix==None:
      lasth.Next.PathName="Active Event Loop.Scale Entity"
    else:
      lasth.Next.PathName=state_prefix+".Active Event Loop.Scale Entity"
    lasth.Next.StateNum=14
    lasth.Next.Level=start_level+1
    lasth=lasth.Next
    # Generate state "Bounding Box Edit" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Bounding Box Edit"
    if state_prefix==None:
      lasth.Next.PathName="Bounding Box Edit"
    else:
      lasth.Next.PathName=state_prefix+".Bounding Box Edit"
    lasth.Next.StateNum=15
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    # Generate state "Drag Label" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Drag Label"
    if state_prefix==None:
      lasth.Next.PathName="Drag Label"
    else:
      lasth.Next.PathName=state_prefix+".Drag Label"
    lasth.Next.StateNum=16
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    # Generate state "Exit" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Exit"
    if state_prefix==None:
      lasth.Next.PathName="Exit"
    else:
      lasth.Next.PathName=state_prefix+".Exit"
    lasth.Next.StateNum=17
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    # Generate state "GG Graph Select" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="GG Graph Select"
    if state_prefix==None:
      lasth.Next.PathName="GG Graph Select"
    else:
      lasth.Next.PathName=state_prefix+".GG Graph Select"
    lasth.Next.StateNum=18
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    # Generate state "Initial" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Initial"
    if state_prefix==None:
      lasth.Next.PathName="Initial"
    else:
      lasth.Next.PathName=state_prefix+".Initial"
    lasth.Next.StateNum=19
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    # Generate state "Postscript" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Postscript"
    if state_prefix==None:
      lasth.Next.PathName="Postscript"
    else:
      lasth.Next.PathName=state_prefix+".Postscript"
    lasth.Next.StateNum=20
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    # Generate state "Scale Text" in the hierarchy table
    lasth.Next=Hierarchy()
    lasth.Next.StateName="Scale Text"
    if state_prefix==None:
      lasth.Next.PathName="Scale Text"
    else:
      lasth.Next.PathName=state_prefix+".Scale Text"
    lasth.Next.StateNum=21
    lasth.Next.Level=start_level+0
    lasth=lasth.Next
    return h.Next

  def topLevelHistory(self):

    s=self.state.StateID
    t=self.getParentState(s)
    while t!=-1:
      s=t
      t=self.getParentState(s)
    self.changeState(s, s)

  def runActionCode(self, code_num):

    if code_num==0: # model finalizer
      pass
    elif code_num==1: # model initializer
      pass
    elif code_num==2: # output action(s) of a transition
      self.runCode("event=eventhandler.get_event_params()")
      self.runCode("cb.clearSelectionTuple()")
      self.runCode("startNewSelectionBox(atom3i, event, \"red\")")
      self.runCode("setCursor( atom3i.parent, \'Selection\' )")
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==3: # output action(s) of a transition
      self.runCode("event=eventhandler.get_event_params()")
      self.runCode("startNewSelectionBox(atom3i, event, \"red\")")
      self.runCode("cb.appendSelectionTuple( cb.getItemUnderCursor( atom3i, event)[0]  )")
      self.runCode("setCursor( atom3i.parent, \'Selection\' )")
    elif code_num==4: # output action(s) of a transition
      self.runCode("copyObjectAttributes( atom3i, eventhandler.get_event_params() )")
    elif code_num==5: # output action(s) of a transition
      self.runCode("atom3i.save(0)")
    elif code_num==6: # output action(s) of a transition
      self.runCode("pasteObjectAttributes( atom3i, eventhandler.get_event_params() )")
    elif code_num==7: # output action(s) of a transition
      self.runCode("cb.deleteFromSelectionDict( getFinalSelectionBoxItems( atom3i ) )")
      self.runCode("cb.highlighter(1)")
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==8: # output action(s) of a transition
      self.runCode("cb.updateSelectionDict( getFinalSelectionBoxItems( atom3i )  )")
      self.runCode("cb.highlighter(1)")
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==9: # output action(s) of a transition
      self.runCode("cb.updateSelectionDict( getFinalSelectionBoxItems( atom3i )  )")
      self.runCode("cb.highlighter(1)")
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==10: # output action(s) of a transition
      self.runCode("dragFinish( atom3i, eventhandler.get_event_params() )")
      self.runCode("setDefaultCursor( atom3i.parent )")
      self.runCode("if(not wasDragged): cb.clearSelectionTuple()")
      self.runCode("if(not wasDragged): cb.highlighter( 0 )")
      self.runCode("if(not wasDragged): cb.clearSelectionDict()")
      self.runCode("if(wasDragged): cb.highlighter( 1 )")
    elif code_num==11: # output action(s) of a transition
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==12: # output action(s) of a transition
      self.runCode("setDefaultCursor( atom3i.parent )")
      self.runCode("modelChange( atom3i )")
    elif code_num==13: # output action(s) of a transition
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==14: # output action(s) of a transition
      self.runCode("savePosition = cb.getCanvasCoords( eventhandler.get_event_params()  )")
    elif code_num==15: # output action(s) of a transition
      self.runCode("dragInMotion(atom3i,eventhandler.get_event_params() )")
      self.runCode("wasDragged = True")
    elif code_num==16: # output action(s) of a transition
      self.runCode("selectionBoxDragging(atom3i, eventhandler.get_event_params())")
    elif code_num==17: # output action(s) of a transition
      self.runCode("selectionBoxDragging(atom3i,eventhandler.get_event_params())")
    elif code_num==18: # output action(s) of a transition
      self.runCode("selectionBoxDragging(atom3i, eventhandler.get_event_params())")
    elif code_num==19: # output action(s) of a transition
      self.runCode("scaleWithMotion( atom3i, eventhandler.get_event_params() )")
    elif code_num==20: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.setInMotion(  eventhandler.get_event_params()   )")
    elif code_num==21: # output action(s) of a transition
      self.runCode("realtimeArrowMotion( atom3i, eventhandler.get_event_params() )")
    elif code_num==22: # output action(s) of a transition
      self.runCode("realtimeArrowMotion( atom3i, eventhandler.get_event_params(), snap=False )")
    elif code_num==23: # output action(s) of a transition
      self.runCode("atom3i.postscriptBox.inMotion( cb.getCanvasCoords( eventhandler.get_event_params() ) )")
    elif code_num==24: # output action(s) of a transition
      self.runCode("dragLabelsInMotion(atom3i,eventhandler.get_event_params() )")
    elif code_num==25: # output action(s) of a transition
      self.runCode("scaleWithMotion( atom3i, eventhandler.get_event_params(), textMode=True )")
    elif code_num==26: # output action(s) of a transition
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==27: # output action(s) of a transition
      self.runCode("cb.clearSelectionTuple()")
      self.runCode("startNewSelectionBox(atom3i, eventhandler.get_event_params(), \"yellow\")")
      self.runCode("cb.highlighter( 0 )")
      self.runCode("cb.clearSelectionDict()")
      self.runCode("setCursor( atom3i.parent, \'Selection\' )")
    elif code_num==28: # output action(s) of a transition
      self.runCode("event = eventhandler.get_event_params()")
      self.runCode("cb.clearSelectionTuple()")
      self.runCode("cb.appendSelectionTuple( cb.getItemUnderCursor( atom3i, event)[0]  )")
      self.runCode("cb.highlighter(0)")
      self.runCode("cb.clearSelectionDict()")
      self.runCode("startNewSelectionBox(atom3i,event , \"yellow\")")
      self.runCode("setCursor( atom3i.parent, \'Selection\' )")
    elif code_num==29: # output action(s) of a transition
      self.runCode("cb.buildSelectionObjectSet()")
      self.runCode("dragStart( atom3i )")
      self.runCode("setCursor( atom3i.parent, \'Drag\' )")
      self.runCode("wasDragged = False")
    elif code_num==30: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.removeOldEditorArrow()")
      self.runCode("setDefaultCursor( atom3i.parent )")
      self.runCode("modelChange( atom3i )")
    elif code_num==31: # output action(s) of a transition
      self.runCode("setCursor(atom3i.parent, \'Arrow Editor Active\')")
    elif code_num==32: # output action(s) of a transition
      self.runCode("setCursor( atom3i.parent, \'Sizing\' )")
    elif code_num==33: # output action(s) of a transition
      self.runCode("cb.buildSelectionObjectSet()")
      self.runCode("cb.getCanvasCoords( eventhandler.get_event_params() )")
      self.runCode("setCursor( atom3i.parent, \'Drag Label Motion\' )")
    elif code_num==34: # output action(s) of a transition
      self.runCode("createDynamicMenu( atom3i, eventhandler.get_event_params() )")
    elif code_num==35: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.clearActiveControlPoint()")
      self.runCode("setCursor( atom3i.parent, \'Arrow Editor Idle\' )")
    elif code_num==36: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.ArrowEditorPopup( eventhandler.get_event_params() )")
    elif code_num==37: # output action(s) of a transition
      self.runCode("arrowRollback( atom3i, eventhandler.get_event_params() )")
    elif code_num==38: # output action(s) of a transition
      self.runCode("arrowRollback( atom3i, eventhandler.get_event_params() )")
    elif code_num==39: # output action(s) of a transition
      self.runCode("atom3i.postscriptBox.generatePostscript()")
      self.runCode("atom3i.disableSnapGridForPrinting(False)")
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==40: # output action(s) of a transition
      self.runCode("setCursor( atom3i.parent, \'Postscript\' )")
    elif code_num==41: # output action(s) of a transition
      self.runCode("scaleReset( atom3i, textMode=True )")
    elif code_num==42: # output action(s) of a transition
      self.runCode("scaleReset( atom3i )")
    elif code_num==43: # output action(s) of a transition
      self.runCode("startArrowDrawing( atom3i, eventhandler.get_event_params() )")
      self.runCode("setCursor( atom3i.parent, \'New Arrow\' )")
    elif code_num==44: # output action(s) of a transition
      self.runCode("atom3ActionMap( atom3i, eventhandler.get_event_params()  )")
    elif code_num==45: # output action(s) of a transition
      self.runCode("cb.clearSelectionDict()")
      self.runCode("atom3i.clearModel()")
      self.runCode("modelChange( atom3i )")
    elif code_num==46: # output action(s) of a transition
      self.runCode("selectAllVisibleObjects( atom3i )")
    elif code_num==47: # output action(s) of a transition
      self.runCode("copySave( atom3i )")
    elif code_num==48: # output action(s) of a transition
      self.runCode("cb.highlighter(0)")
      self.runCode("cb.clearSelectionDict()")
    elif code_num==49: # output action(s) of a transition
      self.runCode("import ForceTransfer")
      self.runCode("ForceTransfer.applyLayout( atom3i=atom3i , selection=cb.buildSelectionObjectSet() )")
      self.runCode("modelChange( atom3i )")
    elif code_num==50: # output action(s) of a transition
      self.runCode("atom3i.open()")
    elif code_num==51: # output action(s) of a transition
      self.runCode("atom3i.save(0, atom3i.statusbar.getState( atom3i.statusbar.MODEL )[1][0] )")
    elif code_num==52: # output action(s) of a transition
      self.runCode("pasteLoader( atom3i, eventhandler.get_event_params()  )")
      self.runCode("setCursor( atom3i.parent, \'Drag\' )")
      self.runCode("wasDragged = False")
    elif code_num==53: # output action(s) of a transition
      self.runCode("cutSave( atom3i )")
    elif code_num==54: # output action(s) of a transition
      self.runCode("atom3i.undoer.redo()")
    elif code_num==55: # output action(s) of a transition
      self.runCode("atom3i.undoer.undo()")
    elif code_num==56: # output action(s) of a transition
      self.runCode("startArrowEditorMode( atom3i, eventhandler.get_event_params()  )")
      self.runCode("setCursor( atom3i.parent, \'Arrow Editor Idle\' )")
    elif code_num==57: # output action(s) of a transition
      self.runCode("getSelectedItemsForDelete(atom3i)")
    elif code_num==58: # output action(s) of a transition
      self.runCode("pos = cb.getCanvasCoords( eventhandler.get_event_params()   )")
      self.runCode("atom3i.arrowEditor.deleteControlPoint(  pos )")
      self.runCode("setCursor( atom3i.parent, \'Arrow Editor Idle\' )")
    elif code_num==59: # output action(s) of a transition
      self.runCode("cb.buildSelectionObjectSet()")
      self.runCode("selection = cb.getSelectionObjectSet()")
      self.runCode("dragStart(atom3i)")
      self.runCode("dragMotion(atom3i,[0,0],[0,1],selection)")
      self.runCode("dragDrop(atom3i,selection)")
      self.runCode("optimizeConnectionPorts( atom3i )")
    elif code_num==60: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.dragOps(0,0,0,-1,mouseMove=False )")
    elif code_num==61: # output action(s) of a transition
      self.runCode("atom3i.toggleSnapGrid()")
    elif code_num==62: # output action(s) of a transition
      self.runCode("import SpringLayout")
      self.runCode("selection = cb.buildSelectionObjectSet()")
      self.runCode("SpringLayout.applyLayout( atom3i = atom3i, selection = selection )")
      self.runCode("modelChange( atom3i )")
    elif code_num==63: # output action(s) of a transition
      self.runCode("import ArrowOptimizer")
      self.runCode("ArrowOptimizer.applyLayout( atom3i = atom3i )")
      self.runCode("modelChange( atom3i )")
    elif code_num==64: # output action(s) of a transition
      self.runCode("atom3i.loadImmediateOptions()")
    elif code_num==65: # output action(s) of a transition
      self.runCode("atom3i.showConsole()")
    elif code_num==66: # output action(s) of a transition
      self.runCode("atom3i.openMetaModel()")
    elif code_num==67: # output action(s) of a transition
      self.runCode("atom3i.closeMetaModel()")
    elif code_num==68: # output action(s) of a transition
      self.runCode("atom3i.postscriptBox.createMask( eventhandler.get_event_params()   )")
      self.runCode("setCursor( atom3i.parent, \'Postscript\' )")
    elif code_num==69: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.LastModelPopup(eventhandler.get_event_params() )")
    elif code_num==70: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.LastMetaModelPopup( eventhandler.get_event_params() )")
    elif code_num==71: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.SourcePathPopup( eventhandler.get_event_params()  )")
    elif code_num==72: # output action(s) of a transition
      self.runCode("toggleCreateAsSmooth( atom3i )")
    elif code_num==73: # output action(s) of a transition
      self.runCode("pos = cb.getCanvasCoords( eventhandler.get_event_params()   )")
      self.runCode("atom3i.arrowEditor.insertControlPoint( pos )")
      self.runCode("modelChange( atom3i )")
      self.runCode("setCursor( atom3i.parent, \'Arrow Editor Active\' )")
    elif code_num==74: # output action(s) of a transition
      self.runCode("cb.buildSelectionObjectSet()")
      self.runCode("selection = cb.getSelectionObjectSet()")
      self.runCode("dragStart(atom3i)")
      self.runCode("dragMotion(atom3i,[0,0],[-1,0],selection)")
      self.runCode("dragDrop(atom3i,selection)")
      self.runCode("optimizeConnectionPorts( atom3i )")
    elif code_num==75: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.dragOps(0,0,-1,0,mouseMove=False )")
    elif code_num==76: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.clearActiveControlPoint()")
      self.runCode("setCursor( atom3i.parent, \'Arrow Editor Idle\' )")
    elif code_num==77: # output action(s) of a transition
      self.runCode("cb.buildSelectionObjectSet()")
      self.runCode("selection = cb.getSelectionObjectSet()")
      self.runCode("dragStart(atom3i)")
      self.runCode("dragMotion(atom3i,[0,0],[1,0],selection)")
      self.runCode("dragDrop(atom3i,selection)")
      self.runCode("optimizeConnectionPorts( atom3i )")
    elif code_num==78: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.dragOps(0,0,1,0,mouseMove=False )")
    elif code_num==79: # output action(s) of a transition
      self.runCode("cb.buildSelectionObjectSet()")
      self.runCode("selection = cb.getSelectionObjectSet()")
      self.runCode("dragStart(atom3i)")
      self.runCode("dragMotion(atom3i,[0,0],[0,-1],selection)")
      self.runCode("dragDrop(atom3i,selection)")
      self.runCode("optimizeConnectionPorts( atom3i )")
    elif code_num==80: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.dragOps(0,0,0,1,mouseMove=False )")
    elif code_num==81: # output action(s) of a transition
      self.runCode("cb.buildSelectionObjectSet()")
      self.runCode("dragStart( atom3i )")
      self.runCode("setCursor( atom3i.parent, \'Drag\' )")
      self.runCode("wasDragged = False")
    elif code_num==82: # output action(s) of a transition
      self.runCode("listOfLists = cb.getSelectionDict().values()")
      self.runCode("item, obj = listOfLists[0]")
      self.runCode("event =  eventhandler.get_event_params()")
      self.runCode("atom3i.editclass( event.x_root, event.y_root, item )")
    elif code_num==83: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.FilePopup( eventhandler.get_event_params() )")
    elif code_num==84: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.LayoutPopup( eventhandler.get_event_params() )")
    elif code_num==85: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.ModelPopup( eventhandler.get_event_params()  )")
    elif code_num==86: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.ModelPopup( eventhandler.get_event_params() )")
    elif code_num==87: # output action(s) of a transition
      self.runCode("cb.initReSizer()")
      self.runCode("setCursor( atom3i.parent, \'Sizing\' )")
    elif code_num==88: # output action(s) of a transition
      self.runCode("cb.initReSizer()")
      self.runCode("setCursor( atom3i.parent, \'Sizing\' )")
    elif code_num==89: # output action(s) of a transition
      self.runCode("cb.smoothSelected()")
      self.runCode("modelChange( atom3i )")
    elif code_num==90: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.smoothArrow()")
    elif code_num==91: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.toggleMoveLabelDrawingMode()")
      self.runCode("editPoint( atom3i, eventhandler.get_event_params() )")
    elif code_num==92: # output action(s) of a transition
      self.runCode("atom3i.arrowEditor.toggleMoveLabelDrawingMode()")
      self.runCode("editPoint( atom3i, eventhandler.get_event_params() )")
    elif code_num==93: # output action(s) of a transition
      self.runCode("setCursor( atom3i.parent, \'New Arrow No Snap\' )")
      self.runCode("realtimeArrowMotion( atom3i, eventhandler.get_event_params(), snap=False )")
    elif code_num==94: # output action(s) of a transition
      self.runCode("setCursor( atom3i.parent, \'New Arrow\' )")
      self.runCode("realtimeArrowMotion( atom3i, eventhandler.get_event_params() )")
    elif code_num==95: # output action(s) of a transition
      self.runCode("cb.toggleLabelDragMode()")
    elif code_num==96: # output action(s) of a transition
      self.runCode("atom3i.popupMenuCreator.TransformationPopup( eventhandler.get_event_params()  )")
    elif code_num==97: # output action(s) of a transition
      self.runCode("ZoomFocus.applyLayout( atom3i )")
      self.runCode("SnapGrid.applyLayout( atom3i )")
      self.runCode("optimizeConnectionPorts( atom3i, doAllLinks=True )")
      self.runCode("modelChange( atom3i )")
    elif code_num==98: # output action(s) of a transition
      self.runCode("event=eventhandler.get_event_params()")
      self.runCode("cb.clearSelectionTuple()")
      self.runCode("startNewSelectionBox(atom3i, event, \"green\")")
      self.runCode("setCursor( atom3i.parent, \'Selection\' )")
    elif code_num==99: # output action(s) of a transition
      self.runCode("event=eventhandler.get_event_params()")
      self.runCode("startNewSelectionBox(atom3i, event, \"green\")")
      self.runCode("cb.appendSelectionTuple( cb.getItemUnderCursor( atom3i, event)[0]  )")
      self.runCode("setCursor( atom3i.parent, \'Selection\' )")
    elif code_num==100: # output action(s) of a transition
      self.runCode("startArrowEditorMode( atom3i, eventhandler.get_event_params()  )")
      self.runCode("setCursor( atom3i.parent, \'Arrow Editor Idle\' )")
    elif code_num==101: # output action(s) of a transition
      self.runCode("getSelectedItemsForDelete(atom3i, entityOnlyFlag=True)")
    elif code_num==102: # output action(s) of a transition
      self.runCode("event = eventhandler.get_event_params()")
      self.runCode("event.destroy()")
    elif code_num==103: # output action(s) of a transition
      self.runCode("event = eventhandler.get_event_params()")
      self.runCode("event.destroy()")
    elif code_num==104: # output action(s) of a transition
      self.runCode("atom3i.postscriptBox.generatePostscript()")
      self.runCode("atom3i.disableSnapGridForPrinting(False)")
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==105: # output action(s) of a transition
      self.runCode("event =  eventhandler.get_event_params()")
      self.runCode("atom3i.editclass( event.x_root, event.y_root )")
    elif code_num==106: # output action(s) of a transition
      self.runCode("itemHandler = atom3i.arrowEditor.getArrowHandler()")
      self.runCode("event =  eventhandler.get_event_params()")
      self.runCode("atom3i.editclass( event.x_root, event.y_root, itemHandler )")
    elif code_num==107: # output action(s) of a transition
      self.runCode("atom3i.postscriptBox.createMask( eventhandler.get_event_params()   )")
      self.runCode("setCursor( atom3i.parent, \'Postscript\' )")
    elif code_num==108: # output action(s) of a transition
      self.runCode("atom3i.reboot_AToM3()")
    elif code_num==109: # output action(s) of a transition
      self.runCode("setDefaultCursor( atom3i.parent )")
    elif code_num==110: # output action(s) of a transition
      self.runCode("from CallbackHandlers import *")
      self.runCode("from Cursors                 import setCursor, setDefaultCursor")
      self.runCode("from Utilities                 import modelChange,optimizeConnectionPorts")
      self.runCode("import ZoomFocus")
      self.runCode("import SnapGrid")
      self.runCode("atom3i=eventhandler.get_event_params()")
      self.runCode("cb=atom3i.cb")
    elif code_num==111: # enter actions for state "Active Event Loop.New Arrow.Drop Point"
      self.runCode("dropArrowPoints( atom3i, eventhandler.get_event_params() )")
      self.runCode("eventhandler.event(\'[Done]\')")
    elif code_num==112: # enter actions for state "Active Event Loop.New Arrow.Snap Points"
      self.runCode("atom3i.pilotArrow.enteringArrowMode( atom3i )")
    elif code_num==113: # enter actions for state "Active Event Loop.New Arrow.Drop Point2"
      self.runCode("dropArrowPoints( atom3i, eventhandler.get_event_params(), snap=False)")
      self.runCode("eventhandler.event(\'[Done]\')")
    elif code_num==114: # enter actions for state "Active Event Loop.Drag Nodes"
      self.runCode("enteringDragMode( atom3i )")
    elif code_num==115: # enter actions for state "Scale Text"
      self.runCode("cb.enteringReSizer( atom3i )")
    elif code_num==116: # enter actions for state "Drag Label"
      self.runCode("enteringDragMode( atom3i )")
    elif code_num==117: # enter actions for state "Postscript"
      self.runCode("atom3i.postscriptBox.enteringPostscript()")
    elif code_num==118: # enter actions for state "Active Event Loop.Scale Entity"
      self.runCode("cb.enteringReSizer( atom3i )")
    elif code_num==119: # enter actions for state "Active Event Loop.New Arrow.No Snap"
      self.runCode("atom3i.pilotArrow.enteringArrowMode( atom3i )")
    elif code_num==120: # enter actions for state "Active Event Loop.Arrow Editor.Active Point"
      self.runCode("atom3i.arrowEditor.enteringActiveControlPointMode( atom3i )")
    elif code_num==121: # enter actions for state "Active Event Loop.Main"
      self.runCode("cb.setLabelDragModeCursor()")
    elif code_num==122: # enter actions for state "Active Event Loop.Arrow Editor.Default"
      self.runCode("atom3i.arrowEditor.enteringArrowEditorMode( atom3i , eventhandler.get_event_params() )")
    elif code_num==123: # exit actions for state "GG Graph Select"
      self.runCode("cb.setMatchChoice( atom3i, eventhandler.get_event_params() )")

  def testCondition(self, cond_num):

    if cond_num==0 and \
       eval("(cb.isNoItemUnderCursor( atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==1 and \
       eval("(cb.isItemUnderCursorSelected( atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==2 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==3 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==4 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==5 and \
       eval("(atom3i.exitFromATOM3())", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==6 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==7 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==8 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==9 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==10 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==11 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==12 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==13 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==14 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==15 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==16 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==17 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==18 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==19 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==20 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==21 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==22 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==23 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==24 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==25 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==26 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==27 and \
       eval("(cb.isNoItemUnderCursor( atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==28 and \
       eval("(cb.isItemUnderCursorUnselected( atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==29 and \
       eval("(cb.isItemUnderCursorSelected( atom3i, eventhandler.get_event_params()) and not cb.isLabelDragMode())", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==30 and \
       eval("(not editPoint(atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==31 and \
       eval("(editPoint(atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==32 and \
       eval("(atom3i.postscriptBox.setActiveSide( cb.getCanvasCoords( eventhandler.get_event_params() )  ))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==33 and \
       eval("(cb.isItemUnderCursorSelected( atom3i, eventhandler.get_event_params()) and cb.isLabelDragMode())", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==34 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==35 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==36 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==37 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==38 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==39 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==40 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==41 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==42 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==43 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==44 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==45 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==46 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==47 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==48 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==49 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==50 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==51 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==52 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==53 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==54 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==55 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==56 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==57 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==58 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==59 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==60 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==61 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==62 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==63 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==64 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==65 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==66 and \
       eval("(atom3i.optionsDatabase.showOptionsDatabase())", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==67 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==68 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==69 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==70 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==71 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==72 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==73 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==74 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==75 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==76 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==77 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==78 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==79 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==80 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==81 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==82 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==83 and \
       eval("(cb.getOverlappedItemUnderCursor( atom3i, eventhandler.get_event_params() ))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==84 and \
       eval("(cb.getOverlappedItemUnderCursor( atom3i, eventhandler.get_event_params(), \'Select Object to Edit\' ))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==85 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==86 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==87 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==88 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==89 and \
       eval("(not cb.isLabelDragMode())", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==90 and \
       eval("(cb.isLabelDragMode())", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==91 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==92 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==93 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==94 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==95 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==96 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==97 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==98 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==99 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==100 and \
       eval("(cb.isNoItemUnderCursor( atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==101 and \
       eval("(cb.isItemUnderCursorUnselected( atom3i, eventhandler.get_event_params()))", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==102 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==103 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==104 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==105 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==106 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==107 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==108 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==109 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==110 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==111 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==112 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==113 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==114 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    elif cond_num==115 and \
       eval("(1)", self.DefaultInterpreter.locals):
      return 1
    return 0

  def runEnterActions(self, state):

    if state==8: # enter action(s) for state "Active Event Loop.New Arrow.Drop Point"
      self.runActionCode(111)
    elif state==11: # enter action(s) for state "Active Event Loop.New Arrow.Snap Points"
      self.runActionCode(112)
    elif state==9: # enter action(s) for state "Active Event Loop.New Arrow.Drop Point2"
      self.runActionCode(113)
    elif state==5: # enter action(s) for state "Active Event Loop.Drag Nodes"
      self.runActionCode(114)
    elif state==21: # enter action(s) for state "Scale Text"
      self.runActionCode(115)
    elif state==16: # enter action(s) for state "Drag Label"
      self.runActionCode(116)
    elif state==20: # enter action(s) for state "Postscript"
      self.runActionCode(117)
    elif state==14: # enter action(s) for state "Active Event Loop.Scale Entity"
      self.runActionCode(118)
    elif state==10: # enter action(s) for state "Active Event Loop.New Arrow.No Snap"
      self.runActionCode(119)
    elif state==3: # enter action(s) for state "Active Event Loop.Arrow Editor.Active Point"
      self.runActionCode(120)
    elif state==6: # enter action(s) for state "Active Event Loop.Main"
      self.runActionCode(121)
    elif state==4: # enter action(s) for state "Active Event Loop.Arrow Editor.Default"
      self.runActionCode(122)

  def runExitActions(self, state):

    if state==18: # exit action(s) for state "GG Graph Select"
      self.runActionCode(123)

  def compareSchedule(self, sched_a, sched_b):

    return cmp(sched_a[1], sched_b[1])

  def addSchedule(self, id, interval, event, scheduler):

    if self.Parent!=None:  # Non-top-level model
      self.Parent.addSchedule(id, interval, event, scheduler)
      return
    f=eval(interval, self.DefaultInterpreter.locals)
    ##self.SchedulerCond.acquire()
    t=time.time()+f
    s=[id, t, interval, event, scheduler]
    self.Schedules.append(s)
    self.Schedules.sort(self.compareSchedule)
    ##self.SchedulerCond.notify()
    ##self.SchedulerCond.release()

  def removeSchedule(self, id, scheduler):

    if self.Parent!=None:  # Non-top-level model
      self.Parent.removeSchedule(id, scheduler)
      return
    ##self.SchedulerCond.acquire()
    i=0
    while i<len(self.Schedules):
      if self.Schedules[i][0]==id and self.Schedules[i][4]==scheduler:
        del self.Schedules[i]
      else:
        i=i+1
    ##self.SchedulerCond.release()

  def scheduler(self):

    if( not self.Schedules): return

    while( self.Schedules and self.Schedules[0][1]<=time.time()):
      this_sched=self.Schedules[0]
      del self.Schedules[0]
      self.event(this_sched[3], [], None, this_sched[4])

    if self.Schedules:
      t=self.Schedules[0][1]-time.time()

  def recordAllEnteredStates(self):

    st=self.state
    while st!=None:
      self.recordEnteredState(st.StateID, 1, 1)
      st=st.Next

  def recordEnteredState(self, s, superstates=0, submodel=0, commonstate=-1):

    # test if s is already recorded
    se=self.StatesEntered
    found=0
    while se!=None:
      if se.int==s:
        found=1
        break
      se=se.Next

    if not found:
      if superstates:
        parent=self.getParentState(s)
        if parent>=0 and parent!=commonstate:
          self.recordEnteredState(parent, 1, 0, commonstate)
      st=IntList()
      st.Next=self.StatesEntered
      st.int=s
      self.StatesEntered=st
      if submodel and self.Submodels[s]:
        self.Submodels[s].recordAllEnteredStates()

  def runAllEnterActions(self):

    self.runEnterActionsForStates(self.StatesEntered, 1)

  def runEnterActionsForStates(self, states, recursive=0):

    if states:
      self.runEnterActionsForStates(states.Next, 0)
      self.runEnterActions(states.int)
    if recursive:
      for s in self.Submodels:
        if s:
          s.runAllEnterActions()

  def runExitActionsForStates(self, common_state):

    substates=self.getSubstates(common_state)
    if substates==None:
      s=self.state
      while s!=None and s.StateID!=common_state:
        s=s.Next
      if s!=None and self.Submodels[s.StateID]:
        self.Submodels[s.StateID].runExitActionsForStates(-1)
      return s!=None
    else:
      has_current_substate=0
      while substates!=None:
        res=self.runExitActionsForStates(substates.int)
        has_current_substate=has_current_substate or res
        if res:
          self.runExitActions(substates.int)
        substates=substates.Next
      return has_current_substate

  def runInitializer(self):

    self.runActionCode(1)
    for s in self.Submodels:
      if s:
        s.runInitializer()

  def runFinalizer(self):

    if self.Started:
      self.Started=0
      for s in self.Submodels:
        if s:
          s.runFinalizer()
      self.runActionCode(0)
      if self.Parent==None:  # Top-level model
        ##self.EventsCond.acquire()
        ##self.SchedulerCond.acquire()
        self.Stopped=1
        ##self.EventsCond.notify()
        ##self.SchedulerCond.notify()
        ##self.SchedulerCond.release()
        ##self.EventsCond.release()
      else:
        self.Stopped=1

  def clearEnteredStates(self):

    self.StatesEntered=None
    for s in self.Submodels:
      if s:
        s.clearEnteredStates()

  def get_current_state(self):

    return self.getCurrentState()

  def runCode(self, c):

    self.DefaultInterpreter.runsource(c+"\n", "<input>", "exec")

  def setupInterpreter(self):

    self.DefaultInterpreter.locals["eventhandler"]=self
    self.DefaultInterpreter.locals["dump_message"]=self.dump_message

  def get_event_params(self):

    return self.params

  def dump_message(self, msg):

    print msg

  def is_in_state(self, s, check_substate=1):

    return self.isInState(s, check_substate)

  def start(self, lock=None, run_enter_actions=1, TkInstance = None):

    if self.Parent==None:  # Top-level model
      if run_enter_actions:
        self.runEnterActionsForStates(self.StatesEntered, 1)
      self.Started=1
      
      if( TkInstance ):
        self.sleepMethod = TkInstance.after 
        startTkMainloop = False
      else:
        import Tkinter
        TkInstance = Tkinter.Tk()
        self.sleepMethod = TkInstance.after 
        startTkMainloop = True
      
      self.pollingStation() 
      ##thread.start_new_thread(self.handleEvent_wrapper, ())
      ##thread.start_new_thread(self.scheduler, ())
      ## if lock:
        ## lock.release()
    else:
      self.Started=1
    for submodel in self.Submodels:
      if submodel!=None:
        submodel.start()

    if( self.Parent==None and startTkMainloop == None ): TkInstance.mainloop()

  def pollingStation(self):

    self.sleepMethod( 100, self.pollingStation )
    if self.Stopped: return 
    #self.handleEvent_wrapper()
    self.scheduler()
    #todo: pollingStation\,
  def shutdown(self):

    pass

  def handleEvent_wrapper(self):

    if( self.PendingEvents==None ): return
    event=self.PendingEvents
    self.PendingEvents=self.PendingEvents.Next
    if self.PendingEvents==None:
      self.PendingEventsTail=None
    event.next=None
    self.handleEvent(event.Event[0], event.Event[1], event.Event[2], event.Event[3])
    self.handleEvent_wrapper()

  def event(self, e, params=[], cond=None, scheduler=None):

    ev=EventList()
    ev.Event=[e, params, cond, scheduler]
    if self.PendingEventsTail!=None:
      self.PendingEventsTail.Next=ev
    else:
      self.PendingEvents=ev
    self.PendingEventsTail=ev
    self.handleEvent_wrapper()


# main
if __name__=="__main__":
  UI_Statechart_MDL.main(sys.argv)