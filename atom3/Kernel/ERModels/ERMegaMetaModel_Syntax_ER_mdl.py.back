from graph_ASG_ERmetaMetaModel import *
from stickylink import *
from widthXfillXdecoration import *
from ERentity import *
from graph_ERentity import *
from ERrelationship import *
from graph_ERrelationship import *
from ASG_ERmetaMetaModel import *
from graph_ASG_ERmetaMetaModel import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def ERMegaMetaModel_Syntax_ER_mdl(self, rootNode):
    rootNode.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj1 =[]
    rootNode.attributes.setValue(lcobj1)
    rootNode.name.setValue('ERModel')
    rootNode.constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj1 =[]
    rootNode.constraints.setValue(lcobj1)
    rootNode.graphClass_= graph_ASG_ERmetaMetaModel

    self.globalPrecondition( rootNode )

    self.obj19=ERentity(self)

    self.obj19.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('')
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('attributes', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3Attribute,self.types )
    lcobj3=[]
    cobj2.initialValue.setValue(lcobj3)
    lcobj2.append(cobj2)
    self.obj19.attributes.setValue(lcobj2)
    self.obj19.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('ERrelationship', (('Source', 'Destination'), 0), '1', '1'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('ERrelationship', (('Source', 'Destination'), 1), '1', '1'))
    lcobj2.append(cobj2)
    self.obj19.cardinality.setValue(lcobj2)
    self.obj19.appearance.setValue( ('ERentity', self.obj19))
    self.obj19.name.setValue('ERentity')
    self.obj19.constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj19.constraints.setValue(lcobj2)
    self.obj19.graphClass_= graph_ERentity
    if self.genGraphics:
       new_obj = graph_ERentity(111.0,271.0,self.obj19)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("ERentity", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj19.graphObject_ = new_obj
    rootNode.addNode(self.obj19)
    self.globalAndLocalPostcondition(self.obj19, rootNode)

    self.globalPrecondition( rootNode )

    self.obj20=ERrelationship(self)

    self.obj20.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('')
    lcobj2.append(cobj2)
    self.obj20.attributes.setValue(lcobj2)
    self.obj20.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('ERentity', (('Source', 'Destination'), 1), '1', '1'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('ERentity', (('Source', 'Destination'), 0), '1', '1'))
    lcobj2.append(cobj2)
    self.obj20.cardinality.setValue(lcobj2)
    self.obj20.appearance.setValue( ('ERrelationship', self.obj20))
    self.obj20.appearance.linkInfo=linkEditor(self,self.obj20.appearance.semObject, "ERrelationship")
    self.obj20.appearance.linkInfo.FirstLink= stickylink()
    self.obj20.appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj20.appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj20.appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj20.appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj20.appearance.linkInfo.FirstLink.decoration.setValue( ('ERrelationship_1stLink', self.obj20.appearance.linkInfo.FirstLink))
    self.obj20.appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj20.appearance.linkInfo.FirstSegment.width=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.FirstSegment.fill=ATOM3String('')
    self.obj20.appearance.linkInfo.FirstSegment.stipple=ATOM3String('')
    self.obj20.appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj20.appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj20.appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj20.appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj20.appearance.linkInfo.FirstSegment.decoration.setValue( ('ERrelationship_1stSegment', self.obj20.appearance.linkInfo.FirstSegment))
    self.obj20.appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj20.appearance.linkInfo.Center=ATOM3Appearance()
    self.obj20.appearance.linkInfo.Center.setValue( ('ERrelationship_Center', self.obj20.appearance.linkInfo))
    self.obj20.appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj20.appearance.linkInfo.SecondSegment.width=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.SecondSegment.fill=ATOM3String('')
    self.obj20.appearance.linkInfo.SecondSegment.stipple=ATOM3String('')
    self.obj20.appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj20.appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj20.appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj20.appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(0)
    self.obj20.appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj20.appearance.linkInfo.SecondSegment.decoration.setValue( ('ERrelationship_2ndSegment', self.obj20.appearance.linkInfo.SecondSegment))
    self.obj20.appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj20.appearance.linkInfo.SecondLink= stickylink()
    self.obj20.appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj20.appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj20.appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj20.appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(15)
    self.obj20.appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(15)
    self.obj20.appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(4)
    self.obj20.appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj20.appearance.linkInfo.SecondLink.decoration.setValue( ('ERrelationship_2ndLink', self.obj20.appearance.linkInfo.SecondLink))
    self.obj20.appearance.linkInfo.FirstLink.decoration.semObject=self.obj20.appearance.semObject
    self.obj20.appearance.linkInfo.FirstSegment.decoration.semObject=self.obj20.appearance.semObject
    self.obj20.appearance.linkInfo.Center.semObject=self.obj20.appearance.semObject
    self.obj20.appearance.linkInfo.SecondSegment.decoration.semObject=self.obj20.appearance.semObject
    self.obj20.appearance.linkInfo.SecondLink.decoration.semObject=self.obj20.appearance.semObject
    self.obj20.name.setValue('ERrelationship')
    self.obj20.constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj20.constraints.setValue(lcobj2)
    self.obj20.graphClass_= graph_ERrelationship
    if self.genGraphics:
       new_obj = graph_ERrelationship(200.0,140.0,self.obj20)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("ERrelationship", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj20.graphObject_ = new_obj
    rootNode.addNode(self.obj20)
    self.globalAndLocalPostcondition(self.obj20, rootNode)
    self.drawConnections((self.obj19,self.obj20,[240.0, 280.0, 240.0, 140.0, 200.0, 140.0], 0, 3), (self.obj20,self.obj19,[200.0, 140.0, 160.0, 140.0, 160.0, 280.0], 0, 3) )

newfunction = ERMegaMetaModel_Syntax_ER_mdl

loadedMMName = 'EntityRelationship'
