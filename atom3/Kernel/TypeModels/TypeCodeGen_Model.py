from GraphGrammarEdit import *
from GGruleEdit import *

def savedTrans(self):
   self.EditingGraphGrammar= GraphGrammarEdit(None, self)
   self.EditingGraphGrammar.Name=ATOM3String('TypeCodeGen')
   self.EditingGraphGrammar.Rules=ATOM3List([ 1, 1, 1, 0],GGruleEdit,None, self)
   lcobj0=[]
   cobj0= GGruleEdit(None, self)
   cobj0.Name=ATOM3String('TupleGen')
   cobj0.Order=ATOM3Integer(1)
   cobj0.TimeDelay=ATOM3Integer(2)
   cobj0.SubtypesMatching=ATOM3Boolean()
   cobj0.SubtypesMatching.setValue((None, 0))
   cobj0.SubtypesMatching.config = 0

   from ASG_TypesMetaModel import *
   from ModelType import *
   from Operator import *
   from TypeName import *
   from LeafType import *

   cobj0.LHS = ASG_TypesMetaModel(self)

   self.obj25=Operator(self)

   self.obj25.type.setValue( (['X', 'U', '->'], 0) )
   self.obj25.type.config = 0
   self.obj25.GGLabel.setValue(1)
   self.obj25.graphClass_= graph_Operator
   if self.genGraphics:
      from graph_Operator import *
      new_obj = graph_Operator(208.0,271.0,self.obj25)
   else: new_obj = None
   self.obj25.graphObject_ = new_obj
   cobj0.LHS.addNode(self.obj25)
   cobj0.RHS = ASG_TypesMetaModel(self)

   self.obj27=Operator(self)

   self.obj27.type.setValue( (['X', 'U', '->'], 0) )
   self.obj27.type.config = 0
   self.obj27.GGLabel.setValue(1)
   self.obj27.graphClass_= graph_Operator
   if self.genGraphics:
      from graph_Operator import *
      new_obj = graph_Operator(205.0,255.0,self.obj27)
   else: new_obj = None
   self.obj27.graphObject_ = new_obj
   self.obj270= AttrCalc()
   self.obj270.Copy=ATOM3Boolean()
   self.obj270.Copy.setValue(('Copy from LHS', 1))
   self.obj270.Copy.config = 0
   self.obj270.Specify=ATOM3Constraint()
   self.obj270.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '\n'))
   self.obj27.GGset2Any['type']= self.obj270
   cobj0.RHS.addNode(self.obj27)
   cobj0.Condition=ATOM3Constraint()
   cobj0.Condition.setValue(('condition', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'node = self.getMatched(graphID, self.LHS.nodeWithLabel(1))\nif node.FILE_: 		# This node has been processed yet!\n  return 0\nself.generatedChilds = []\nfor child in node.out_connections_:# childs have the FILE_ slot filled...\n  if child.FILE_:	# if this is the case, add to list\n     self.generatedChilds.append(child)\n  else:\n     return 0	        # otherwise, the condition does not hold...\nreturn 1		\n\n\n\n'))
   cobj0.Action=ATOM3Constraint()
   cobj0.Action.setValue(('action', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'def getElementFromName (list, name):\n   for element in list:\n      if element.getClass() == "LeafType":\n         if element.Type.getValue()[0] == name: return element\n      elif name == element.getClass() == "ModelType":\n         if element.MetaModelName.toString() == name: return element\n   return None\n      \nnnode = self.getMatched(graphID, self.LHS.nodeWithLabel(1))\nAT3Types = [\'Enum\', \'String\', \'Integer\', \'Float\', \'List\', \'Attribute\', \'Boolean\', \'Connection\', \'Port\', \'Constraint\', \'Appearance\', \'BottomType\', \'File\', \'Link\']\n# compose the class name\nclassName = ""\ncounter = 0\nattributesInfo = []							 # list which contains tuples of the form: (name, type, valInitial, node)\nfor node in self.generatedChilds:					# for each child that has been found...\n   if counter > 0: className = className+"X"\n   if node.getClass() == \'LeafType\':					# A leaf type...\n      className = className + node.Type.getValue()[0]			# append the name of the element\n      val = node.Type.getValue()\n      if val[1] in AT3Types: attributesInfo.append((val[0], \'ATOM3\'+val[1], val[2], node))\n      else: attributesInfo.append((val[0], val[1], val[2], node))\n   elif node.getClass() == \'ModelType\':					# A "Model" node...\n      className += node.MetaModelName.toString()			# add the MetaModel name to the class...\n      attributesInfo.append(( node.Name.toString(), "ASG_"+node.MetaModelName.toString(), None, node))	# add info. to the attributesInfo list\n   else:	\n      className = className + node.FILE_\n      attributesInfo.append((node.FILE_, node.FILE_, None, node))\n   counter = counter + 1\nnnode.FILE_=className\nfileName = className+".py"\nfile = open(atom3i.codeGenDir +"/"+fileName, "w+t")			\nfile.write("from Tkinter import *\\n")					\nfile.write("from ATOM3Type import *\\n")\n# generate imports...\nimports = []\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         		# unpack element components\n   if not type in imports: imports.append(type)\n   if type == "ATOM3List":					# should look for the initialValue\n        element = getElementFromName ( self.generatedChilds, name )\n        if element.getClass() == "LeafType" and element.Type.initialValue:\n           initialItems = element.Type.initialValue.getValue()				# get a list of items...\n           for item in initialItems:\n             if not item.getTypeName() in imports: imports.append(item.getTypeName())\n           if element.Type.initialValue.itemType:\n              if not element.Type.initialValue.itemType.__name__ in imports: imports.append(element.Type.initialValue.itemType.__name__)\nfor type in imports:\n   file.write("from "+type+" import "+type+"\\n")\n\nfile.write("class "+className+" (ATOM3Type):\\n")\nfile.write("   def __init__(self):\\n")\n# .........................................................\n# Generate the __init__ method\n# .........................................................\nfile.write("      ATOM3Type.__init__(self)\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         		# unpack element components\n   file.write("      self."+name+"= None\\n")			# for the moment, initialize to None...\nfile.write("\\n")\n# .........................................................\n# Generate the createComponents method\n# .........................................................\nfile.write("   def createComponents(self):\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         		# unpack element components\n   file.write("      if not self."+name+":\\n")\n   if node.getClass() == \'LeafType\':                               		# we are dealing with a simple type...\n       node.Type.initialValue.writeConstructor2File(file,"         ", "self."+name, 0, 1)\n   else:\n       file.write("         from "+type+" import *\\n")			# import the class...\n       file.write("         self."+name+"="+type+"()\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the show method\n# .........................................................\nfile.write("   def show(self, parent, parentWindowInfo=None):\\n")\nfile.write("      self.createComponents()\\n")\nfile.write("      ATOM3Type.show(self, parent, parentWindowInfo)\\n")\nfile.write("      self.containerFrame = Frame(parent)\\n")\ncounter = 0\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         		# unpack element components\n   if node.getClass() == "LeafType":				# Check if we should create an intermediate button or not\n      directEditing = node.Type.getValue()[4][1]\n   elif node.getClass() == "ModelType":				# Always create an intermediat button te edit models\n      directEditing = 0\n   else:							# direct editing for other composite types\n      directEditing = 1\n   file.write("      Label(self.containerFrame, text=\'"+name+"\').grid(row="+str(counter)+",column=0,sticky=W)\\n")\n   if directEditing:\n      file.write("      self."+name+".show(self.containerFrame, parentWindowInfo).grid(row="+str(counter)+",column=1,sticky=W)\\n")\n   else:\n      file.write("      Button( self.containerFrame, text = \'edit\', ")\n      if node.getClass() == "ModelType":\n         file.write("command =  lambda x=self : ATOM3TypeDialog(x.containerFrame, x."+name+", ATOM3TypeDialog.OPEN))")\n      else:\n         file.write("command =  lambda x=self : ATOM3TypeDialog(x.containerFrame, x."+name+"))")\n      file.write(".grid(row="+str(counter)+",column=1,sticky=W)\\n")\n   counter = counter + 1\nfile.write("      return self.containerFrame\\n\\n")\n# .........................................................\n# Generate the toString method\n# .........................................................\nfile.write("   def toString(self):\\n")\nfile.write("      self.createComponents()\\n")\nfile.write("      return ")\ncounter = 0\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         # unpack element components\n   if counter: file.write("+\' \'+")\n   file.write(" self."+name+".toString()")\n   counter = counter + 1\nfile.write("\\n")\n# .........................................................\n# Generate the getValue method\n# .........................................................\nfile.write("   def getValue(self):\\n")\nfile.write("      self.createComponents()\\n")\nfile.write("      return (")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         # unpack element components\n   file.write("self."+name+".getValue(),")\nfile.write(")\\n\\n")\n# .........................................................\n# Generate the setValue method\n# .........................................................\nfile.write("   def setValue(self, value):\\n")\nfile.write("      self.createComponents()\\n")\nfile.write("      if value == None:\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         # unpack element components\n   file.write("         self."+name+".setNone()\\n")\nfile.write("      else:\\n")\ncounter = 0\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         # unpack element components\n   file.write("         self."+name+".setValue(value["+str(counter)+"])\\n")\n   counter = counter + 1\nfile.write("\\n")\n# .........................................................\n# Generate the writeConstructor2File method\n# .........................................................\nfile.write(\'   def writeConstructor2File(self, file, indent, objName="at", depth = 0, generatingCode = 0):\\n\')\nfile.write("      self.createComponents()\\n")\nfile.write("      file.write(indent+objName+\'= "+className+"()\\\\n\')\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         		# unpack element components\n   if node.getClass() == "ModelType":\n      file.write("      file.write(indent+objName+\'."+name+"= "+type+"(self)\\\\n\')\\n")\n      file.write("      self."+name+"writeGraph2File(file, 1, 0, objName+\'."+name+"\', indent, 0, genImports = 1)\\n")\n   file.write("      self."+name+".writeConstructor2File(file, indent, objName+\'."+name+"\', depth, generatingCode)\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the writeValue2File method\n# .........................................................\nfile.write(\'   def writeValue2File(self, file, indent, objName="at", depth = 0, generatingCode = 0):\\n\')\nfile.write("      self.createComponents()\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n  name, type, valInitial, node = element                         # unpack element components\n  file.write("      self."+name+".writeValue2File(file, indent, objName+\'."+name+"\', depth, generatingCode)\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the clone method\n# .........................................................\nfile.write(\'   def clone(self):\\n\')\nfile.write(\'     "Makes an exact copy of itself"\\n\')\nfile.write(\'     cloneObject = \'+className+\'()\\n\')\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         # unpack element components\n   file.write(\'     if self.\'+name+\': cloneObject.\'+name+\' = self.\'+name+\'.clone()\\n\')\nfile.write(\'     return cloneObject\\n\')\n# .........................................................\n# Generate the destroy method\n# .........................................................\nfile.write(\'   def destroy(self):\\n\')\nfile.write(\'     "Destroys (i.e. updates) each field"\\n\')\nfile.write(\'     cloneObject = \'+className+\'()\\n\')\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         # unpack element components\n   file.write(\'     if self.\'+name+\': self.\'+name+\'.destroy()\\n\')\nfile.write(\'     return cloneObject\\n\')\n# .........................................................\n# Generate the invalid method\n# .........................................................\nfile.write(\'   def invalid(self):\\n\')\nfile.write(\'     "checks whether the entity is valid or not"\\n\')\nfile.write(\'     inval = 0\\n\')\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         		# unpack element components\n   file.write(\'     if self.\'+name+\': inval = inval or self.\'+name+\'.invalid()\\n\')   \nfile.write(\'     return inval\\n\\n\')\nfile.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'))
   lcobj0.append(cobj0)
   cobj0= GGruleEdit(None, self)
   cobj0.Name=ATOM3String('UnionGen')
   cobj0.Order=ATOM3Integer(1)
   cobj0.TimeDelay=ATOM3Integer(2)
   cobj0.SubtypesMatching=ATOM3Boolean()
   cobj0.SubtypesMatching.setValue((None, 0))
   cobj0.SubtypesMatching.config = 0

   from ASG_TypesMetaModel import *
   from ModelType import *
   from Operator import *
   from TypeName import *
   from LeafType import *

   cobj0.LHS = ASG_TypesMetaModel(self)

   self.obj32=Operator(self)

   self.obj32.type.setValue( (['X', 'U', '->'], 1) )
   self.obj32.type.config = 0
   self.obj32.GGLabel.setValue(1)
   self.obj32.graphClass_= graph_Operator
   if self.genGraphics:
      from graph_Operator import *
      new_obj = graph_Operator(215.0,300.0,self.obj32)
   else: new_obj = None
   self.obj32.graphObject_ = new_obj
   cobj0.LHS.addNode(self.obj32)
   cobj0.RHS = ASG_TypesMetaModel(self)

   self.obj34=Operator(self)

   self.obj34.type.setValue( (['X', 'U', '->'], 1) )
   self.obj34.type.config = 0
   self.obj34.GGLabel.setValue(1)
   self.obj34.graphClass_= graph_Operator
   if self.genGraphics:
      from graph_Operator import *
      new_obj = graph_Operator(226.0,344.0,self.obj34)
   else: new_obj = None
   self.obj34.graphObject_ = new_obj
   self.obj340= AttrCalc()
   self.obj340.Copy=ATOM3Boolean()
   self.obj340.Copy.setValue(('Copy from LHS', 1))
   self.obj340.Copy.config = 0
   self.obj340.Specify=ATOM3Constraint()
   self.obj340.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '\n'))
   self.obj34.GGset2Any['type']= self.obj340
   cobj0.RHS.addNode(self.obj34)
   cobj0.Condition=ATOM3Constraint()
   cobj0.Condition.setValue(('condition', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'node = self.getMatched(graphID, self.LHS.nodeWithLabel(1))\nif node.FILE_: 						# This node has been processed yet!\n   return 0\n\nself.generatedChilds = []\nfor child in node.out_connections_:			# All childs must have the FILE_ slot filled...\n   if child.FILE_:					# if this is the case, add to list\n      self.generatedChilds.append(child)\n   else:\n      return 0						# otherwise, the condition does not hold...\nreturn 1	\n\n'))
   cobj0.Action=ATOM3Constraint()
   cobj0.Action.setValue(('action', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"action performed when the rule is applied "\n\ndef getElementFromName (list, name):\n   for element in list:\n      if element.getClass() == "LeafType":\n         if element.Type.getValue()[0] == name: return element\n      elif name == element.getClass() == "ModelType":\n         if element.MetaModelName.toString() == name: return element\n   return None\n\nnnode = self.getMatched(graphID, self.LHS.nodeWithLabel(1))\nAT3Types = [\'Enum\', \'String\', \'Integer\', \'Float\', \'List\', \'Attribute\', \'Boolean\', \'Connection\', \'Port\', \'Constraint\', \'Appearance\', \'BottomType\', \'File\', \'Link\']\n# compose the class name\nclassName = ""\ncounter = 0\nattributesInfo = []\nfor node in self.generatedChilds:					# for each child that has been found...\n   if counter > 0: className = className+"U"\n   if node.getClass() == \'LeafType\':\n      className = className + node.Type.getValue()[0]			# append the name of the element\n      val = node.Type.getValue()\n      if val[1] in AT3Types: attributesInfo.append((val[0], \'ATOM3\'+val[1], val[2], node))\n      else: attributesInfo.append((val[0], val[1], val[2], node))\n   elif node.getClass() == \'ModelType\':					# A "Model" node...\n      className += node.MetaModelName.toString()			# add the MetaModel name to the class...\n      attributesInfo.append(( node.Name.toString(), "ASG_"+node.MetaModelName.toString(), None, node))	# add info. to the attributesInfo list\n   else:\n      className = className + node.FILE_\n      attributesInfo.append((node.FILE_, node.FILE_, None, node))\n   counter = counter + 1\nprint "performing action! className = ", className\nind = "     "\nnnode.FILE_=className\nfileName = className+".py"\nfile = open(atom3i.codeGenDir+"/"+fileName, "w+t")			\nfile.write("from Tkinter import *\\n")					\nfile.write("from ATOM3Type import *\\n")\n# generate imports...\nimports = []\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         		# unpack element components\n   if not type in imports: imports.append(type)\n   if type == "ATOM3List":					# should look for the initialValue\n        element = getElementFromName ( self.generatedChilds, name )\n        if element.getClass() == "LeafType" and element.Type.initialValue:\n           initialItems = element.Type.initialValue.getValue()				# get a list of items...\n           for item in initialItems:\n             if not item.getTypeName() in imports: imports.append(item.getTypeName())\n           if element.Type.initialValue.itemType:\n              if not element.Type.initialValue.itemType.__name__ in imports: imports.append(element.Type.initialValue.itemType.__name__)\nfor type in imports:\n   file.write("from "+type+" import "+type+"\\n")\nfile.write("class "+className+" (ATOM3Type):\\n")\nfile.write("   def __init__(self):\\n")\n# .........................................................\n# Generate the __init__ method\n# .........................................................\nfile.write(ind+"ATOM3Type.__init__(self)\\n")\nfile.write(ind+"self.optMenu = None\\n")\nfile.write(ind+"self.selected= None\\n")\nfile.write(ind+"self.lastSelected= None\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"self."+name+"= None\\n")			# for the moment, initialize to None...\nfile.write("\\n")\n# .........................................................\n# Generate the createComponents method\n# .........................................................\nfile.write("   def createComponents(self):\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"if not self."+name+":\\n")\n   if node.getClass() == \'LeafType\': # we are dealing with a simple type...\n      node.Type.initialValue.writeConstructor2File(file,ind+"   ", "self."+name, 0, 1)\n   elif node.getClass() == \'ModelType\':			# a model\n      file.write(ind+"   from "+type+" import "+type+"\\n")	# import the class...\n      file.write(ind+"   self."+name+"="+type+"()\\n")      \n   else:\n      file.write(ind+"   from "+name+" import *\\n")		# import the class...\n      file.write(ind+"   self."+name+"="+type+"()\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the show method\n# .........................................................\nfile.write("   def show(self, parent, parentWindowInfo=None):\\n")\nfile.write(ind+"ATOM3Type.show(self, parent, parentWindowInfo)\\n")\nfile.write(ind+"self.createComponents()\\n")\nfile.write(ind+"self.showParent = parent\\n")\nfile.write(ind+"self.parentWindowInfo = parentWindowInfo\\n")\nfile.write(ind+"self.selected = StringVar()\\n")\nfile.write(ind+"if not self.lastSelected:\\n")\n# make 1st element selected...\nname, type, valInitial, node = attributesInfo[0]\nfile.write(ind+"   self.selected.set(\'"+name+"\')\\n")\nfile.write(ind+"else:\\n")\nfile.write(ind+"   self.selected.set(self.lastSelected)\\n")\n\nfile.write(ind+"self.label = None\\n")\nfile.write(ind+"self.widget = None\\n")\nfile.write(ind+"self.containerFrame = Frame(parent)\\n")\nfile.write(ind+"Label(self.containerFrame, text=\'Select Attribute\').grid(row=0,column=0,sticky=W)\\n")\nfile.write(ind+"self.optMenu = OptionMenu(self.containerFrame, self.selected")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(",\'"+name+"\'")\nfile.write(")\\n")\nfile.write(ind+"self.selected.trace_variable( \'w\', self.valueChanged)\\n")\nfile.write(ind+"self.optMenu.grid(row=0,column=1,sticky=W)\\n")\ncounter = 0\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   if counter == 0:\n      file.write(ind+"if self.lastSelected == \'"+name+"\':\\n")\n   else:\n      file.write(ind+"elif self.lastSelected == \'"+name+"\':\\n")\n   file.write(ind+"      self.destroyAllBut(self."+name+")\\n")\n   file.write(ind+"      self.show"+name+"(self.showParent, self.parentWindowInfo)\\n")\nfile.write(ind+"return self.containerFrame\\n\\n")\n# .........................................................\n# Generate the valueChanged method\n# .........................................................\nfile.write("   def valueChanged(self, param1, param2, param3):\\n")\ncounter = 0\nfile.write(ind+"value = self.selected.get()\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   if counter == 0:\n      file.write(ind+"if value == \'"+name+"\':\\n")\n   else:\n      file.write(ind+"elif value == \'"+name+"\':\\n")\n   file.write(ind+"   if self.lastSelected != \'"+name+"\':\\n")\n   file.write(ind+"      self.destroyAllBut(self."+name+")\\n")\n   file.write(ind+"      self.show"+name+"(self.showParent, self.parentWindowInfo)\\n")\n# .........................................................\n# Generate the destroyAllBut method\n# .........................................................\nfile.write("   def destroyAllBut(self, survivor):\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"if survivor != self."+name+":\\n")\n   file.write(ind+"   self."+name+".destroy()\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the show<name> method\n# .........................................................\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write("   def show"+name+"(self, parent, parentWindow = None):\\n")\n   file.write(ind+"if self.label and self.widget:\\n")\n   file.write(ind+"   self.label.grid_forget()\\n")\n   file.write(ind+"   self.widget.grid_forget()\\n")\n\n   if node.getClass() == "LeafType":				# Check if we should create an intermediate button or not\n      directEditing = node.Type.getValue()[4][1]\n   elif node.getClass() == "ModelType":				# Always create an intermediat button te edit models\n      directEditing = 0\n   else:							# direct editing for other composite types\n      directEditing = 1\n\n   file.write(ind+"self.label = Label(self.containerFrame, text=\'"+name+"\')\\n")\n   file.write(ind+"self.label.grid(row=1,column=0,sticky=W)\\n")\n\n   if directEditing:\n      file.write(ind+"self.widget = self."+name+".show(self.containerFrame, self.parentWindowInfo)\\n")\n      file.write(ind+"self.widget.grid(row=1,column=1,sticky=W)\\n")\n   else:\n      file.write(ind+"Button( self.containerFrame, text = \'edit\', ")\n      if node.getClass() == "ModelType":\n         file.write("command =  lambda x=self : ATOM3TypeDialog(x.containerFrame, x."+name+", ATOM3TypeDialog.OPEN))")\n      else:\n         file.write("command =  lambda x=self : ATOM3TypeDialog(x.containerFrame, x."+name+"))")\n      file.write(".grid(row=1,column=1,sticky=W)\\n")\n    \n   file.write(ind+"self.lastSelected = \'"+name+"\'\\n")\n   file.write("\\n")\n# .........................................................\n# Generate the toString method\n# .........................................................\nfile.write("   def toString(self, fils = 25, cols = 5):\\n")\nfile.write(ind+"self.createComponents()\\n")\nfile.write(ind+"if self.selected:\\n")\nfile.write(ind+"   value = self.selected.get()\\n")\nfile.write(ind+"elif self.lastSelected:\\n")\nfile.write(ind+"   value = self.lastSelected\\n")   \nfile.write(ind+"else:\\n")\nfile.write(ind+"   value = None\\n")\ncounter = 0\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   if counter==0: file.write(ind+"if value == \'"+name+"\':\\n")\n   else:file.write(ind+"elif value == \'"+name+"\':\\n")\n   file.write(ind+"   return self."+name+".toString(fils, cols)\\n")\n   counter = counter + 1\nfile.write(ind+"return \'\'\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the getValue method\n# .........................................................\nfile.write("   def getValue(self):\\n")\nfile.write(ind+"self.createComponents()\\n")\nfile.write(ind+"return (")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write("self."+name+".getValue(),")\nfile.write(")\\n\\n")\n# .........................................................\n# Generate the setValue method\n# .........................................................\nfile.write("   def setValue(self, value):\\n")\nfile.write(ind+"self.createComponents()\\n")\nfile.write(ind+"if value == None:\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"   self."+name+".setNone()\\n")\nfile.write(ind+"else:\\n")\ncounter = 0\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"   self."+name+".setValue(value["+str(counter)+"])\\n")\n   counter = counter + 1\nfile.write("\\n")\n# .........................................................\n# Generate the writeConstructor2File method\n# .........................................................\nfile.write(\'   def writeConstructor2File(self, file, indent, objName="at", depth = 0, generatingCode = 0):\\n\')\nfile.write(ind+"self.createComponents()\\n")\nfile.write(ind+"file.write(indent+objName+\'= "+className+"()\\\\n\')\\n")\nfile.write(ind+"if self.lastSelected:\\n")\nfile.write(ind+"   file.write(indent+objName+\'.lastSelected= "+\'"\'+"\'+self.lastSelected+\'"+\'"\'+"\\\\n\')\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"   if self.lastSelected == \'"+name+"\' :\\n") \n   file.write(ind+"      file.write(indent+\'from "+type+" import "+type+"\\\\n\')\\n")    \n   file.write(ind+"      file.write(indent+objName+\'."+name+" = "+type+"()\\\\n\')\\n")    \nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"self."+name+".writeConstructor2File(file, indent, objName+\'."+name+"\', depth, generatingCode)\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the writeValue2File method\n# .........................................................\nfile.write(\'   def writeValue2File(self, file, indent, objName="at", depth = 0, generatingCode = 0):\\n\')\nfile.write(ind+"self.createComponents()\\n")\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"if self.lastSelected == \'"+name+"\' :\\n") \n   file.write(ind+"   file.write(indent+\'from "+type+" import "+type+"\\\\n\')\\n")    \n   file.write(ind+"   file.write(indent+objName+\'."+name+" = "+type+"()\\\\n\')\\n")    \nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+"self."+name+".writeValue2File(file, indent, objName+\'."+name+"\', depth, generatingCode)\\n")\nfile.write(ind+"if self.lastSelected:\\n")\nfile.write(ind+"   file.write(indent+objName+\'.lastSelected= "+\'"\'+"\'+self.lastSelected+\'"+\'"\'+"\\\\n\')\\n")\nfile.write("\\n")\n# .........................................................\n# Generate the clone method\n# .........................................................\nfile.write(\'   def clone(self):\\n\')\nfile.write(ind+\'"Makes an exact copy of itself"\\n\')\nfile.write(ind+\'cloneObject = \'+className+\'()\\n\')\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+\'if self.\'+name+\': cloneObject.\'+name+\' = self.\'+name+\'.clone()\\n\')\nfile.write(ind+\'cloneObject.lastSelected = self.lastSelected\\n\')\nfile.write(ind+\'return cloneObject\\n\')\n# .........................................................\n# Generate the copy method\n# ........................................................\nfile.write(\'   def copy(self, other):\\n\')\nfile.write(ind+\'"Copies the content of other into itself"\\n\')\nfile.write(ind+\'ATOM3Type.copy(self, other)\\n\')\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+\'self.\'+name+\' = other.\'+name+\'\\n\')\nfile.write(ind+\'ASGNode.copy(self,other)\\n\')\n# .........................................................\n# Generate the destroy method\n# .........................................................\nfile.write(\'   def destroy(self):\\n\')\nfile.write(ind+\'"Destroys (i.e. updates) each field"\\n\')\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element # unpack element components\n   file.write(ind+\'if self.\'+name+\': self.\'+name+\'.destroy()\\n\')\nfile.write(\'\\n\\n\')\n# .........................................................\n# Generate the invalid method\n# .........................................................\nfile.write(\'   def invalid(self):\\n\')\nfile.write(\'     "checks whether the entity is valid or not"\\n\')\nfile.write(\'     inval = 0\\n\')\nfor element in attributesInfo:					# for each element in attributesInfo...\n   name, type, valInitial, node = element                         # unpack element components\n   file.write(\'     if self.\'+name+\': inval = inval or self.\'+name+\'.invalid()\\n\')\nfile.write(\'     return inval\\n\\n\')\nfile.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'))
   lcobj0.append(cobj0)
   cobj0= GGruleEdit(None, self)
   cobj0.Name=ATOM3String('TypeGen')
   cobj0.Order=ATOM3Integer(2)
   cobj0.TimeDelay=ATOM3Integer(2)
   cobj0.SubtypesMatching=ATOM3Boolean()
   cobj0.SubtypesMatching.setValue((None, 0))
   cobj0.SubtypesMatching.config = 0

   from ASG_TypesMetaModel import *
   from ModelType import *
   from Operator import *
   from TypeName import *
   from LeafType import *

   cobj0.LHS = ASG_TypesMetaModel(self)

   self.obj39=TypeName(self)

   self.obj39.Name.setValue('')
   self.obj39.GGLabel.setValue(1)
   self.obj39.graphClass_= graph_TypeName
   if self.genGraphics:
      from graph_TypeName import *
      new_obj = graph_TypeName(207.0,272.0,self.obj39)
   else: new_obj = None
   self.obj39.graphObject_ = new_obj
   cobj0.LHS.addNode(self.obj39)
   cobj0.RHS = ASG_TypesMetaModel(self)

   self.obj41=TypeName(self)

   self.obj41.Name.setValue('typename0')
   self.obj41.GGLabel.setValue(1)
   self.obj41.graphClass_= graph_TypeName
   if self.genGraphics:
      from graph_TypeName import *
      new_obj = graph_TypeName(211.0,254.0,self.obj41)
   else: new_obj = None
   self.obj41.graphObject_ = new_obj
   self.obj410= AttrCalc()
   self.obj410.Copy=ATOM3Boolean()
   self.obj410.Copy.setValue(('Copy from LHS', 1))
   self.obj410.Copy.config = 0
   self.obj410.Specify=ATOM3Constraint()
   self.obj410.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '\n'))
   self.obj41.GGset2Any['Name']= self.obj410
   cobj0.RHS.addNode(self.obj41)
   cobj0.Condition=ATOM3Constraint()
   cobj0.Condition.setValue(('condition', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"Condition that must be satisfied for the rule to be applicable on the isograph"\n# we can have multiple matches of the rule!\nnode = self.getMatched(graphID, self.LHS.nodeWithLabel(1))\nif node.FILE_!=isograph[0].Name.toString():                # This node has been processed yet!\n   return 0\n\nself.generatedChilds = []\nfor child in node.out_connections_:			# All childs must have the FILE_ slot filled...\n   if child.FILE_:						# if this is the case, add to list\n      self.generatedChilds.append(child)\n   else:\n      return 0							# otherwise, the condition does not hold...\nreturn 1	\n\n\n\n'))
   cobj0.Action=ATOM3Constraint()
   cobj0.Action.setValue(('action', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '# compose the class name\nnode = self.getMatched(graphID, self.LHS.nodeWithLabel(1))\nclassName = node.FILE_\nchildNode = node.out_connections_[0]                       # get child node\nfileName = className+".py"\nfile = open(atom3i.codeGenDir+"/"+fileName, "w+t")			\nfile.write("from Tkinter             import *\\n")                              \nfile.write("from ATOM3Type           import *\\n")\nfile.write("from Operator            import *\\n")\nfile.write("from LeafType             import *\\n")\nfile.write("from TypeName            import *\\n")\nfile.write("from ModelType           import *\\n")\nfile.write("from ASG_TypesMetaModel import *\\n")\n# generate imports...\nfile.write("from "+childNode.FILE_+" import *\\n\\n")\n\n\nfile.write("class "+className+" ("+childNode.FILE_+"):\\n")\nfile.write("  def createTypeGraph(self, atom3i, rootNode):\\n")\nfile.write("    self.types = atom3i.types\\n")\nnode.rootNode.writeGraph2File(file, parentName="atom3i")\nfile.write("\\n")\nfile.close()\nnode.FILE_= None\n\n\n\n\n\n\n\n\n\n\n\n\n\n'))
   lcobj0.append(cobj0)
   self.EditingGraphGrammar.Rules.setValue(lcobj0)
   self.EditingGraphGrammar.InitialAction=ATOM3Constraint()
   self.EditingGraphGrammar.InitialAction.setValue(('constraint', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '# create the slot "FILE_" in each node of the graph...\nfor tip in graph.listNodes.keys():\n  for node in graph.listNodes[tip]:\n    if tip == "LeafType" :	# fill the slot, tuple (name, type)\n      node.FILE_ = ( node.Type.getValue()[0] ,\'ATOM3\'+node.Type.getValue()[1])\n    elif tip == "TypeName":\n      node.FILE_ = node.Name.toString()\n    elif tip == "ModelType":\n      node.FILE_ = "ASG_"+node.MetaModelName.toString()\n    else:\n      node.FILE_ = None\n\n'))
   self.EditingGraphGrammar.FinalAction=ATOM3Constraint()
   self.EditingGraphGrammar.FinalAction.setValue(('const', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'for tip in graph.listNodes.keys():\n  for node in graph.listNodes[tip]:\n    del node.FILE_\n\n'))


