# __ File: stickylink.py ______________________________________________________________________________________________
#  Implements  : class stickylink
#  Author      : Juan de Lara
#  Description : Type generated by ATOM3 for joints.
#  Modified    : 26 Oct 2001
#   - 15 Jan 2002: the invalid() function was missing!
# ____________________________________________________________________________________________________________________
from Tkinter         import *
from ATOM3Type       import *
from ATOM3Boolean    import *
from ATOM3Integer    import *
from ATOM3Integer    import *
from ATOM3Integer    import *
from ATOM3Appearance import *

class stickylink (ATOM3Type):
   def __init__(self):
      ATOM3Type.__init__(self)
      self.arrow= None
      self.arrowShape1= None
      self.arrowShape2= None
      self.arrowShape3= None
      self.decoration= None

   def createComponents(self):
      if not self.arrow:
         self.arrow=ATOM3Boolean()
         self.arrow.setValue((' ', 0))
         self.arrow.config = 0
      if not self.arrowShape1:
         self.arrowShape1=ATOM3Integer(0)
      if not self.arrowShape2:
         self.arrowShape2=ATOM3Integer(0)
      if not self.arrowShape3:
         self.arrowShape3=ATOM3Integer(0)
      if not self.decoration:
         self.decoration=ATOM3Appearance()
         self.decoration.setValue( ('class0', self))

   def show(self, parent, parentWindowInfo=None):
      self.createComponents()
      ATOM3Type.show(self, parent, parentWindowInfo)
      self.containerFrame = Frame(parent)
      Label(self.containerFrame, text='arrow').grid(row=0,column=0,sticky=W)
      self.arrow.show(self.containerFrame, parentWindowInfo).grid(row=0,column=1,sticky=W)
      Label(self.containerFrame, text='arrowShape (base to tip)').grid(row=1,column=0,sticky=W)
      self.arrowShape1.show(self.containerFrame, parentWindowInfo).grid(row=1,column=1,sticky=W)
      Label(self.containerFrame, text='arrowShape (wing to tip)').grid(row=2,column=0,sticky=W)
      self.arrowShape2.show(self.containerFrame, parentWindowInfo).grid(row=2,column=1,sticky=W)
      Label(self.containerFrame, text='arrowShape (wing to base)').grid(row=3,column=0,sticky=W)
      self.arrowShape3.show(self.containerFrame, parentWindowInfo).grid(row=3,column=1,sticky=W)
      Label(self.containerFrame, text='decoration').grid(row=4,column=0,sticky=W)
      self.decoration.show(self.containerFrame, parentWindowInfo).grid(row=4,column=1,sticky=W)
         
      # Arrow Preview Added by Denis 2005
      dc = Canvas(self.containerFrame,width=200, height=60, bg='light blue')
      itemHandler = dc.create_line(0,30,180,30,arrow='last', width=2,
                                   arrowshape=(   self.arrowShape1.getValue(),
                                                  self.arrowShape2.getValue(),
                                                  self.arrowShape3.getValue()))
      dc.grid( row=6,column=0,columnspan=2,sticky=W)
      
      def handler( dc=dc,itemHandler=itemHandler, event=None):         
        dc.itemconfigure(itemHandler, arrowshape=(self.arrowShape1.getValue(),
                                                  self.arrowShape2.getValue(),
                                                  self.arrowShape3.getValue()))
      self.previewButton = Button( self.containerFrame, bg='dark blue',
                                  fg='white', relief='groove',
                                  text='Refresh Arrow Preview', 
                                  command=handler)
      self.previewButton.grid(row=5,column=0,columnspan=2,sticky=W)
            
      return self.containerFrame

   def toString(self):
      self.createComponents()
      return  self.arrow.toString()+' '+ self.arrowShape1.toString()+' '+ self.arrowShape2.toString()+' '+ self.arrowShape3.toString()+' '+ self.decoration.toString()
   def getValue(self):
      self.createComponents()
      return (self.arrow.getValue(),self.arrowShape1.getValue(),self.arrowShape2.getValue(),self.arrowShape3.getValue(),self.decoration.getValue(),)

   def setValue(self, value):
      self.createComponents()
      if value == None:
         self.arrow.setNone()
         self.arrowShape1.setNone()
         self.arrowShape2.setNone()
         self.arrowShape3.setNone()
         self.decoration.setNone()
      else:
         self.arrow.setValue(value[0])
         self.arrowShape1.setValue(value[1])
         self.arrowShape2.setValue(value[2])
         self.arrowShape3.setValue(value[3])
         self.decoration.setValue(value[4])

   def writeConstructor2File(self, file, indent, objName="at", depth = 0, generatingCode = 0):
      self.createComponents()
      file.write(indent+objName+'= stickylink()\n')
      self.arrow.writeConstructor2File(file, indent, objName+'.arrow', depth, generatingCode)
      self.arrowShape1.writeConstructor2File(file, indent, objName+'.arrowShape1', depth, generatingCode)
      self.arrowShape2.writeConstructor2File(file, indent, objName+'.arrowShape2', depth, generatingCode)
      self.arrowShape3.writeConstructor2File(file, indent, objName+'.arrowShape3', depth, generatingCode)
      self.decoration.writeConstructor2File(file, indent, objName+'.decoration', depth, generatingCode)

   def writeValue2File(self, file, indent, objName="at", depth = 0, generatingCode = 0):
      self.createComponents()
      self.arrow.writeValue2File(file, indent, objName+'.arrow', depth, generatingCode)
      self.arrowShape1.writeValue2File(file, indent, objName+'.arrowShape1', depth, generatingCode)
      self.arrowShape2.writeValue2File(file, indent, objName+'.arrowShape2', depth, generatingCode)
      self.arrowShape3.writeValue2File(file, indent, objName+'.arrowShape3', depth, generatingCode)
      self.decoration.writeValue2File(file, indent, objName+'.decoration', depth, generatingCode)

   def clone(self):
     "Makes an exact copy of itself"
     cloneObject = stickylink()
     if self.arrow: cloneObject.arrow = self.arrow.clone()
     if self.arrowShape1: cloneObject.arrowShape1 = self.arrowShape1.clone()
     if self.arrowShape2: cloneObject.arrowShape2 = self.arrowShape2.clone()
     if self.arrowShape3: cloneObject.arrowShape3 = self.arrowShape3.clone()
     if self.decoration: cloneObject.decoration = self.decoration.clone()
     return cloneObject

   def copy(self, other):
      ATOM3Type.copy(self, other)
      self.arrow = other.arrow
      self.arrowShape1 = other.arrowShape1
      self.arrowShape2 = other.arrowShape2
      self.arrowShape3 = other.arrowShape3
      self.decoration  = other.decoration

   def destroy(self):
     "Destroys (i.e. updates) each field"
     if self.arrow: self.arrow.destroy()
     if self.arrowShape1: self.arrowShape1.destroy()
     if self.arrowShape2: self.arrowShape2.destroy()
     if self.arrowShape3: self.arrowShape3.destroy()
     if self.decoration: self.decoration.destroy()

   def invalid(self):
     # modified 15 - Jan - 2002
     return self.arrowShape1.invalid() or self.arrowShape2.invalid() or self.arrowShape3.invalid() or self.decoration.invalid()


