"""
__LSMASOMM_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: bogdan
Modified: Wed Nov 16 13:33:48 2016
______________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from CD_Class3 import *
from CD_Association3 import *
from CD_Inheritance3 import *
from graph_CD_Association3 import *
from graph_CD_Class3 import *
from graph_CD_Inheritance3 import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def LSMASOMM_MDL(self, rootNode, CD_ClassDiagramsV3RootNode=None):

    # --- Generating attributes code for ASG CD_ClassDiagramsV3 ---
    if( CD_ClassDiagramsV3RootNode ): 
        # name
        CD_ClassDiagramsV3RootNode.name.setValue('LSMASOMM')

        # author
        CD_ClassDiagramsV3RootNode.author.setValue('Bogdan')

        # showCardinalities
        CD_ClassDiagramsV3RootNode.showCardinalities.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showCardinalities.config = 0

        # showAssociationBox
        CD_ClassDiagramsV3RootNode.showAssociationBox.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAssociationBox.config = 0

        # description
        CD_ClassDiagramsV3RootNode.description.setValue('\n')
        CD_ClassDiagramsV3RootNode.description.setHeight(15)

        # showAttributes
        CD_ClassDiagramsV3RootNode.showAttributes.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAttributes.config = 0

        # showActions
        CD_ClassDiagramsV3RootNode.showActions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showActions.config = 0

        # showConditions
        CD_ClassDiagramsV3RootNode.showConditions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showConditions.config = 0

        # attributes
        CD_ClassDiagramsV3RootNode.attributes.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('name', 'String', None, ('Key', 1), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('author', 'String', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('Annonymous', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3Text('\n', 60,15 )
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        CD_ClassDiagramsV3RootNode.attributes.setValue(lcobj1)

        # constraints
        CD_ClassDiagramsV3RootNode.constraints.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        CD_ClassDiagramsV3RootNode.constraints.setValue(lcobj1)
    # --- ASG attributes over ---


    self.obj76=CD_Class3(self)
    self.obj76.isGraphObjectVisual = True

    if(hasattr(self.obj76, '_setHierarchicalLink')):
      self.obj76._setHierarchicalLink(False)

    # QOCA
    self.obj76.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj76.Graphical_Appearance.setValue( ('OrgUnit', self.obj76))

    # name
    self.obj76.name.setValue('OrgUnit')

    # attributes
    self.obj76.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Individual', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue((None, 1))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('UnitActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj3=ATOM3String('ChangeRole', 20)
    lcobj3.append(cobj3)
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('UnitSize', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('Individual', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('orgUnitName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj76.attributes.setValue(lcobj2)

    # Abstract
    self.obj76.Abstract.setValue((None, 0))
    self.obj76.Abstract.config = 0

    # cardinality
    self.obj76.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj76.cardinality.setValue(lcobj2)

    # display
    self.obj76.display.setValue('Attributes:\n  - ID :: String\n  - Individual :: Boolean\n  - UnitActions :: List\n  - UnitSize :: String\n  - name :: String\nConstraints:\n  > ConstraintOutputOrgUnit\nActions:\n  > determineSize\n  > setNodeID\nMultiplicities:\n  - To isPartOfOrgUnit: 0 to N\n  - From isPartOfOrgUnit: 0 to N\n  - To canHaveRole: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To answersToOrgUnit: 0 to N\n  - From answersToOrgUnit: 0 to N\n')
    self.obj76.display.setHeight(15)

    # Actions
    self.obj76.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('determineSize', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitDetermineSize(self)\nself.UnitSize.setValue(res)\nself.graphObject_.ModifyAttribute(\'UnitSize\', res)\n\n'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Action()
    cobj2.setValue(('setNodeID', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\n\nres = setNodeID(self)\nself.graphObject_.ModifyAttribute(\'ID\', res)\n'))
    lcobj2.append(cobj2)
    self.obj76.Actions.setValue(lcobj2)

    # Constraints
    self.obj76.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintOutputOrgUnit', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitCheckOutputs(self)\nif res is "manyKnArts":\n    return ("OrgUnit can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj76.Constraints.setValue(lcobj2)

    self.obj76.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1240.0,220.0,self.obj76)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.88
       new_obj.layConstraints['scale'] = [1.11015625, 3.098360655737705]
    else: new_obj = None
    self.obj76.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj76)
    self.globalAndLocalPostcondition(self.obj76, rootNode)
    self.obj76.postAction( rootNode.CREATE )

    self.obj77=CD_Class3(self)
    self.obj77.isGraphObjectVisual = True

    if(hasattr(self.obj77, '_setHierarchicalLink')):
      self.obj77._setHierarchicalLink(False)

    # QOCA
    self.obj77.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj77.Graphical_Appearance.setValue( ('Role', self.obj77))

    # name
    self.obj77.name.setValue('Role')

    # attributes
    self.obj77.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('RoleID', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('isMetaRole', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue((None, 0))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('role name', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('roleActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj3=ATOM3String('RoleAction1', 20)
    lcobj3.append(cobj3)
    cobj3=ATOM3String('RoleAction2', 20)
    lcobj3.append(cobj3)
    cobj3=ATOM3String('RoleActionN', 20)
    lcobj3.append(cobj3)
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj77.attributes.setValue(lcobj2)

    # Abstract
    self.obj77.Abstract.setValue((None, 0))
    self.obj77.Abstract.config = 0

    # cardinality
    self.obj77.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj77.cardinality.setValue(lcobj2)

    # display
    self.obj77.display.setValue('Attributes:\n  - ID :: String\n  - isMetaRole :: Boolean\n  - name :: String\n  - roleActions :: List\nConstraints:\n  > RoleConstraintKnArt\nActions:\n  > checkMetaRole\n  > setNodeID\nMultiplicities:\n  - From canHaveRole: 0 to N\n  - To hasActions: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To hasObjective: 0 to N\n  - To genericAssociation: 0 to N\n  - From genericAssociation: 0 to N\n  - To answersToRole: 0 to N\n  - From answersToRole: 0 to N\n  - To canStartProcess: 0 to N\n  - To isPartOfRole: 0 to N\n  - From isPartOfRole: 0 to N\n')
    self.obj77.display.setHeight(15)

    # Actions
    self.obj77.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('checkMetaRole', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0]), 'from CustomCode import RoleHierarchy\nres = RoleHierarchy(self)\nself.isMetaRole.setValue((\'isMetaRole\',res))\nself.graphObject_.ModifyAttribute(\'isMetaRole\', res)\n\n'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Action()
    cobj2.setValue(('setNodeID', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\n\nres = setNodeID(self)\nself.graphObject_.ModifyAttribute(\'ID\', res)\n\n'))
    lcobj2.append(cobj2)
    self.obj77.Actions.setValue(lcobj2)

    # Constraints
    self.obj77.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('RoleConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), '\nfrom CustomCode import *\n\nres = RoleCheckOutputs(self)\nif res is "manyKnArts":\n    return ("Roles can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelif res is "IndivKnArtError":\n    return ("Roles can have OrganizationalKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj77.Constraints.setValue(lcobj2)

    self.obj77.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(620.0,260.0,self.obj77)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.85
       new_obj.layConstraints['scale'] = [1.115625, 3.7868852459016393]
    else: new_obj = None
    self.obj77.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj77)
    self.globalAndLocalPostcondition(self.obj77, rootNode)
    self.obj77.postAction( rootNode.CREATE )

    self.obj78=CD_Class3(self)
    self.obj78.isGraphObjectVisual = True

    if(hasattr(self.obj78, '_setHierarchicalLink')):
      self.obj78._setHierarchicalLink(False)

    # QOCA
    self.obj78.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj78.Graphical_Appearance.setValue( ('Action', self.obj78))

    # name
    self.obj78.name.setValue('Action')

    # attributes
    self.obj78.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ActionCode', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#action code placeholder or description\n#\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('ActionName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj78.attributes.setValue(lcobj2)

    # Abstract
    self.obj78.Abstract.setValue((None, 0))
    self.obj78.Abstract.config = 0

    # cardinality
    self.obj78.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj78.cardinality.setValue(lcobj2)

    # display
    self.obj78.display.setValue('Attributes:\n  - ActionCode :: Text\n  - name :: String\nMultiplicities:\n  - From hasActions: 0 to N\n')
    self.obj78.display.setHeight(15)

    # Actions
    self.obj78.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj78.Actions.setValue(lcobj2)

    # Constraints
    self.obj78.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj78.Constraints.setValue(lcobj2)

    self.obj78.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(740.0,820.0,self.obj78)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 1.06
       new_obj.layConstraints['scale'] = [1.02265625, 1.0454545454545454]
    else: new_obj = None
    self.obj78.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj78)
    self.globalAndLocalPostcondition(self.obj78, rootNode)
    self.obj78.postAction( rootNode.CREATE )

    self.obj79=CD_Class3(self)
    self.obj79.isGraphObjectVisual = True

    if(hasattr(self.obj79, '_setHierarchicalLink')):
      self.obj79._setHierarchicalLink(False)

    # QOCA
    self.obj79.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj79.Graphical_Appearance.setValue( ('KnowledgeArtifacts', self.obj79))

    # name
    self.obj79.name.setValue('KnowledgeArtifacts')

    # attributes
    self.obj79.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj79.attributes.setValue(lcobj2)

    # Abstract
    self.obj79.Abstract.setValue((None, 1))
    self.obj79.Abstract.config = 0

    # cardinality
    self.obj79.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj79.cardinality.setValue(lcobj2)

    # display
    self.obj79.display.setValue('Attributes:\n  - ID :: String\n  - description :: String\n  - name :: String\nActions:\n  > setNodeID\n')
    self.obj79.display.setHeight(15)

    # Actions
    self.obj79.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('setNodeID', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\n\nres = setNodeID(self)\nself.graphObject_.ModifyAttribute(\'ID\', res)\n'))
    lcobj2.append(cobj2)
    self.obj79.Actions.setValue(lcobj2)

    # Constraints
    self.obj79.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj79.Constraints.setValue(lcobj2)

    self.obj79.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(980.0,1080.0,self.obj79)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.239344262295082]
    else: new_obj = None
    self.obj79.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj79)
    self.globalAndLocalPostcondition(self.obj79, rootNode)
    self.obj79.postAction( rootNode.CREATE )

    self.obj80=CD_Class3(self)
    self.obj80.isGraphObjectVisual = True

    if(hasattr(self.obj80, '_setHierarchicalLink')):
      self.obj80._setHierarchicalLink(False)

    # QOCA
    self.obj80.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj80.Graphical_Appearance.setValue( ('OrganisationalKnArt', self.obj80))

    # name
    self.obj80.name.setValue('OrganisationalKnArt')

    # attributes
    self.obj80.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj80.attributes.setValue(lcobj2)

    # Abstract
    self.obj80.Abstract.setValue((None, 0))
    self.obj80.Abstract.config = 0

    # cardinality
    self.obj80.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj80.cardinality.setValue(lcobj2)

    # display
    self.obj80.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj80.display.setHeight(15)

    # Actions
    self.obj80.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj80.Actions.setValue(lcobj2)

    # Constraints
    self.obj80.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj80.Constraints.setValue(lcobj2)

    self.obj80.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(700.0,1080.0,self.obj80)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj80.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj80)
    self.globalAndLocalPostcondition(self.obj80, rootNode)
    self.obj80.postAction( rootNode.CREATE )

    self.obj81=CD_Class3(self)
    self.obj81.isGraphObjectVisual = True

    if(hasattr(self.obj81, '_setHierarchicalLink')):
      self.obj81._setHierarchicalLink(False)

    # QOCA
    self.obj81.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj81.Graphical_Appearance.setValue( ('IndividualKnArt', self.obj81))

    # name
    self.obj81.name.setValue('IndividualKnArt')

    # attributes
    self.obj81.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj81.attributes.setValue(lcobj2)

    # Abstract
    self.obj81.Abstract.setValue((None, 0))
    self.obj81.Abstract.config = 0

    # cardinality
    self.obj81.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj81.cardinality.setValue(lcobj2)

    # display
    self.obj81.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj81.display.setHeight(15)

    # Actions
    self.obj81.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj81.Actions.setValue(lcobj2)

    # Constraints
    self.obj81.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj81.Constraints.setValue(lcobj2)

    self.obj81.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1240.0,1060.0,self.obj81)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj81.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj81)
    self.globalAndLocalPostcondition(self.obj81, rootNode)
    self.obj81.postAction( rootNode.CREATE )

    self.obj82=CD_Class3(self)
    self.obj82.isGraphObjectVisual = True

    if(hasattr(self.obj82, '_setHierarchicalLink')):
      self.obj82._setHierarchicalLink(False)

    # QOCA
    self.obj82.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj82.Graphical_Appearance.setValue( ('Strategy', self.obj82))

    # name
    self.obj82.name.setValue('Strategy')

    # attributes
    self.obj82.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('STR', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj82.attributes.setValue(lcobj2)

    # Abstract
    self.obj82.Abstract.setValue((None, 1))
    self.obj82.Abstract.config = 0

    # cardinality
    self.obj82.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj82.cardinality.setValue(lcobj2)

    # display
    self.obj82.display.setValue('Attributes:\n  - ID :: String\n  - description :: Text\n  - name :: String\nActions:\n  > setNodeID\n')
    self.obj82.display.setHeight(15)

    # Actions
    self.obj82.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('setNodeID', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\n\nres = setNodeID(self)\nself.graphObject_.ModifyAttribute(\'ID\', res)\n'))
    lcobj2.append(cobj2)
    self.obj82.Actions.setValue(lcobj2)

    # Constraints
    self.obj82.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj82.Constraints.setValue(lcobj2)

    self.obj82.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(40.0,340.0,self.obj82)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.239344262295082]
    else: new_obj = None
    self.obj82.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj82)
    self.globalAndLocalPostcondition(self.obj82, rootNode)
    self.obj82.postAction( rootNode.CREATE )

    self.obj83=CD_Class3(self)
    self.obj83.isGraphObjectVisual = True

    if(hasattr(self.obj83, '_setHierarchicalLink')):
      self.obj83._setHierarchicalLink(False)

    # QOCA
    self.obj83.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj83.Graphical_Appearance.setValue( ('Objective', self.obj83))

    # name
    self.obj83.name.setValue('Objective')

    # attributes
    self.obj83.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('STR', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Measurement', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Reward', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj83.attributes.setValue(lcobj2)

    # Abstract
    self.obj83.Abstract.setValue((None, 0))
    self.obj83.Abstract.config = 0

    # cardinality
    self.obj83.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj83.cardinality.setValue(lcobj2)

    # display
    self.obj83.display.setValue('Attributes:\n  - Measurement :: Text\n  - Reward :: Text\nMultiplicities:\n  - To isPartOfObjective: 0 to N\n  - From isPartOfObjective: 0 to N\n  - From hasObjective: 0 to N\n')
    self.obj83.display.setHeight(15)

    # Actions
    self.obj83.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj83.Actions.setValue(lcobj2)

    # Constraints
    self.obj83.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj83.Constraints.setValue(lcobj2)

    self.obj83.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(40.0,600.0,self.obj83)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.26875, 1.4459016393442625]
    else: new_obj = None
    self.obj83.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj83)
    self.globalAndLocalPostcondition(self.obj83, rootNode)
    self.obj83.postAction( rootNode.CREATE )

    self.obj84=CD_Class3(self)
    self.obj84.isGraphObjectVisual = True

    if(hasattr(self.obj84, '_setHierarchicalLink')):
      self.obj84._setHierarchicalLink(False)

    # QOCA
    self.obj84.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj84.Graphical_Appearance.setValue( ('Process', self.obj84))

    # name
    self.obj84.name.setValue('Process')

    # attributes
    self.obj84.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Activities', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,10 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('STR', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj84.attributes.setValue(lcobj2)

    # Abstract
    self.obj84.Abstract.setValue((None, 0))
    self.obj84.Abstract.config = 0

    # cardinality
    self.obj84.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj84.cardinality.setValue(lcobj2)

    # display
    self.obj84.display.setValue('Attributes:\n  - Activities :: Text\nMultiplicities:\n  - From canStartProcess: 0 to N\n  - To hasObjective: 0 to N\n')
    self.obj84.display.setHeight(15)

    # Actions
    self.obj84.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj84.Actions.setValue(lcobj2)

    # Constraints
    self.obj84.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj84.Constraints.setValue(lcobj2)

    self.obj84.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(280.0,80.0,self.obj84)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.23046875, 1.0454545454545454]
    else: new_obj = None
    self.obj84.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj84)
    self.globalAndLocalPostcondition(self.obj84, rootNode)
    self.obj84.postAction( rootNode.CREATE )

    self.obj85=CD_Association3(self)
    self.obj85.isGraphObjectVisual = True

    if(hasattr(self.obj85, '_setHierarchicalLink')):
      self.obj85._setHierarchicalLink(True)

    # QOCA
    self.obj85.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj85.Graphical_Appearance.setValue( ('isPartOfOrgUnit', self.obj85))
    self.obj85.Graphical_Appearance.linkInfo=linkEditor(self,self.obj85.Graphical_Appearance.semObject, "isPartOfOrgUnit")
    self.obj85.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfOrgUnit_1stLink', self.obj85.Graphical_Appearance.linkInfo.FirstLink))
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfOrgUnit_1stSegment', self.obj85.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj85.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj85.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfOrgUnit_Center', self.obj85.Graphical_Appearance.linkInfo))
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfOrgUnit_2ndSegment', self.obj85.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj85.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfOrgUnit_2ndLink', self.obj85.Graphical_Appearance.linkInfo.SecondLink))
    self.obj85.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj85.Graphical_Appearance.semObject
    self.obj85.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj85.Graphical_Appearance.semObject
    self.obj85.Graphical_Appearance.linkInfo.Center.semObject=self.obj85.Graphical_Appearance.semObject
    self.obj85.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj85.Graphical_Appearance.semObject
    self.obj85.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj85.Graphical_Appearance.semObject

    # name
    self.obj85.name.setValue('isPartOfOrgUnit')

    # displaySelect
    self.obj85.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj85.displaySelect.config = 0

    # attributes
    self.obj85.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj85.attributes.setValue(lcobj2)

    # cardinality
    self.obj85.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj85.cardinality.setValue(lcobj2)

    # display
    self.obj85.display.setValue('Multiplicities:\n  - From OrgUnit: 1 to N\n  - To OrgUnit: 1 to N\n')
    self.obj85.display.setHeight(15)

    # Actions
    self.obj85.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj85.Actions.setValue(lcobj2)

    # Constraints
    self.obj85.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj85.Constraints.setValue(lcobj2)

    self.obj85.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1387.9955984,65.809726225,self.obj85)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj85.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj85)
    self.globalAndLocalPostcondition(self.obj85, rootNode)
    self.obj85.postAction( rootNode.CREATE )

    self.obj86=CD_Association3(self)
    self.obj86.isGraphObjectVisual = True

    if(hasattr(self.obj86, '_setHierarchicalLink')):
      self.obj86._setHierarchicalLink(True)

    # QOCA
    self.obj86.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj86.Graphical_Appearance.setValue( ('canHaveRole', self.obj86))
    self.obj86.Graphical_Appearance.linkInfo=linkEditor(self,self.obj86.Graphical_Appearance.semObject, "canHaveRole")
    self.obj86.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canHaveRole_1stLink', self.obj86.Graphical_Appearance.linkInfo.FirstLink))
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canHaveRole_1stSegment', self.obj86.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj86.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj86.Graphical_Appearance.linkInfo.Center.setValue( ('canHaveRole_Center', self.obj86.Graphical_Appearance.linkInfo))
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canHaveRole_2ndSegment', self.obj86.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj86.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canHaveRole_2ndLink', self.obj86.Graphical_Appearance.linkInfo.SecondLink))
    self.obj86.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj86.Graphical_Appearance.semObject
    self.obj86.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj86.Graphical_Appearance.semObject
    self.obj86.Graphical_Appearance.linkInfo.Center.semObject=self.obj86.Graphical_Appearance.semObject
    self.obj86.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj86.Graphical_Appearance.semObject
    self.obj86.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj86.Graphical_Appearance.semObject

    # name
    self.obj86.name.setValue('canHaveRole')

    # displaySelect
    self.obj86.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj86.displaySelect.config = 0

    # attributes
    self.obj86.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj86.attributes.setValue(lcobj2)

    # cardinality
    self.obj86.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj86.cardinality.setValue(lcobj2)

    # display
    self.obj86.display.setValue('Multiplicities:\n  - From OrgUnit: 0 to N\n  - To Role: 0 to N\n')
    self.obj86.display.setHeight(15)

    # Actions
    self.obj86.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj86.Actions.setValue(lcobj2)

    # Constraints
    self.obj86.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj86.Constraints.setValue(lcobj2)

    self.obj86.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(971.7601868,527.680947659,self.obj86)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj86.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj86)
    self.globalAndLocalPostcondition(self.obj86, rootNode)
    self.obj86.postAction( rootNode.CREATE )

    self.obj87=CD_Association3(self)
    self.obj87.isGraphObjectVisual = True

    if(hasattr(self.obj87, '_setHierarchicalLink')):
      self.obj87._setHierarchicalLink(False)

    # QOCA
    self.obj87.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj87.Graphical_Appearance.setValue( ('hasActions', self.obj87))
    self.obj87.Graphical_Appearance.linkInfo=linkEditor(self,self.obj87.Graphical_Appearance.semObject, "hasActions")
    self.obj87.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasActions_1stLink', self.obj87.Graphical_Appearance.linkInfo.FirstLink))
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasActions_1stSegment', self.obj87.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj87.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj87.Graphical_Appearance.linkInfo.Center.setValue( ('hasActions_Center', self.obj87.Graphical_Appearance.linkInfo))
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasActions_2ndSegment', self.obj87.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj87.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasActions_2ndLink', self.obj87.Graphical_Appearance.linkInfo.SecondLink))
    self.obj87.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj87.Graphical_Appearance.semObject
    self.obj87.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj87.Graphical_Appearance.semObject
    self.obj87.Graphical_Appearance.linkInfo.Center.semObject=self.obj87.Graphical_Appearance.semObject
    self.obj87.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj87.Graphical_Appearance.semObject
    self.obj87.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj87.Graphical_Appearance.semObject

    # name
    self.obj87.name.setValue('hasActions')

    # displaySelect
    self.obj87.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj87.displaySelect.config = 0

    # attributes
    self.obj87.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj87.attributes.setValue(lcobj2)

    # cardinality
    self.obj87.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Action', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', '1'))
    lcobj2.append(cobj2)
    self.obj87.cardinality.setValue(lcobj2)

    # display
    self.obj87.display.setValue('Multiplicities:\n  - To Action: 1 to N\n  - From Role: 1 to 1\n')
    self.obj87.display.setHeight(15)

    # Actions
    self.obj87.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj87.Actions.setValue(lcobj2)

    # Constraints
    self.obj87.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj87.Constraints.setValue(lcobj2)

    self.obj87.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(503.161248615,952.001803815,self.obj87)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj87.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj87)
    self.globalAndLocalPostcondition(self.obj87, rootNode)
    self.obj87.postAction( rootNode.CREATE )

    self.obj88=CD_Association3(self)
    self.obj88.isGraphObjectVisual = True

    if(hasattr(self.obj88, '_setHierarchicalLink')):
      self.obj88._setHierarchicalLink(False)

    # QOCA
    self.obj88.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj88.Graphical_Appearance.setValue( ('canAccessKnArt', self.obj88))
    self.obj88.Graphical_Appearance.linkInfo=linkEditor(self,self.obj88.Graphical_Appearance.semObject, "canAccessKnArt")
    self.obj88.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canAccessKnArt_1stLink', self.obj88.Graphical_Appearance.linkInfo.FirstLink))
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canAccessKnArt_1stSegment', self.obj88.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj88.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj88.Graphical_Appearance.linkInfo.Center.setValue( ('canAccessKnArt_Center', self.obj88.Graphical_Appearance.linkInfo))
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canAccessKnArt_2ndSegment', self.obj88.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj88.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canAccessKnArt_2ndLink', self.obj88.Graphical_Appearance.linkInfo.SecondLink))
    self.obj88.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj88.Graphical_Appearance.semObject
    self.obj88.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj88.Graphical_Appearance.semObject
    self.obj88.Graphical_Appearance.linkInfo.Center.semObject=self.obj88.Graphical_Appearance.semObject
    self.obj88.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj88.Graphical_Appearance.semObject
    self.obj88.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj88.Graphical_Appearance.semObject

    # name
    self.obj88.name.setValue('canAccessKnArt')

    # displaySelect
    self.obj88.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj88.displaySelect.config = 0

    # attributes
    self.obj88.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj88.attributes.setValue(lcobj2)

    # cardinality
    self.obj88.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrganisationalKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('IndividualKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj88.cardinality.setValue(lcobj2)

    # display
    self.obj88.display.setValue('Constraints:\n  > ConstraintKnArt\nMultiplicities:\n  - To OrganisationalKnArt: 0 to N\n  - From Role: 0 to N\n  - From OrgUnit: 0 to N\n  - To IndividualKnArt: 0 to N\n')
    self.obj88.display.setHeight(15)

    # Actions
    self.obj88.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj88.Actions.setValue(lcobj2)

    # Constraints
    self.obj88.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = canAccessKnArtCheckConnections(self)\n\nif res is "eitherRoleOrUnit":\n    return ("Either Role of OrgUnit can access knowledge.", self.graphObject_)\nelif res is "onlyOneInput":\n    return ("Only one Role or OrgUnit can access one knowledge medium.", self.graphObject_)\nelif res is "RoleWithOrgOnly":\n    return ("Role can access OrganisationalKnArt only!", self.graphObject_)\nelif res is "OrgUnitWithIndivOnly":\n    return ("OrgUnit can access IndividualKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj88.Constraints.setValue(lcobj2)

    self.obj88.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1106.462784,821.548234957,self.obj88)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.6380000000000001, 1.8967741935483875]
    else: new_obj = None
    self.obj88.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj88)
    self.globalAndLocalPostcondition(self.obj88, rootNode)
    self.obj88.postAction( rootNode.CREATE )

    self.obj89=CD_Association3(self)
    self.obj89.isGraphObjectVisual = True

    if(hasattr(self.obj89, '_setHierarchicalLink')):
      self.obj89._setHierarchicalLink(True)

    # QOCA
    self.obj89.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj89.Graphical_Appearance.setValue( ('isPartOfObjective', self.obj89))
    self.obj89.Graphical_Appearance.linkInfo=linkEditor(self,self.obj89.Graphical_Appearance.semObject, "isPartOfObjective")
    self.obj89.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfObjective_1stLink', self.obj89.Graphical_Appearance.linkInfo.FirstLink))
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfObjective_1stSegment', self.obj89.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj89.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj89.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfObjective_Center', self.obj89.Graphical_Appearance.linkInfo))
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfObjective_2ndSegment', self.obj89.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj89.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfObjective_2ndLink', self.obj89.Graphical_Appearance.linkInfo.SecondLink))
    self.obj89.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj89.Graphical_Appearance.semObject
    self.obj89.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj89.Graphical_Appearance.semObject
    self.obj89.Graphical_Appearance.linkInfo.Center.semObject=self.obj89.Graphical_Appearance.semObject
    self.obj89.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj89.Graphical_Appearance.semObject
    self.obj89.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj89.Graphical_Appearance.semObject

    # name
    self.obj89.name.setValue('isPartOfObjective')

    # displaySelect
    self.obj89.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj89.displaySelect.config = 0

    # attributes
    self.obj89.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj89.attributes.setValue(lcobj2)

    # cardinality
    self.obj89.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj89.cardinality.setValue(lcobj2)

    # display
    self.obj89.display.setValue('Multiplicities:\n  - From Objective: 0 to N\n  - To Objective: 0 to N\n')
    self.obj89.display.setHeight(15)

    # Actions
    self.obj89.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj89.Actions.setValue(lcobj2)

    # Constraints
    self.obj89.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj89.Constraints.setValue(lcobj2)

    self.obj89.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(131.944046519,946.91223085,self.obj89)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.225, 1.0]
    else: new_obj = None
    self.obj89.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj89)
    self.globalAndLocalPostcondition(self.obj89, rootNode)
    self.obj89.postAction( rootNode.CREATE )

    self.obj90=CD_Association3(self)
    self.obj90.isGraphObjectVisual = True

    if(hasattr(self.obj90, '_setHierarchicalLink')):
      self.obj90._setHierarchicalLink(False)

    # QOCA
    self.obj90.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj90.Graphical_Appearance.setValue( ('hasObjective', self.obj90))
    self.obj90.Graphical_Appearance.linkInfo=linkEditor(self,self.obj90.Graphical_Appearance.semObject, "hasObjective")
    self.obj90.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasObjective_1stLink', self.obj90.Graphical_Appearance.linkInfo.FirstLink))
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasObjective_1stSegment', self.obj90.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj90.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj90.Graphical_Appearance.linkInfo.Center.setValue( ('hasObjective_Center', self.obj90.Graphical_Appearance.linkInfo))
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasObjective_2ndSegment', self.obj90.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj90.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasObjective_2ndLink', self.obj90.Graphical_Appearance.linkInfo.SecondLink))
    self.obj90.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj90.Graphical_Appearance.semObject
    self.obj90.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj90.Graphical_Appearance.semObject
    self.obj90.Graphical_Appearance.linkInfo.Center.semObject=self.obj90.Graphical_Appearance.semObject
    self.obj90.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj90.Graphical_Appearance.semObject
    self.obj90.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj90.Graphical_Appearance.semObject

    # name
    self.obj90.name.setValue('hasObjective')

    # displaySelect
    self.obj90.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj90.displaySelect.config = 0

    # attributes
    self.obj90.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj90.attributes.setValue(lcobj2)

    # cardinality
    self.obj90.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj90.cardinality.setValue(lcobj2)

    # display
    self.obj90.display.setValue('Multiplicities:\n  - To Objective: 1 to N\n  - From Role: 0 to N\n  - From Process: 0 to N\n')
    self.obj90.display.setHeight(15)

    # Actions
    self.obj90.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj90.Actions.setValue(lcobj2)

    # Constraints
    self.obj90.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj90.Constraints.setValue(lcobj2)

    self.obj90.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(436.73445957,632.859445861,self.obj90)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.1620000000000001, 1.0838709677419356]
    else: new_obj = None
    self.obj90.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj90)
    self.globalAndLocalPostcondition(self.obj90, rootNode)
    self.obj90.postAction( rootNode.CREATE )

    self.obj91=CD_Association3(self)
    self.obj91.isGraphObjectVisual = True

    if(hasattr(self.obj91, '_setHierarchicalLink')):
      self.obj91._setHierarchicalLink(False)

    # QOCA
    self.obj91.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj91.Graphical_Appearance.setValue( ('genericAssociation', self.obj91))
    self.obj91.Graphical_Appearance.linkInfo=linkEditor(self,self.obj91.Graphical_Appearance.semObject, "genericAssociation")
    self.obj91.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('genericAssociation_1stLink', self.obj91.Graphical_Appearance.linkInfo.FirstLink))
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('genericAssociation_1stSegment', self.obj91.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj91.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj91.Graphical_Appearance.linkInfo.Center.setValue( ('genericAssociation_Center', self.obj91.Graphical_Appearance.linkInfo))
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('genericAssociation_2ndSegment', self.obj91.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj91.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('genericAssociation_2ndLink', self.obj91.Graphical_Appearance.linkInfo.SecondLink))
    self.obj91.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj91.Graphical_Appearance.semObject
    self.obj91.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj91.Graphical_Appearance.semObject
    self.obj91.Graphical_Appearance.linkInfo.Center.semObject=self.obj91.Graphical_Appearance.semObject
    self.obj91.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj91.Graphical_Appearance.semObject
    self.obj91.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj91.Graphical_Appearance.semObject

    # name
    self.obj91.name.setValue('genericAssociation')

    # displaySelect
    self.obj91.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj91.displaySelect.config = 0

    # attributes
    self.obj91.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,10 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj91.attributes.setValue(lcobj2)

    # cardinality
    self.obj91.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj91.cardinality.setValue(lcobj2)

    # display
    self.obj91.display.setValue('Attributes:\n  - Name :: String\n  - Description :: Text\nMultiplicities:\n  - To Role: 1 to N\n  - From Role: 1 to N\n')
    self.obj91.display.setHeight(15)

    # Actions
    self.obj91.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj91.Actions.setValue(lcobj2)

    # Constraints
    self.obj91.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj91.Constraints.setValue(lcobj2)

    self.obj91.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1044.0,340.0,self.obj91)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.015, 1.6258064516129034]
    else: new_obj = None
    self.obj91.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj91)
    self.globalAndLocalPostcondition(self.obj91, rootNode)
    self.obj91.postAction( rootNode.CREATE )

    self.obj92=CD_Association3(self)
    self.obj92.isGraphObjectVisual = True

    if(hasattr(self.obj92, '_setHierarchicalLink')):
      self.obj92._setHierarchicalLink(True)

    # QOCA
    self.obj92.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj92.Graphical_Appearance.setValue( ('answersToRole', self.obj92))
    self.obj92.Graphical_Appearance.linkInfo=linkEditor(self,self.obj92.Graphical_Appearance.semObject, "answersToRole")
    self.obj92.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToRole_1stLink', self.obj92.Graphical_Appearance.linkInfo.FirstLink))
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToRole_1stSegment', self.obj92.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj92.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj92.Graphical_Appearance.linkInfo.Center.setValue( ('answersToRole_Center', self.obj92.Graphical_Appearance.linkInfo))
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToRole_2ndSegment', self.obj92.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj92.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToRole_2ndLink', self.obj92.Graphical_Appearance.linkInfo.SecondLink))
    self.obj92.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj92.Graphical_Appearance.semObject
    self.obj92.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj92.Graphical_Appearance.semObject
    self.obj92.Graphical_Appearance.linkInfo.Center.semObject=self.obj92.Graphical_Appearance.semObject
    self.obj92.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj92.Graphical_Appearance.semObject
    self.obj92.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj92.Graphical_Appearance.semObject

    # name
    self.obj92.name.setValue('answersToRole')

    # displaySelect
    self.obj92.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj92.displaySelect.config = 0

    # attributes
    self.obj92.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj92.attributes.setValue(lcobj2)

    # cardinality
    self.obj92.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj92.cardinality.setValue(lcobj2)

    # display
    self.obj92.display.setValue('Multiplicities:\n  - From Role: 1 to N\n  - To Role: 1 to N\n')
    self.obj92.display.setHeight(15)

    # Actions
    self.obj92.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj92.Actions.setValue(lcobj2)

    # Constraints
    self.obj92.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj92.Constraints.setValue(lcobj2)

    self.obj92.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(933.0,176.0,self.obj92)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj92.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj92)
    self.globalAndLocalPostcondition(self.obj92, rootNode)
    self.obj92.postAction( rootNode.CREATE )

    self.obj93=CD_Association3(self)
    self.obj93.isGraphObjectVisual = True

    if(hasattr(self.obj93, '_setHierarchicalLink')):
      self.obj93._setHierarchicalLink(False)

    # QOCA
    self.obj93.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj93.Graphical_Appearance.setValue( ('canStartProcess', self.obj93))
    self.obj93.Graphical_Appearance.linkInfo=linkEditor(self,self.obj93.Graphical_Appearance.semObject, "canStartProcess")
    self.obj93.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canStartProcess_1stLink', self.obj93.Graphical_Appearance.linkInfo.FirstLink))
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canStartProcess_1stSegment', self.obj93.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj93.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj93.Graphical_Appearance.linkInfo.Center.setValue( ('canStartProcess_Center', self.obj93.Graphical_Appearance.linkInfo))
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canStartProcess_2ndSegment', self.obj93.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj93.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canStartProcess_2ndLink', self.obj93.Graphical_Appearance.linkInfo.SecondLink))
    self.obj93.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj93.Graphical_Appearance.semObject
    self.obj93.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj93.Graphical_Appearance.semObject
    self.obj93.Graphical_Appearance.linkInfo.Center.semObject=self.obj93.Graphical_Appearance.semObject
    self.obj93.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj93.Graphical_Appearance.semObject
    self.obj93.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj93.Graphical_Appearance.semObject

    # name
    self.obj93.name.setValue('canStartProcess')

    # displaySelect
    self.obj93.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj93.displaySelect.config = 0

    # attributes
    self.obj93.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj93.attributes.setValue(lcobj2)

    # cardinality
    self.obj93.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj93.cardinality.setValue(lcobj2)

    # display
    self.obj93.display.setValue('Multiplicities:\n  - To Process: 0 to N\n  - From Role: 0 to N\n')
    self.obj93.display.setHeight(15)

    # Actions
    self.obj93.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj93.Actions.setValue(lcobj2)

    # Constraints
    self.obj93.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj93.Constraints.setValue(lcobj2)

    self.obj93.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(470.4921875,411.163934426,self.obj93)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.036, 1.0]
    else: new_obj = None
    self.obj93.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj93)
    self.globalAndLocalPostcondition(self.obj93, rootNode)
    self.obj93.postAction( rootNode.CREATE )

    self.obj94=CD_Association3(self)
    self.obj94.isGraphObjectVisual = True

    if(hasattr(self.obj94, '_setHierarchicalLink')):
      self.obj94._setHierarchicalLink(True)

    # QOCA
    self.obj94.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj94.Graphical_Appearance.setValue( ('answersToOrgUnit', self.obj94))
    self.obj94.Graphical_Appearance.linkInfo=linkEditor(self,self.obj94.Graphical_Appearance.semObject, "answersToOrgUnit")
    self.obj94.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToOrgUnit_1stLink', self.obj94.Graphical_Appearance.linkInfo.FirstLink))
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToOrgUnit_1stSegment', self.obj94.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj94.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj94.Graphical_Appearance.linkInfo.Center.setValue( ('answersToOrgUnit_Center', self.obj94.Graphical_Appearance.linkInfo))
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToOrgUnit_2ndSegment', self.obj94.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj94.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToOrgUnit_2ndLink', self.obj94.Graphical_Appearance.linkInfo.SecondLink))
    self.obj94.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj94.Graphical_Appearance.semObject
    self.obj94.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj94.Graphical_Appearance.semObject
    self.obj94.Graphical_Appearance.linkInfo.Center.semObject=self.obj94.Graphical_Appearance.semObject
    self.obj94.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj94.Graphical_Appearance.semObject
    self.obj94.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj94.Graphical_Appearance.semObject

    # name
    self.obj94.name.setValue('answersToOrgUnit')

    # displaySelect
    self.obj94.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj94.displaySelect.config = 0

    # attributes
    self.obj94.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj94.attributes.setValue(lcobj2)

    # cardinality
    self.obj94.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj94.cardinality.setValue(lcobj2)

    # display
    self.obj94.display.setValue('Multiplicities:\n  - To OrgUnit: 1 to N\n  - From OrgUnit: 1 to N\n')
    self.obj94.display.setHeight(15)

    # Actions
    self.obj94.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj94.Actions.setValue(lcobj2)

    # Constraints
    self.obj94.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj94.Constraints.setValue(lcobj2)

    self.obj94.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1113.0,79.0,self.obj94)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj94.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj94)
    self.globalAndLocalPostcondition(self.obj94, rootNode)
    self.obj94.postAction( rootNode.CREATE )

    self.obj95=CD_Association3(self)
    self.obj95.isGraphObjectVisual = True

    if(hasattr(self.obj95, '_setHierarchicalLink')):
      self.obj95._setHierarchicalLink(True)

    # QOCA
    self.obj95.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj95.Graphical_Appearance.setValue( ('isPartOfRole', self.obj95))
    self.obj95.Graphical_Appearance.linkInfo=linkEditor(self,self.obj95.Graphical_Appearance.semObject, "isPartOfRole")
    self.obj95.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfRole_1stLink', self.obj95.Graphical_Appearance.linkInfo.FirstLink))
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfRole_1stSegment', self.obj95.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj95.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj95.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfRole_Center', self.obj95.Graphical_Appearance.linkInfo))
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfRole_2ndSegment', self.obj95.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],0,0)
    self.obj95.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfRole_2ndLink', self.obj95.Graphical_Appearance.linkInfo.SecondLink))
    self.obj95.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj95.Graphical_Appearance.semObject
    self.obj95.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj95.Graphical_Appearance.semObject
    self.obj95.Graphical_Appearance.linkInfo.Center.semObject=self.obj95.Graphical_Appearance.semObject
    self.obj95.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj95.Graphical_Appearance.semObject
    self.obj95.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj95.Graphical_Appearance.semObject

    # name
    self.obj95.name.setValue('isPartOfRole')

    # displaySelect
    self.obj95.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj95.displaySelect.config = 0

    # attributes
    self.obj95.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj95.attributes.setValue(lcobj2)

    # cardinality
    self.obj95.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj95.cardinality.setValue(lcobj2)

    # display
    self.obj95.display.setValue('Multiplicities:\n  - From Role: 0 to N\n  - To Role: 0 to N\n')
    self.obj95.display.setHeight(15)

    # Actions
    self.obj95.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj95.Actions.setValue(lcobj2)

    # Constraints
    self.obj95.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj95.Constraints.setValue(lcobj2)

    self.obj95.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(675.0,160.0,self.obj95)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj95.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj95)
    self.globalAndLocalPostcondition(self.obj95, rootNode)
    self.obj95.postAction( rootNode.CREATE )

    self.obj96=CD_Inheritance3(self)
    self.obj96.isGraphObjectVisual = True

    if(hasattr(self.obj96, '_setHierarchicalLink')):
      self.obj96._setHierarchicalLink(False)

    self.obj96.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(1056.21888986,1366.92763695,self.obj96)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj96.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj96)
    self.globalAndLocalPostcondition(self.obj96, rootNode)
    self.obj96.postAction( rootNode.CREATE )

    self.obj97=CD_Inheritance3(self)
    self.obj97.isGraphObjectVisual = True

    if(hasattr(self.obj97, '_setHierarchicalLink')):
      self.obj97._setHierarchicalLink(False)

    self.obj97.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(1136.90914946,1358.75085967,self.obj97)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj97.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj97)
    self.globalAndLocalPostcondition(self.obj97, rootNode)
    self.obj97.postAction( rootNode.CREATE )

    self.obj98=CD_Inheritance3(self)
    self.obj98.isGraphObjectVisual = True

    if(hasattr(self.obj98, '_setHierarchicalLink')):
      self.obj98._setHierarchicalLink(False)

    self.obj98.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(152.858254695,586.846159545,self.obj98)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj98.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj98)
    self.globalAndLocalPostcondition(self.obj98, rootNode)
    self.obj98.postAction( rootNode.CREATE )

    self.obj106=CD_Inheritance3(self)
    self.obj106.isGraphObjectVisual = True

    if(hasattr(self.obj106, '_setHierarchicalLink')):
      self.obj106._setHierarchicalLink(False)

    self.obj106.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(135.466796875,193.786885246,self.obj106)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj106.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj106)
    self.globalAndLocalPostcondition(self.obj106, rootNode)
    self.obj106.postAction( rootNode.CREATE )

    # Connections for obj76 (graphObject_: Obj74) named OrgUnit
    self.drawConnections(
(self.obj76,self.obj85,[1368.8125, 220.52459016393442, 1387.9955983980042, 65.8097262245276, 1387.9955984, 65.80972622499999],"true", 3),
(self.obj76,self.obj86,[1241.14453125, 467.5737704918033, 967.8422485527899, 481.40176688146084, 971.7601868, 527.680947659],"true", 3),
(self.obj76,self.obj88,[1241.14453125, 467.5737704918033, 997.8287423035672, 492.3266545159663, 1106.462784, 821.548234957],"true", 3),
(self.obj76,self.obj94,[1241.14453125, 323.8032786885246, 1130.0, 231.0, 1113.0, 79.0], 0, 3) )
    # Connections for obj77 (graphObject_: Obj75) named Role
    self.drawConnections(
(self.obj77,self.obj87,[660.0, 791.0, 541.1631302538499, 883.356649681594, 503.161248615, 952.001803815],"true", 3),
(self.obj77,self.obj88,[832.921875, 715.2622950819672, 1023.5805784296024, 714.1457487347751, 1106.462784, 821.548234957],"true", 3),
(self.obj77,self.obj90,[620.953125, 518.344262295082, 522.0012232889502, 553.7739542825374, 436.73445957, 632.859445861],"true", 3),
(self.obj77,self.obj91,[832.921875, 412.3114754098361, 1044.0, 340.0], 0, 2),
(self.obj77,self.obj92,[793.875, 260.8360655737705, 933.0, 176.0], 0, 2),
(self.obj77,self.obj93,[620.953125, 412.3114754098361, 470.4921875, 411.163934426], 0, 2),
(self.obj77,self.obj95,[660.0, 260.8360655737705, 675.0, 160.0],"true", 2) )
    # Connections for obj78 (graphObject_: Obj76) named Action
    self.drawConnections(
 )
    # Connections for obj79 (graphObject_: Obj77) named KnowledgeArtifacts
    self.drawConnections(
 )
    # Connections for obj80 (graphObject_: Obj78) named OrganisationalKnArt
    self.drawConnections(
(self.obj80,self.obj96,[935.5703125, 1206.090909090909, 1056.21888986, 1366.92763695],"true", 2) )
    # Connections for obj81 (graphObject_: Obj79) named IndividualKnArt
    self.drawConnections(
(self.obj81,self.obj97,[1240.7421875, 1186.090909090909, 1136.90914946, 1358.75085967],"true", 2) )
    # Connections for obj82 (graphObject_: Obj80) named Strategy
    self.drawConnections(
 )
    # Connections for obj83 (graphObject_: Obj81) named Objective
    self.drawConnections(
(self.obj83,self.obj98,[139.75, 629.4918032786885, 152.858254695, 586.846159545],"true", 2),
(self.obj83,self.obj89,[139.75, 803.0, 131.94404651894035, 946.9122308488277, 131.944046519, 946.91223085],"true", 3) )
    # Connections for obj84 (graphObject_: Obj82) named Process
    self.drawConnections(
(self.obj84,self.obj90,[324.0, 283.0, 333.0, 453.0, 436.73445957, 632.859445861],"true", 3),
(self.obj84,self.obj106,[280.93359375, 178.89508196721312, 135.466796875, 193.78688524590166],"true", 2) )
    # Connections for obj85 (graphObject_: Obj83) named isPartOfOrgUnit
    self.drawConnections(
(self.obj85,self.obj76,[1387.9955984, 65.80972622499999, 1387.9955983980042, 65.8097262245276, 1368.8125, 220.52459016393442],"true", 3) )
    # Connections for obj86 (graphObject_: Obj85) named canHaveRole
    self.drawConnections(
(self.obj86,self.obj77,[971.7601868, 527.680947659, 975.67812505129, 573.9601284363068, 832.921875, 620.5901639344263],"true", 3) )
    # Connections for obj87 (graphObject_: Obj87) named hasActions
    self.drawConnections(
(self.obj87,self.obj78,[503.161248615, 952.001803815, 465.1593669760688, 1020.6469579482074, 741.20703125, 946.0909090909091],"true", 3) )
    # Connections for obj88 (graphObject_: Obj89) named canAccessKnArt
    self.drawConnections(
(self.obj88,self.obj80,[1106.462784, 821.548234957, 1128.2678325033444, 887.9439489105719, 935.5703125, 1122.4545454545455],"true", 3),
(self.obj88,self.obj81,[1106.462784, 821.548234957, 1033.4035107781324, 923.4763808302594, 1240.7421875, 1102.4545454545455],"true", 3) )
    # Connections for obj89 (graphObject_: Obj91) named isPartOfObjective
    self.drawConnections(
(self.obj89,self.obj83,[131.944046519, 946.91223085, 131.94404651894035, 946.9122308488277, 139.75, 803.0],"true", 3) )
    # Connections for obj90 (graphObject_: Obj93) named hasObjective
    self.drawConnections(
(self.obj90,self.obj83,[436.73445957, 632.859445861, 351.4676958509182, 711.9449374392455, 281.65625, 698.8950819672131],"true", 3) )
    # Connections for obj91 (graphObject_: Obj95) named genericAssociation
    self.drawConnections(
(self.obj91,self.obj77,[1044.0, 340.0, 832.921875, 412.3114754098361], 0, 2) )
    # Connections for obj92 (graphObject_: Obj97) named answersToRole
    self.drawConnections(
(self.obj92,self.obj77,[933.0, 176.0, 793.875, 260.8360655737705], 0, 2) )
    # Connections for obj93 (graphObject_: Obj99) named canStartProcess
    self.drawConnections(
(self.obj93,self.obj84,[470.4921875, 411.163934426, 471.65625, 283.0], 0, 2) )
    # Connections for obj94 (graphObject_: Obj101) named answersToOrgUnit
    self.drawConnections(
(self.obj94,self.obj76,[1113.0, 79.0, 1279.0, 145.0, 1280.0, 220.52459016393442], 0, 3) )
    # Connections for obj95 (graphObject_: Obj103) named isPartOfRole
    self.drawConnections(
(self.obj95,self.obj77,[675.0, 160.0, 660.0, 260.8360655737705],"true", 2) )
    # Connections for obj96 (graphObject_: Obj105) of type CD_Inheritance3
    self.drawConnections(
(self.obj96,self.obj79,[1056.21888986, 1366.92763695, 1073.0, 1255.0],"true", 2) )
    # Connections for obj97 (graphObject_: Obj107) of type CD_Inheritance3
    self.drawConnections(
(self.obj97,self.obj79,[1136.90914946, 1358.75085967, 1153.0, 1255.0],"true", 2) )
    # Connections for obj98 (graphObject_: Obj109) of type CD_Inheritance3
    self.drawConnections(
(self.obj98,self.obj82,[152.858254695, 586.846159545, 156.0, 487.0],"true", 2) )
    # Connections for obj106 (graphObject_: Obj111) of type CD_Inheritance3
    self.drawConnections(
(self.obj106,self.obj82,[135.466796875, 193.78688524590166, 116.0, 313.4918032786885],"true", 2) )

newfunction = LSMASOMM_MDL

loadedMMName = 'CD_ClassDiagramsV3_META'

atom3version = '0.3'
