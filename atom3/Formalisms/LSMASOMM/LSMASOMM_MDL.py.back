"""
__LSMASOMM_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: bogdan
Modified: Wed Nov  9 16:20:21 2016
______________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from CD_Class3 import *
from CD_Association3 import *
from CD_Inheritance3 import *
from graph_CD_Association3 import *
from graph_CD_Class3 import *
from graph_CD_Inheritance3 import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def LSMASOMM_MDL(self, rootNode, CD_ClassDiagramsV3RootNode=None):

    # --- Generating attributes code for ASG CD_ClassDiagramsV3 ---
    if( CD_ClassDiagramsV3RootNode ): 
        # name
        CD_ClassDiagramsV3RootNode.name.setValue('LSMASOMM')

        # author
        CD_ClassDiagramsV3RootNode.author.setValue('Bogdan')

        # showCardinalities
        CD_ClassDiagramsV3RootNode.showCardinalities.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showCardinalities.config = 0

        # showAssociationBox
        CD_ClassDiagramsV3RootNode.showAssociationBox.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAssociationBox.config = 0

        # description
        CD_ClassDiagramsV3RootNode.description.setValue('\n')
        CD_ClassDiagramsV3RootNode.description.setHeight(15)

        # showAttributes
        CD_ClassDiagramsV3RootNode.showAttributes.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAttributes.config = 0

        # showActions
        CD_ClassDiagramsV3RootNode.showActions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showActions.config = 0

        # showConditions
        CD_ClassDiagramsV3RootNode.showConditions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showConditions.config = 0

        # attributes
        CD_ClassDiagramsV3RootNode.attributes.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('name', 'String', None, ('Key', 1), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('author', 'String', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('Annonymous', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3Text('\n', 60,15 )
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        CD_ClassDiagramsV3RootNode.attributes.setValue(lcobj1)

        # constraints
        CD_ClassDiagramsV3RootNode.constraints.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        CD_ClassDiagramsV3RootNode.constraints.setValue(lcobj1)
    # --- ASG attributes over ---


    self.obj557=CD_Class3(self)
    self.obj557.isGraphObjectVisual = True

    if(hasattr(self.obj557, '_setHierarchicalLink')):
      self.obj557._setHierarchicalLink(False)

    # QOCA
    self.obj557.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj557.Graphical_Appearance.setValue( ('OrgUnit', self.obj557))

    # name
    self.obj557.name.setValue('OrgUnit')

    # attributes
    self.obj557.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Individual', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue((None, 1))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('UnitActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj3=ATOM3String('ChangeRole', 20)
    lcobj3.append(cobj3)
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('UnitSize', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('Individual', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('orgUnitName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj557.attributes.setValue(lcobj2)

    # Abstract
    self.obj557.Abstract.setValue((None, 0))
    self.obj557.Abstract.config = 0

    # cardinality
    self.obj557.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj557.cardinality.setValue(lcobj2)

    # display
    self.obj557.display.setValue('Attributes:\n  - Individual :: Boolean\n  - UnitActions :: List\n  - UnitSize :: String\n  - name :: String\nConstraints:\n  > ConstraintOutputOrgUnit\nActions:\n  > determineSize\nMultiplicities:\n  - To isPartOfOrgUnit: 0 to N\n  - From isPartOfOrgUnit: 0 to N\n  - To canHaveRole: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To answersToOrgUnit: 0 to N\n  - From answersToOrgUnit: 0 to N\n')
    self.obj557.display.setHeight(15)

    # Actions
    self.obj557.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('determineSize', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitDetermineSize(self)\nself.UnitSize.setValue(res)\nself.graphObject_.ModifyAttribute(\'UnitSize\', res)\n\n'))
    lcobj2.append(cobj2)
    self.obj557.Actions.setValue(lcobj2)

    # Constraints
    self.obj557.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintOutputOrgUnit', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitCheckOutputs(self)\nif res is "manyKnArts":\n    return ("OrgUnit can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj557.Constraints.setValue(lcobj2)

    self.obj557.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1240.0,220.0,self.obj557)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.88
       new_obj.layConstraints['scale'] = [1.11015625, 2.7540983606557377]
    else: new_obj = None
    self.obj557.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj557)
    self.globalAndLocalPostcondition(self.obj557, rootNode)
    self.obj557.postAction( rootNode.CREATE )

    self.obj558=CD_Class3(self)
    self.obj558.isGraphObjectVisual = True

    if(hasattr(self.obj558, '_setHierarchicalLink')):
      self.obj558._setHierarchicalLink(False)

    # QOCA
    self.obj558.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj558.Graphical_Appearance.setValue( ('Role', self.obj558))

    # name
    self.obj558.name.setValue('Role')

    # attributes
    self.obj558.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 0), ('Direct Editing', 0)))
    cobj2.initialValue=ATOM3String('RoleID', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('isMetaRole', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue((None, 0))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('role name', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('roleActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj3=ATOM3String('RoleAction1', 20)
    lcobj3.append(cobj3)
    cobj3=ATOM3String('RoleAction2', 20)
    lcobj3.append(cobj3)
    cobj3=ATOM3String('RoleActionN', 20)
    lcobj3.append(cobj3)
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj558.attributes.setValue(lcobj2)

    # Abstract
    self.obj558.Abstract.setValue((None, 0))
    self.obj558.Abstract.config = 0

    # cardinality
    self.obj558.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj558.cardinality.setValue(lcobj2)

    # display
    self.obj558.display.setValue('Attributes:\n  - ID :: String\n  - isMetaRole :: Boolean\n  - name :: String\n  - roleActions :: List\nConstraints:\n  > RoleConstraintKnArt\nActions:\n  > checkMetaRole\n  > InheritActions\nMultiplicities:\n  - From canHaveRole: 0 to N\n  - To hasActions: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To hasObjective: 0 to N\n  - To genericAssociation: 0 to N\n  - From genericAssociation: 0 to N\n  - To answersToRole: 0 to N\n  - From answersToRole: 0 to N\n  - To canStartProcess: 0 to N\n  - To isPartOfRole: 0 to N\n  - From isPartOfRole: 0 to N\n')
    self.obj558.display.setHeight(15)

    # Actions
    self.obj558.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('checkMetaRole', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0]), 'from CustomCode import RoleHierarchy\nres = RoleHierarchy(self)\nself.isMetaRole.setValue((\'isMetaRole\',res))\nself.graphObject_.ModifyAttribute(\'isMetaRole\', res)\n\n'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Action()
    cobj2.setValue(('InheritActions', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]), 'from CustomCode import RoleInheritance\nres = RoleInheritance(self)\nif res:\n##    actions = self.roleActions.getValue()\n##    for r in res:\n##    	actions.append(r)\n##    print actions\n##    self.roleActions.setValue(actions)\n    self.graphObject_.ModifyAttribute(\'roleActions\', self.roleActions.toString())\n\n'))
    lcobj2.append(cobj2)
    self.obj558.Actions.setValue(lcobj2)

    # Constraints
    self.obj558.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('RoleConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), '\nfrom CustomCode import *\n\nres = RoleCheckOutputs(self)\nif res is "manyKnArts":\n    return ("Roles can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelif res is "IndivKnArtError":\n    return ("Roles can have OrganizationalKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj558.Constraints.setValue(lcobj2)

    self.obj558.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(620.0,280.0,self.obj558)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.85
       new_obj.layConstraints['scale'] = [1.115625, 3.7868852459016393]
    else: new_obj = None
    self.obj558.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj558)
    self.globalAndLocalPostcondition(self.obj558, rootNode)
    self.obj558.postAction( rootNode.CREATE )

    self.obj559=CD_Class3(self)
    self.obj559.isGraphObjectVisual = True

    if(hasattr(self.obj559, '_setHierarchicalLink')):
      self.obj559._setHierarchicalLink(False)

    # QOCA
    self.obj559.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj559.Graphical_Appearance.setValue( ('Action', self.obj559))

    # name
    self.obj559.name.setValue('Action')

    # attributes
    self.obj559.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ActionCode', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#action code placeholder or description\n#\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('ActionName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj559.attributes.setValue(lcobj2)

    # Abstract
    self.obj559.Abstract.setValue((None, 0))
    self.obj559.Abstract.config = 0

    # cardinality
    self.obj559.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj559.cardinality.setValue(lcobj2)

    # display
    self.obj559.display.setValue('Attributes:\n  - ActionCode :: Text\n  - name :: String\nMultiplicities:\n  - From hasActions: 0 to N\n')
    self.obj559.display.setHeight(15)

    # Actions
    self.obj559.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj559.Actions.setValue(lcobj2)

    # Constraints
    self.obj559.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj559.Constraints.setValue(lcobj2)

    self.obj559.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(740.0,820.0,self.obj559)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 1.06
       new_obj.layConstraints['scale'] = [1.02265625, 1.0454545454545454]
    else: new_obj = None
    self.obj559.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj559)
    self.globalAndLocalPostcondition(self.obj559, rootNode)
    self.obj559.postAction( rootNode.CREATE )

    self.obj560=CD_Class3(self)
    self.obj560.isGraphObjectVisual = True

    if(hasattr(self.obj560, '_setHierarchicalLink')):
      self.obj560._setHierarchicalLink(False)

    # QOCA
    self.obj560.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj560.Graphical_Appearance.setValue( ('KnowledgeArtifacts', self.obj560))

    # name
    self.obj560.name.setValue('KnowledgeArtifacts')

    # attributes
    self.obj560.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj560.attributes.setValue(lcobj2)

    # Abstract
    self.obj560.Abstract.setValue((None, 1))
    self.obj560.Abstract.config = 0

    # cardinality
    self.obj560.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj560.cardinality.setValue(lcobj2)

    # display
    self.obj560.display.setValue('Attributes:\n  - ID :: String\n  - description :: String\n  - name :: String\n')
    self.obj560.display.setHeight(15)

    # Actions
    self.obj560.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj560.Actions.setValue(lcobj2)

    # Constraints
    self.obj560.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj560.Constraints.setValue(lcobj2)

    self.obj560.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(980.0,1080.0,self.obj560)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0454545454545454]
    else: new_obj = None
    self.obj560.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj560)
    self.globalAndLocalPostcondition(self.obj560, rootNode)
    self.obj560.postAction( rootNode.CREATE )

    self.obj561=CD_Class3(self)
    self.obj561.isGraphObjectVisual = True

    if(hasattr(self.obj561, '_setHierarchicalLink')):
      self.obj561._setHierarchicalLink(False)

    # QOCA
    self.obj561.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj561.Graphical_Appearance.setValue( ('OrganisationalKnArt', self.obj561))

    # name
    self.obj561.name.setValue('OrganisationalKnArt')

    # attributes
    self.obj561.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj561.attributes.setValue(lcobj2)

    # Abstract
    self.obj561.Abstract.setValue((None, 0))
    self.obj561.Abstract.config = 0

    # cardinality
    self.obj561.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj561.cardinality.setValue(lcobj2)

    # display
    self.obj561.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj561.display.setHeight(15)

    # Actions
    self.obj561.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj561.Actions.setValue(lcobj2)

    # Constraints
    self.obj561.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj561.Constraints.setValue(lcobj2)

    self.obj561.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(700.0,1080.0,self.obj561)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj561.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj561)
    self.globalAndLocalPostcondition(self.obj561, rootNode)
    self.obj561.postAction( rootNode.CREATE )

    self.obj562=CD_Class3(self)
    self.obj562.isGraphObjectVisual = True

    if(hasattr(self.obj562, '_setHierarchicalLink')):
      self.obj562._setHierarchicalLink(False)

    # QOCA
    self.obj562.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj562.Graphical_Appearance.setValue( ('IndividualKnArt', self.obj562))

    # name
    self.obj562.name.setValue('IndividualKnArt')

    # attributes
    self.obj562.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj562.attributes.setValue(lcobj2)

    # Abstract
    self.obj562.Abstract.setValue((None, 0))
    self.obj562.Abstract.config = 0

    # cardinality
    self.obj562.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj562.cardinality.setValue(lcobj2)

    # display
    self.obj562.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj562.display.setHeight(15)

    # Actions
    self.obj562.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj562.Actions.setValue(lcobj2)

    # Constraints
    self.obj562.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj562.Constraints.setValue(lcobj2)

    self.obj562.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1240.0,1060.0,self.obj562)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj562.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj562)
    self.globalAndLocalPostcondition(self.obj562, rootNode)
    self.obj562.postAction( rootNode.CREATE )

    self.obj563=CD_Class3(self)
    self.obj563.isGraphObjectVisual = True

    if(hasattr(self.obj563, '_setHierarchicalLink')):
      self.obj563._setHierarchicalLink(False)

    # QOCA
    self.obj563.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj563.Graphical_Appearance.setValue( ('Strategy', self.obj563))

    # name
    self.obj563.name.setValue('Strategy')

    # attributes
    self.obj563.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('STR', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj563.attributes.setValue(lcobj2)

    # Abstract
    self.obj563.Abstract.setValue((None, 1))
    self.obj563.Abstract.config = 0

    # cardinality
    self.obj563.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj563.cardinality.setValue(lcobj2)

    # display
    self.obj563.display.setValue('Attributes:\n  - ID :: String\n  - description :: String\n  - name :: String\n')
    self.obj563.display.setHeight(15)

    # Actions
    self.obj563.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj563.Actions.setValue(lcobj2)

    # Constraints
    self.obj563.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj563.Constraints.setValue(lcobj2)

    self.obj563.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(40.0,340.0,self.obj563)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0454545454545454]
    else: new_obj = None
    self.obj563.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj563)
    self.globalAndLocalPostcondition(self.obj563, rootNode)
    self.obj563.postAction( rootNode.CREATE )

    self.obj564=CD_Class3(self)
    self.obj564.isGraphObjectVisual = True

    if(hasattr(self.obj564, '_setHierarchicalLink')):
      self.obj564._setHierarchicalLink(False)

    # QOCA
    self.obj564.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj564.Graphical_Appearance.setValue( ('Objective', self.obj564))

    # name
    self.obj564.name.setValue('Objective')

    # attributes
    self.obj564.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('STR', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Measurement', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,5 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Reward', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,5 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj564.attributes.setValue(lcobj2)

    # Abstract
    self.obj564.Abstract.setValue((None, 0))
    self.obj564.Abstract.config = 0

    # cardinality
    self.obj564.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj564.cardinality.setValue(lcobj2)

    # display
    self.obj564.display.setValue('Attributes:\n  - Measurement :: Text\n  - Reward :: Text\nMultiplicities:\n  - To isPartOfObjective: 0 to N\n  - From isPartOfObjective: 0 to N\n  - From hasObjective: 0 to N\n')
    self.obj564.display.setHeight(15)

    # Actions
    self.obj564.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj564.Actions.setValue(lcobj2)

    # Constraints
    self.obj564.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj564.Constraints.setValue(lcobj2)

    self.obj564.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(40.0,600.0,self.obj564)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.26875, 1.4459016393442625]
    else: new_obj = None
    self.obj564.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj564)
    self.globalAndLocalPostcondition(self.obj564, rootNode)
    self.obj564.postAction( rootNode.CREATE )

    self.obj565=CD_Class3(self)
    self.obj565.isGraphObjectVisual = True

    if(hasattr(self.obj565, '_setHierarchicalLink')):
      self.obj565._setHierarchicalLink(False)

    # QOCA
    self.obj565.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj565.Graphical_Appearance.setValue( ('Process', self.obj565))

    # name
    self.obj565.name.setValue('Process')

    # attributes
    self.obj565.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Activities', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,10 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('PRCS', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj565.attributes.setValue(lcobj2)

    # Abstract
    self.obj565.Abstract.setValue((None, 0))
    self.obj565.Abstract.config = 0

    # cardinality
    self.obj565.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj565.cardinality.setValue(lcobj2)

    # display
    self.obj565.display.setValue('Attributes:\n  - Activities :: Text\n  - ID :: String\n  - Name :: String\nMultiplicities:\n  - From canStartProcess: 0 to N\n  - To hasObjective: 0 to N\n')
    self.obj565.display.setHeight(15)

    # Actions
    self.obj565.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj565.Actions.setValue(lcobj2)

    # Constraints
    self.obj565.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj565.Constraints.setValue(lcobj2)

    self.obj565.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(280.0,80.0,self.obj565)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.23046875, 1.4459016393442625]
    else: new_obj = None
    self.obj565.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj565)
    self.globalAndLocalPostcondition(self.obj565, rootNode)
    self.obj565.postAction( rootNode.CREATE )

    self.obj566=CD_Association3(self)
    self.obj566.isGraphObjectVisual = True

    if(hasattr(self.obj566, '_setHierarchicalLink')):
      self.obj566._setHierarchicalLink(True)

    # QOCA
    self.obj566.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj566.Graphical_Appearance.setValue( ('isPartOfOrgUnit', self.obj566))
    self.obj566.Graphical_Appearance.linkInfo=linkEditor(self,self.obj566.Graphical_Appearance.semObject, "isPartOfOrgUnit")
    self.obj566.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfOrgUnit_1stLink', self.obj566.Graphical_Appearance.linkInfo.FirstLink))
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfOrgUnit_1stSegment', self.obj566.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj566.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj566.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfOrgUnit_Center', self.obj566.Graphical_Appearance.linkInfo))
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfOrgUnit_2ndSegment', self.obj566.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj566.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfOrgUnit_2ndLink', self.obj566.Graphical_Appearance.linkInfo.SecondLink))
    self.obj566.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj566.Graphical_Appearance.semObject
    self.obj566.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj566.Graphical_Appearance.semObject
    self.obj566.Graphical_Appearance.linkInfo.Center.semObject=self.obj566.Graphical_Appearance.semObject
    self.obj566.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj566.Graphical_Appearance.semObject
    self.obj566.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj566.Graphical_Appearance.semObject

    # name
    self.obj566.name.setValue('isPartOfOrgUnit')

    # displaySelect
    self.obj566.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj566.displaySelect.config = 0

    # attributes
    self.obj566.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj566.attributes.setValue(lcobj2)

    # cardinality
    self.obj566.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj566.cardinality.setValue(lcobj2)

    # display
    self.obj566.display.setValue('Multiplicities:\n  - From OrgUnit: 1 to N\n  - To OrgUnit: 1 to N\n')
    self.obj566.display.setHeight(15)

    # Actions
    self.obj566.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj566.Actions.setValue(lcobj2)

    # Constraints
    self.obj566.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj566.Constraints.setValue(lcobj2)

    self.obj566.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1387.9955984,65.809726225,self.obj566)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj566.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj566)
    self.globalAndLocalPostcondition(self.obj566, rootNode)
    self.obj566.postAction( rootNode.CREATE )

    self.obj567=CD_Association3(self)
    self.obj567.isGraphObjectVisual = True

    if(hasattr(self.obj567, '_setHierarchicalLink')):
      self.obj567._setHierarchicalLink(True)

    # QOCA
    self.obj567.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj567.Graphical_Appearance.setValue( ('canHaveRole', self.obj567))
    self.obj567.Graphical_Appearance.linkInfo=linkEditor(self,self.obj567.Graphical_Appearance.semObject, "canHaveRole")
    self.obj567.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canHaveRole_1stLink', self.obj567.Graphical_Appearance.linkInfo.FirstLink))
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canHaveRole_1stSegment', self.obj567.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj567.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj567.Graphical_Appearance.linkInfo.Center.setValue( ('canHaveRole_Center', self.obj567.Graphical_Appearance.linkInfo))
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canHaveRole_2ndSegment', self.obj567.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj567.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canHaveRole_2ndLink', self.obj567.Graphical_Appearance.linkInfo.SecondLink))
    self.obj567.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj567.Graphical_Appearance.semObject
    self.obj567.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj567.Graphical_Appearance.semObject
    self.obj567.Graphical_Appearance.linkInfo.Center.semObject=self.obj567.Graphical_Appearance.semObject
    self.obj567.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj567.Graphical_Appearance.semObject
    self.obj567.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj567.Graphical_Appearance.semObject

    # name
    self.obj567.name.setValue('canHaveRole')

    # displaySelect
    self.obj567.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj567.displaySelect.config = 0

    # attributes
    self.obj567.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj567.attributes.setValue(lcobj2)

    # cardinality
    self.obj567.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj567.cardinality.setValue(lcobj2)

    # display
    self.obj567.display.setValue('Multiplicities:\n  - From OrgUnit: 0 to N\n  - To Role: 0 to N\n')
    self.obj567.display.setHeight(15)

    # Actions
    self.obj567.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj567.Actions.setValue(lcobj2)

    # Constraints
    self.obj567.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj567.Constraints.setValue(lcobj2)

    self.obj567.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(971.7601868,527.680947659,self.obj567)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj567.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj567)
    self.globalAndLocalPostcondition(self.obj567, rootNode)
    self.obj567.postAction( rootNode.CREATE )

    self.obj568=CD_Association3(self)
    self.obj568.isGraphObjectVisual = True

    if(hasattr(self.obj568, '_setHierarchicalLink')):
      self.obj568._setHierarchicalLink(False)

    # QOCA
    self.obj568.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj568.Graphical_Appearance.setValue( ('hasActions', self.obj568))
    self.obj568.Graphical_Appearance.linkInfo=linkEditor(self,self.obj568.Graphical_Appearance.semObject, "hasActions")
    self.obj568.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasActions_1stLink', self.obj568.Graphical_Appearance.linkInfo.FirstLink))
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasActions_1stSegment', self.obj568.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj568.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj568.Graphical_Appearance.linkInfo.Center.setValue( ('hasActions_Center', self.obj568.Graphical_Appearance.linkInfo))
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasActions_2ndSegment', self.obj568.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj568.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasActions_2ndLink', self.obj568.Graphical_Appearance.linkInfo.SecondLink))
    self.obj568.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj568.Graphical_Appearance.semObject
    self.obj568.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj568.Graphical_Appearance.semObject
    self.obj568.Graphical_Appearance.linkInfo.Center.semObject=self.obj568.Graphical_Appearance.semObject
    self.obj568.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj568.Graphical_Appearance.semObject
    self.obj568.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj568.Graphical_Appearance.semObject

    # name
    self.obj568.name.setValue('hasActions')

    # displaySelect
    self.obj568.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj568.displaySelect.config = 0

    # attributes
    self.obj568.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj568.attributes.setValue(lcobj2)

    # cardinality
    self.obj568.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Action', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', '1'))
    lcobj2.append(cobj2)
    self.obj568.cardinality.setValue(lcobj2)

    # display
    self.obj568.display.setValue('Multiplicities:\n  - To Action: 1 to N\n  - From Role: 1 to 1\n')
    self.obj568.display.setHeight(15)

    # Actions
    self.obj568.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj568.Actions.setValue(lcobj2)

    # Constraints
    self.obj568.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj568.Constraints.setValue(lcobj2)

    self.obj568.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(503.161248615,952.001803815,self.obj568)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj568.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj568)
    self.globalAndLocalPostcondition(self.obj568, rootNode)
    self.obj568.postAction( rootNode.CREATE )

    self.obj569=CD_Association3(self)
    self.obj569.isGraphObjectVisual = True

    if(hasattr(self.obj569, '_setHierarchicalLink')):
      self.obj569._setHierarchicalLink(False)

    # QOCA
    self.obj569.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj569.Graphical_Appearance.setValue( ('canAccessKnArt', self.obj569))
    self.obj569.Graphical_Appearance.linkInfo=linkEditor(self,self.obj569.Graphical_Appearance.semObject, "canAccessKnArt")
    self.obj569.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canAccessKnArt_1stLink', self.obj569.Graphical_Appearance.linkInfo.FirstLink))
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canAccessKnArt_1stSegment', self.obj569.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj569.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj569.Graphical_Appearance.linkInfo.Center.setValue( ('canAccessKnArt_Center', self.obj569.Graphical_Appearance.linkInfo))
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canAccessKnArt_2ndSegment', self.obj569.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj569.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canAccessKnArt_2ndLink', self.obj569.Graphical_Appearance.linkInfo.SecondLink))
    self.obj569.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj569.Graphical_Appearance.semObject
    self.obj569.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj569.Graphical_Appearance.semObject
    self.obj569.Graphical_Appearance.linkInfo.Center.semObject=self.obj569.Graphical_Appearance.semObject
    self.obj569.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj569.Graphical_Appearance.semObject
    self.obj569.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj569.Graphical_Appearance.semObject

    # name
    self.obj569.name.setValue('canAccessKnArt')

    # displaySelect
    self.obj569.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj569.displaySelect.config = 0

    # attributes
    self.obj569.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj569.attributes.setValue(lcobj2)

    # cardinality
    self.obj569.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrganisationalKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('IndividualKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj569.cardinality.setValue(lcobj2)

    # display
    self.obj569.display.setValue('Constraints:\n  > ConstraintKnArt\nMultiplicities:\n  - To OrganisationalKnArt: 0 to N\n  - From Role: 0 to N\n  - From OrgUnit: 0 to N\n  - To IndividualKnArt: 0 to N\n')
    self.obj569.display.setHeight(15)

    # Actions
    self.obj569.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj569.Actions.setValue(lcobj2)

    # Constraints
    self.obj569.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = canAccessKnArtCheckConnections(self)\n\nif res is "eitherRoleOrUnit":\n    return ("Either Role of OrgUnit can access knowledge.", self.graphObject_)\nelif res is "onlyOneInput":\n    return ("Only one Role or OrgUnit can access one knowledge medium.", self.graphObject_)\nelif res is "RoleWithOrgOnly":\n    return ("Role can access OrganisationalKnArt only!", self.graphObject_)\nelif res is "OrgUnitWithIndivOnly":\n    return ("OrgUnit can access IndividualKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj569.Constraints.setValue(lcobj2)

    self.obj569.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1106.462784,821.548234957,self.obj569)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.6380000000000001, 1.8967741935483875]
    else: new_obj = None
    self.obj569.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj569)
    self.globalAndLocalPostcondition(self.obj569, rootNode)
    self.obj569.postAction( rootNode.CREATE )

    self.obj570=CD_Association3(self)
    self.obj570.isGraphObjectVisual = True

    if(hasattr(self.obj570, '_setHierarchicalLink')):
      self.obj570._setHierarchicalLink(True)

    # QOCA
    self.obj570.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj570.Graphical_Appearance.setValue( ('isPartOfObjective', self.obj570))
    self.obj570.Graphical_Appearance.linkInfo=linkEditor(self,self.obj570.Graphical_Appearance.semObject, "isPartOfObjective")
    self.obj570.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfObjective_1stLink', self.obj570.Graphical_Appearance.linkInfo.FirstLink))
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfObjective_1stSegment', self.obj570.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj570.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj570.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfObjective_Center', self.obj570.Graphical_Appearance.linkInfo))
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfObjective_2ndSegment', self.obj570.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj570.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfObjective_2ndLink', self.obj570.Graphical_Appearance.linkInfo.SecondLink))
    self.obj570.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj570.Graphical_Appearance.semObject
    self.obj570.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj570.Graphical_Appearance.semObject
    self.obj570.Graphical_Appearance.linkInfo.Center.semObject=self.obj570.Graphical_Appearance.semObject
    self.obj570.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj570.Graphical_Appearance.semObject
    self.obj570.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj570.Graphical_Appearance.semObject

    # name
    self.obj570.name.setValue('isPartOfObjective')

    # displaySelect
    self.obj570.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj570.displaySelect.config = 0

    # attributes
    self.obj570.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj570.attributes.setValue(lcobj2)

    # cardinality
    self.obj570.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj570.cardinality.setValue(lcobj2)

    # display
    self.obj570.display.setValue('Multiplicities:\n  - From Objective: 0 to N\n  - To Objective: 0 to N\n')
    self.obj570.display.setHeight(15)

    # Actions
    self.obj570.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj570.Actions.setValue(lcobj2)

    # Constraints
    self.obj570.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj570.Constraints.setValue(lcobj2)

    self.obj570.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(131.944046519,946.91223085,self.obj570)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.225, 1.0]
    else: new_obj = None
    self.obj570.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj570)
    self.globalAndLocalPostcondition(self.obj570, rootNode)
    self.obj570.postAction( rootNode.CREATE )

    self.obj571=CD_Association3(self)
    self.obj571.isGraphObjectVisual = True

    if(hasattr(self.obj571, '_setHierarchicalLink')):
      self.obj571._setHierarchicalLink(False)

    # QOCA
    self.obj571.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj571.Graphical_Appearance.setValue( ('hasObjective', self.obj571))
    self.obj571.Graphical_Appearance.linkInfo=linkEditor(self,self.obj571.Graphical_Appearance.semObject, "hasObjective")
    self.obj571.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasObjective_1stLink', self.obj571.Graphical_Appearance.linkInfo.FirstLink))
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasObjective_1stSegment', self.obj571.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj571.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj571.Graphical_Appearance.linkInfo.Center.setValue( ('hasObjective_Center', self.obj571.Graphical_Appearance.linkInfo))
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasObjective_2ndSegment', self.obj571.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj571.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasObjective_2ndLink', self.obj571.Graphical_Appearance.linkInfo.SecondLink))
    self.obj571.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj571.Graphical_Appearance.semObject
    self.obj571.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj571.Graphical_Appearance.semObject
    self.obj571.Graphical_Appearance.linkInfo.Center.semObject=self.obj571.Graphical_Appearance.semObject
    self.obj571.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj571.Graphical_Appearance.semObject
    self.obj571.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj571.Graphical_Appearance.semObject

    # name
    self.obj571.name.setValue('hasObjective')

    # displaySelect
    self.obj571.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj571.displaySelect.config = 0

    # attributes
    self.obj571.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj571.attributes.setValue(lcobj2)

    # cardinality
    self.obj571.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj571.cardinality.setValue(lcobj2)

    # display
    self.obj571.display.setValue('Multiplicities:\n  - To Objective: 1 to N\n  - From Role: 0 to N\n  - From Process: 0 to N\n')
    self.obj571.display.setHeight(15)

    # Actions
    self.obj571.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj571.Actions.setValue(lcobj2)

    # Constraints
    self.obj571.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj571.Constraints.setValue(lcobj2)

    self.obj571.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(436.73445957,632.859445861,self.obj571)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.1620000000000001, 1.0838709677419356]
    else: new_obj = None
    self.obj571.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj571)
    self.globalAndLocalPostcondition(self.obj571, rootNode)
    self.obj571.postAction( rootNode.CREATE )

    self.obj572=CD_Association3(self)
    self.obj572.isGraphObjectVisual = True

    if(hasattr(self.obj572, '_setHierarchicalLink')):
      self.obj572._setHierarchicalLink(False)

    # QOCA
    self.obj572.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj572.Graphical_Appearance.setValue( ('genericAssociation', self.obj572))
    self.obj572.Graphical_Appearance.linkInfo=linkEditor(self,self.obj572.Graphical_Appearance.semObject, "genericAssociation")
    self.obj572.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('genericAssociation_1stLink', self.obj572.Graphical_Appearance.linkInfo.FirstLink))
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('genericAssociation_1stSegment', self.obj572.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj572.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj572.Graphical_Appearance.linkInfo.Center.setValue( ('genericAssociation_Center', self.obj572.Graphical_Appearance.linkInfo))
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('genericAssociation_2ndSegment', self.obj572.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj572.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('genericAssociation_2ndLink', self.obj572.Graphical_Appearance.linkInfo.SecondLink))
    self.obj572.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj572.Graphical_Appearance.semObject
    self.obj572.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj572.Graphical_Appearance.semObject
    self.obj572.Graphical_Appearance.linkInfo.Center.semObject=self.obj572.Graphical_Appearance.semObject
    self.obj572.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj572.Graphical_Appearance.semObject
    self.obj572.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj572.Graphical_Appearance.semObject

    # name
    self.obj572.name.setValue('genericAssociation')

    # displaySelect
    self.obj572.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj572.displaySelect.config = 0

    # attributes
    self.obj572.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,10 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj572.attributes.setValue(lcobj2)

    # cardinality
    self.obj572.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj572.cardinality.setValue(lcobj2)

    # display
    self.obj572.display.setValue('Attributes:\n  - Name :: String\n  - Description :: Text\nMultiplicities:\n  - To Role: 1 to N\n  - From Role: 1 to N\n')
    self.obj572.display.setHeight(15)

    # Actions
    self.obj572.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj572.Actions.setValue(lcobj2)

    # Constraints
    self.obj572.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj572.Constraints.setValue(lcobj2)

    self.obj572.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1044.0,340.0,self.obj572)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.015, 1.6258064516129034]
    else: new_obj = None
    self.obj572.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj572)
    self.globalAndLocalPostcondition(self.obj572, rootNode)
    self.obj572.postAction( rootNode.CREATE )

    self.obj573=CD_Association3(self)
    self.obj573.isGraphObjectVisual = True

    if(hasattr(self.obj573, '_setHierarchicalLink')):
      self.obj573._setHierarchicalLink(True)

    # QOCA
    self.obj573.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj573.Graphical_Appearance.setValue( ('answersToRole', self.obj573))
    self.obj573.Graphical_Appearance.linkInfo=linkEditor(self,self.obj573.Graphical_Appearance.semObject, "answersToRole")
    self.obj573.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToRole_1stLink', self.obj573.Graphical_Appearance.linkInfo.FirstLink))
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToRole_1stSegment', self.obj573.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj573.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj573.Graphical_Appearance.linkInfo.Center.setValue( ('answersToRole_Center', self.obj573.Graphical_Appearance.linkInfo))
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToRole_2ndSegment', self.obj573.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj573.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToRole_2ndLink', self.obj573.Graphical_Appearance.linkInfo.SecondLink))
    self.obj573.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj573.Graphical_Appearance.semObject
    self.obj573.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj573.Graphical_Appearance.semObject
    self.obj573.Graphical_Appearance.linkInfo.Center.semObject=self.obj573.Graphical_Appearance.semObject
    self.obj573.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj573.Graphical_Appearance.semObject
    self.obj573.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj573.Graphical_Appearance.semObject

    # name
    self.obj573.name.setValue('answersToRole')

    # displaySelect
    self.obj573.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj573.displaySelect.config = 0

    # attributes
    self.obj573.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj573.attributes.setValue(lcobj2)

    # cardinality
    self.obj573.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj573.cardinality.setValue(lcobj2)

    # display
    self.obj573.display.setValue('Multiplicities:\n  - From Role: 1 to N\n  - To Role: 1 to N\n')
    self.obj573.display.setHeight(15)

    # Actions
    self.obj573.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj573.Actions.setValue(lcobj2)

    # Constraints
    self.obj573.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj573.Constraints.setValue(lcobj2)

    self.obj573.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(933.0,176.0,self.obj573)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj573.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj573)
    self.globalAndLocalPostcondition(self.obj573, rootNode)
    self.obj573.postAction( rootNode.CREATE )

    self.obj574=CD_Association3(self)
    self.obj574.isGraphObjectVisual = True

    if(hasattr(self.obj574, '_setHierarchicalLink')):
      self.obj574._setHierarchicalLink(False)

    # QOCA
    self.obj574.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj574.Graphical_Appearance.setValue( ('canStartProcess', self.obj574))
    self.obj574.Graphical_Appearance.linkInfo=linkEditor(self,self.obj574.Graphical_Appearance.semObject, "canStartProcess")
    self.obj574.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canStartProcess_1stLink', self.obj574.Graphical_Appearance.linkInfo.FirstLink))
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canStartProcess_1stSegment', self.obj574.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj574.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj574.Graphical_Appearance.linkInfo.Center.setValue( ('canStartProcess_Center', self.obj574.Graphical_Appearance.linkInfo))
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canStartProcess_2ndSegment', self.obj574.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj574.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canStartProcess_2ndLink', self.obj574.Graphical_Appearance.linkInfo.SecondLink))
    self.obj574.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj574.Graphical_Appearance.semObject
    self.obj574.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj574.Graphical_Appearance.semObject
    self.obj574.Graphical_Appearance.linkInfo.Center.semObject=self.obj574.Graphical_Appearance.semObject
    self.obj574.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj574.Graphical_Appearance.semObject
    self.obj574.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj574.Graphical_Appearance.semObject

    # name
    self.obj574.name.setValue('canStartProcess')

    # displaySelect
    self.obj574.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj574.displaySelect.config = 0

    # attributes
    self.obj574.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj574.attributes.setValue(lcobj2)

    # cardinality
    self.obj574.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj574.cardinality.setValue(lcobj2)

    # display
    self.obj574.display.setValue('Multiplicities:\n  - To Process: 0 to N\n  - From Role: 0 to N\n')
    self.obj574.display.setHeight(15)

    # Actions
    self.obj574.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj574.Actions.setValue(lcobj2)

    # Constraints
    self.obj574.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj574.Constraints.setValue(lcobj2)

    self.obj574.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(470.4921875,411.163934426,self.obj574)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.036, 1.0]
    else: new_obj = None
    self.obj574.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj574)
    self.globalAndLocalPostcondition(self.obj574, rootNode)
    self.obj574.postAction( rootNode.CREATE )

    self.obj575=CD_Association3(self)
    self.obj575.isGraphObjectVisual = True

    if(hasattr(self.obj575, '_setHierarchicalLink')):
      self.obj575._setHierarchicalLink(True)

    # QOCA
    self.obj575.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj575.Graphical_Appearance.setValue( ('answersToOrgUnit', self.obj575))
    self.obj575.Graphical_Appearance.linkInfo=linkEditor(self,self.obj575.Graphical_Appearance.semObject, "answersToOrgUnit")
    self.obj575.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToOrgUnit_1stLink', self.obj575.Graphical_Appearance.linkInfo.FirstLink))
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToOrgUnit_1stSegment', self.obj575.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj575.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj575.Graphical_Appearance.linkInfo.Center.setValue( ('answersToOrgUnit_Center', self.obj575.Graphical_Appearance.linkInfo))
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToOrgUnit_2ndSegment', self.obj575.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj575.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToOrgUnit_2ndLink', self.obj575.Graphical_Appearance.linkInfo.SecondLink))
    self.obj575.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj575.Graphical_Appearance.semObject
    self.obj575.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj575.Graphical_Appearance.semObject
    self.obj575.Graphical_Appearance.linkInfo.Center.semObject=self.obj575.Graphical_Appearance.semObject
    self.obj575.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj575.Graphical_Appearance.semObject
    self.obj575.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj575.Graphical_Appearance.semObject

    # name
    self.obj575.name.setValue('answersToOrgUnit')

    # displaySelect
    self.obj575.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj575.displaySelect.config = 0

    # attributes
    self.obj575.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj575.attributes.setValue(lcobj2)

    # cardinality
    self.obj575.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj575.cardinality.setValue(lcobj2)

    # display
    self.obj575.display.setValue('Multiplicities:\n  - To OrgUnit: 1 to N\n  - From OrgUnit: 1 to N\n')
    self.obj575.display.setHeight(15)

    # Actions
    self.obj575.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj575.Actions.setValue(lcobj2)

    # Constraints
    self.obj575.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj575.Constraints.setValue(lcobj2)

    self.obj575.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1113.0,79.0,self.obj575)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj575.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj575)
    self.globalAndLocalPostcondition(self.obj575, rootNode)
    self.obj575.postAction( rootNode.CREATE )

    self.obj576=CD_Association3(self)
    self.obj576.isGraphObjectVisual = True

    if(hasattr(self.obj576, '_setHierarchicalLink')):
      self.obj576._setHierarchicalLink(True)

    # QOCA
    self.obj576.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj576.Graphical_Appearance.setValue( ('isPartOfRole', self.obj576))
    self.obj576.Graphical_Appearance.linkInfo=linkEditor(self,self.obj576.Graphical_Appearance.semObject, "isPartOfRole")
    self.obj576.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfRole_1stLink', self.obj576.Graphical_Appearance.linkInfo.FirstLink))
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfRole_1stSegment', self.obj576.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj576.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj576.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfRole_Center', self.obj576.Graphical_Appearance.linkInfo))
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfRole_2ndSegment', self.obj576.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],0,0)
    self.obj576.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfRole_2ndLink', self.obj576.Graphical_Appearance.linkInfo.SecondLink))
    self.obj576.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj576.Graphical_Appearance.semObject
    self.obj576.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj576.Graphical_Appearance.semObject
    self.obj576.Graphical_Appearance.linkInfo.Center.semObject=self.obj576.Graphical_Appearance.semObject
    self.obj576.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj576.Graphical_Appearance.semObject
    self.obj576.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj576.Graphical_Appearance.semObject

    # name
    self.obj576.name.setValue('isPartOfRole')

    # displaySelect
    self.obj576.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj576.displaySelect.config = 0

    # attributes
    self.obj576.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj576.attributes.setValue(lcobj2)

    # cardinality
    self.obj576.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj576.cardinality.setValue(lcobj2)

    # display
    self.obj576.display.setValue('Multiplicities:\n  - From Role: 0 to N\n  - To Role: 0 to N\n')
    self.obj576.display.setHeight(15)

    # Actions
    self.obj576.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj576.Actions.setValue(lcobj2)

    # Constraints
    self.obj576.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj576.Constraints.setValue(lcobj2)

    self.obj576.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(675.0,160.0,self.obj576)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj576.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj576)
    self.globalAndLocalPostcondition(self.obj576, rootNode)
    self.obj576.postAction( rootNode.CREATE )

    self.obj577=CD_Inheritance3(self)
    self.obj577.isGraphObjectVisual = True

    if(hasattr(self.obj577, '_setHierarchicalLink')):
      self.obj577._setHierarchicalLink(False)

    self.obj577.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(1056.21888986,1366.92763695,self.obj577)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj577.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj577)
    self.globalAndLocalPostcondition(self.obj577, rootNode)
    self.obj577.postAction( rootNode.CREATE )

    self.obj578=CD_Inheritance3(self)
    self.obj578.isGraphObjectVisual = True

    if(hasattr(self.obj578, '_setHierarchicalLink')):
      self.obj578._setHierarchicalLink(False)

    self.obj578.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(1136.90914946,1358.75085967,self.obj578)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj578.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj578)
    self.globalAndLocalPostcondition(self.obj578, rootNode)
    self.obj578.postAction( rootNode.CREATE )

    self.obj579=CD_Inheritance3(self)
    self.obj579.isGraphObjectVisual = True

    if(hasattr(self.obj579, '_setHierarchicalLink')):
      self.obj579._setHierarchicalLink(False)

    self.obj579.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(152.858254695,586.846159545,self.obj579)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj579.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj579)
    self.globalAndLocalPostcondition(self.obj579, rootNode)
    self.obj579.postAction( rootNode.CREATE )

    # Connections for obj557 (graphObject_: Obj777) named OrgUnit
    self.drawConnections(
(self.obj557,self.obj566,[1368.8125, 220.52459016393442, 1387.9955983980042, 65.8097262245276, 1387.9955984, 65.80972622499999],"true", 3),
(self.obj557,self.obj567,[1241.14453125, 483.0655737704918, 967.8422485527899, 481.40176688146084, 971.7601868, 527.680947659],"true", 3),
(self.obj557,self.obj569,[1241.14453125, 483.0655737704918, 997.8287423035672, 492.3266545159663, 1106.462784, 821.548234957],"true", 3),
(self.obj557,self.obj575,[1241.14453125, 323.8032786885246, 1130.0, 231.0, 1113.0, 79.0], 0, 3) )
    # Connections for obj558 (graphObject_: Obj778) named Role
    self.drawConnections(
(self.obj558,self.obj568,[660.0, 811.0, 541.1631302538499, 883.356649681594, 503.161248615, 952.001803815],"true", 3),
(self.obj558,self.obj569,[832.921875, 735.2622950819672, 1023.5805784296024, 714.1457487347751, 1106.462784, 821.548234957],"true", 3),
(self.obj558,self.obj571,[620.953125, 538.344262295082, 522.0012232889502, 553.7739542825374, 436.73445957, 632.859445861],"true", 3),
(self.obj558,self.obj572,[832.921875, 432.3114754098361, 1044.0, 340.0], 0, 2),
(self.obj558,self.obj573,[793.875, 280.8360655737705, 933.0, 176.0], 0, 2),
(self.obj558,self.obj574,[620.953125, 432.3114754098361, 470.4921875, 411.163934426], 0, 2),
(self.obj558,self.obj576,[660.0, 280.8360655737705, 675.0, 160.0],"true", 2) )
    # Connections for obj559 (graphObject_: Obj779) named Action
    self.drawConnections(
 )
    # Connections for obj560 (graphObject_: Obj780) named KnowledgeArtifacts
    self.drawConnections(
 )
    # Connections for obj561 (graphObject_: Obj781) named OrganisationalKnArt
    self.drawConnections(
(self.obj561,self.obj577,[935.5703125, 1206.090909090909, 1056.21888986, 1366.92763695],"true", 2) )
    # Connections for obj562 (graphObject_: Obj782) named IndividualKnArt
    self.drawConnections(
(self.obj562,self.obj578,[1240.7421875, 1186.090909090909, 1136.90914946, 1358.75085967],"true", 2) )
    # Connections for obj563 (graphObject_: Obj783) named Strategy
    self.drawConnections(
 )
    # Connections for obj564 (graphObject_: Obj784) named Objective
    self.drawConnections(
(self.obj564,self.obj579,[139.75, 629.4918032786885, 152.858254695, 586.846159545],"true", 2),
(self.obj564,self.obj570,[139.75, 803.0, 131.94404651894035, 946.9122308488277, 131.944046519, 946.91223085],"true", 3) )
    # Connections for obj565 (graphObject_: Obj785) named Process
    self.drawConnections(
(self.obj565,self.obj571,[324.0, 283.0, 333.0, 453.0, 436.73445957, 632.859445861],"true", 3) )
    # Connections for obj566 (graphObject_: Obj786) named isPartOfOrgUnit
    self.drawConnections(
(self.obj566,self.obj557,[1387.9955984, 65.80972622499999, 1387.9955983980042, 65.8097262245276, 1368.8125, 220.52459016393442],"true", 3) )
    # Connections for obj567 (graphObject_: Obj788) named canHaveRole
    self.drawConnections(
(self.obj567,self.obj558,[971.7601868, 527.680947659, 975.67812505129, 573.9601284363068, 832.921875, 538.344262295082],"true", 3) )
    # Connections for obj568 (graphObject_: Obj790) named hasActions
    self.drawConnections(
(self.obj568,self.obj559,[503.161248615, 952.001803815, 465.1593669760688, 1020.6469579482074, 741.20703125, 946.0909090909091],"true", 3) )
    # Connections for obj569 (graphObject_: Obj792) named canAccessKnArt
    self.drawConnections(
(self.obj569,self.obj561,[1106.462784, 821.548234957, 1128.2678325033444, 887.9439489105719, 935.5703125, 1122.4545454545455],"true", 3),
(self.obj569,self.obj562,[1106.462784, 821.548234957, 1033.4035107781324, 923.4763808302594, 1240.7421875, 1102.4545454545455],"true", 3) )
    # Connections for obj570 (graphObject_: Obj794) named isPartOfObjective
    self.drawConnections(
(self.obj570,self.obj564,[131.944046519, 946.91223085, 131.94404651894035, 946.9122308488277, 139.75, 803.0],"true", 3) )
    # Connections for obj571 (graphObject_: Obj796) named hasObjective
    self.drawConnections(
(self.obj571,self.obj564,[436.73445957, 632.859445861, 351.4676958509182, 711.9449374392455, 281.65625, 698.8950819672131],"true", 3) )
    # Connections for obj572 (graphObject_: Obj798) named genericAssociation
    self.drawConnections(
(self.obj572,self.obj558,[1044.0, 340.0, 832.921875, 432.3114754098361], 0, 2) )
    # Connections for obj573 (graphObject_: Obj800) named answersToRole
    self.drawConnections(
(self.obj573,self.obj558,[933.0, 176.0, 793.875, 280.8360655737705], 0, 2) )
    # Connections for obj574 (graphObject_: Obj802) named canStartProcess
    self.drawConnections(
(self.obj574,self.obj565,[470.4921875, 411.163934426, 471.65625, 283.0], 0, 2) )
    # Connections for obj575 (graphObject_: Obj804) named answersToOrgUnit
    self.drawConnections(
(self.obj575,self.obj557,[1113.0, 79.0, 1279.0, 145.0, 1280.0, 220.52459016393442], 0, 3) )
    # Connections for obj576 (graphObject_: Obj806) named isPartOfRole
    self.drawConnections(
(self.obj576,self.obj558,[675.0, 160.0, 660.0, 280.8360655737705],"true", 2) )
    # Connections for obj577 (graphObject_: Obj808) of type CD_Inheritance3
    self.drawConnections(
(self.obj577,self.obj560,[1056.21888986, 1366.92763695, 1073.0, 1255.0],"true", 2) )
    # Connections for obj578 (graphObject_: Obj810) of type CD_Inheritance3
    self.drawConnections(
(self.obj578,self.obj560,[1136.90914946, 1358.75085967, 1153.0, 1255.0],"true", 2) )
    # Connections for obj579 (graphObject_: Obj812) of type CD_Inheritance3
    self.drawConnections(
(self.obj579,self.obj563,[152.858254695, 586.846159545, 156.0, 487.0],"true", 2) )

newfunction = LSMASOMM_MDL

loadedMMName = 'CD_ClassDiagramsV3_META'

atom3version = '0.3'
