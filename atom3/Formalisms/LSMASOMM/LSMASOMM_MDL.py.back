"""
__LSMASOMM_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: bogdan
Modified: Mon Nov 14 16:59:00 2016
______________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from CD_Class3 import *
from CD_Association3 import *
from CD_Inheritance3 import *
from graph_CD_Association3 import *
from graph_CD_Class3 import *
from graph_CD_Inheritance3 import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def LSMASOMM_MDL(self, rootNode, CD_ClassDiagramsV3RootNode=None):

    # --- Generating attributes code for ASG CD_ClassDiagramsV3 ---
    if( CD_ClassDiagramsV3RootNode ): 
        # name
        CD_ClassDiagramsV3RootNode.name.setValue('LSMASOMM')

        # author
        CD_ClassDiagramsV3RootNode.author.setValue('Bogdan')

        # showCardinalities
        CD_ClassDiagramsV3RootNode.showCardinalities.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showCardinalities.config = 0

        # showAssociationBox
        CD_ClassDiagramsV3RootNode.showAssociationBox.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAssociationBox.config = 0

        # description
        CD_ClassDiagramsV3RootNode.description.setValue('\n')
        CD_ClassDiagramsV3RootNode.description.setHeight(15)

        # showAttributes
        CD_ClassDiagramsV3RootNode.showAttributes.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAttributes.config = 0

        # showActions
        CD_ClassDiagramsV3RootNode.showActions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showActions.config = 0

        # showConditions
        CD_ClassDiagramsV3RootNode.showConditions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showConditions.config = 0

        # attributes
        CD_ClassDiagramsV3RootNode.attributes.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('name', 'String', None, ('Key', 1), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('author', 'String', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('Annonymous', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3Text('\n', 60,15 )
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        CD_ClassDiagramsV3RootNode.attributes.setValue(lcobj1)

        # constraints
        CD_ClassDiagramsV3RootNode.constraints.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        CD_ClassDiagramsV3RootNode.constraints.setValue(lcobj1)
    # --- ASG attributes over ---


    self.obj129=CD_Class3(self)
    self.obj129.isGraphObjectVisual = True

    if(hasattr(self.obj129, '_setHierarchicalLink')):
      self.obj129._setHierarchicalLink(False)

    # QOCA
    self.obj129.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj129.Graphical_Appearance.setValue( ('OrgUnit', self.obj129))

    # name
    self.obj129.name.setValue('OrgUnit')

    # attributes
    self.obj129.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Individual', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue((None, 1))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('UnitActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj3=ATOM3String('ChangeRole', 20)
    lcobj3.append(cobj3)
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('UnitSize', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('Individual', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('orgUnitName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj129.attributes.setValue(lcobj2)

    # Abstract
    self.obj129.Abstract.setValue((None, 0))
    self.obj129.Abstract.config = 0

    # cardinality
    self.obj129.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj129.cardinality.setValue(lcobj2)

    # display
    self.obj129.display.setValue('Attributes:\n  - Individual :: Boolean\n  - UnitActions :: List\n  - UnitSize :: String\n  - name :: String\nConstraints:\n  > ConstraintOutputOrgUnit\nActions:\n  > determineSize\nMultiplicities:\n  - To isPartOfOrgUnit: 0 to N\n  - From isPartOfOrgUnit: 0 to N\n  - To canHaveRole: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To answersToOrgUnit: 0 to N\n  - From answersToOrgUnit: 0 to N\n')
    self.obj129.display.setHeight(15)

    # Actions
    self.obj129.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('determineSize', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitDetermineSize(self)\nself.UnitSize.setValue(res)\nself.graphObject_.ModifyAttribute(\'UnitSize\', res)\n\n'))
    lcobj2.append(cobj2)
    self.obj129.Actions.setValue(lcobj2)

    # Constraints
    self.obj129.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintOutputOrgUnit', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitCheckOutputs(self)\nif res is "manyKnArts":\n    return ("OrgUnit can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj129.Constraints.setValue(lcobj2)

    self.obj129.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1240.0,220.0,self.obj129)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.88
       new_obj.layConstraints['scale'] = [1.11015625, 2.7540983606557377]
    else: new_obj = None
    self.obj129.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj129)
    self.globalAndLocalPostcondition(self.obj129, rootNode)
    self.obj129.postAction( rootNode.CREATE )

    self.obj130=CD_Class3(self)
    self.obj130.isGraphObjectVisual = True

    if(hasattr(self.obj130, '_setHierarchicalLink')):
      self.obj130._setHierarchicalLink(False)

    # QOCA
    self.obj130.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj130.Graphical_Appearance.setValue( ('Role', self.obj130))

    # name
    self.obj130.name.setValue('Role')

    # attributes
    self.obj130.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('RoleID', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('isMetaRole', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue((None, 0))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('role name', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('roleActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj3=ATOM3String('RoleAction1', 20)
    lcobj3.append(cobj3)
    cobj3=ATOM3String('RoleAction2', 20)
    lcobj3.append(cobj3)
    cobj3=ATOM3String('RoleActionN', 20)
    lcobj3.append(cobj3)
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj130.attributes.setValue(lcobj2)

    # Abstract
    self.obj130.Abstract.setValue((None, 0))
    self.obj130.Abstract.config = 0

    # cardinality
    self.obj130.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj130.cardinality.setValue(lcobj2)

    # display
    self.obj130.display.setValue('Attributes:\n  - ID :: String\n  - isMetaRole :: Boolean\n  - name :: String\n  - roleActions :: List\nConstraints:\n  > RoleConstraintKnArt\nActions:\n  > checkMetaRole\nMultiplicities:\n  - From canHaveRole: 0 to N\n  - To hasActions: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To hasObjective: 0 to N\n  - To genericAssociation: 0 to N\n  - From genericAssociation: 0 to N\n  - To answersToRole: 0 to N\n  - From answersToRole: 0 to N\n  - To canStartProcess: 0 to N\n  - To isPartOfRole: 0 to N\n  - From isPartOfRole: 0 to N\n')
    self.obj130.display.setHeight(15)

    # Actions
    self.obj130.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('checkMetaRole', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0]), 'from CustomCode import RoleHierarchy\nres = RoleHierarchy(self)\nself.isMetaRole.setValue((\'isMetaRole\',res))\nself.graphObject_.ModifyAttribute(\'isMetaRole\', res)\n\n'))
    lcobj2.append(cobj2)
    self.obj130.Actions.setValue(lcobj2)

    # Constraints
    self.obj130.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('RoleConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), '\nfrom CustomCode import *\n\nres = RoleCheckOutputs(self)\nif res is "manyKnArts":\n    return ("Roles can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelif res is "IndivKnArtError":\n    return ("Roles can have OrganizationalKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj130.Constraints.setValue(lcobj2)

    self.obj130.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(620.0,280.0,self.obj130)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.85
       new_obj.layConstraints['scale'] = [1.115625, 3.6147540983606556]
    else: new_obj = None
    self.obj130.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj130)
    self.globalAndLocalPostcondition(self.obj130, rootNode)
    self.obj130.postAction( rootNode.CREATE )

    self.obj131=CD_Class3(self)
    self.obj131.isGraphObjectVisual = True

    if(hasattr(self.obj131, '_setHierarchicalLink')):
      self.obj131._setHierarchicalLink(False)

    # QOCA
    self.obj131.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj131.Graphical_Appearance.setValue( ('Action', self.obj131))

    # name
    self.obj131.name.setValue('Action')

    # attributes
    self.obj131.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ActionCode', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#action code placeholder or description\n#\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('ActionName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj131.attributes.setValue(lcobj2)

    # Abstract
    self.obj131.Abstract.setValue((None, 0))
    self.obj131.Abstract.config = 0

    # cardinality
    self.obj131.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj131.cardinality.setValue(lcobj2)

    # display
    self.obj131.display.setValue('Attributes:\n  - ActionCode :: Text\n  - name :: String\nMultiplicities:\n  - From hasActions: 0 to N\n')
    self.obj131.display.setHeight(15)

    # Actions
    self.obj131.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj131.Actions.setValue(lcobj2)

    # Constraints
    self.obj131.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj131.Constraints.setValue(lcobj2)

    self.obj131.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(740.0,820.0,self.obj131)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 1.06
       new_obj.layConstraints['scale'] = [1.02265625, 1.0454545454545454]
    else: new_obj = None
    self.obj131.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj131)
    self.globalAndLocalPostcondition(self.obj131, rootNode)
    self.obj131.postAction( rootNode.CREATE )

    self.obj132=CD_Class3(self)
    self.obj132.isGraphObjectVisual = True

    if(hasattr(self.obj132, '_setHierarchicalLink')):
      self.obj132._setHierarchicalLink(False)

    # QOCA
    self.obj132.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj132.Graphical_Appearance.setValue( ('KnowledgeArtifacts', self.obj132))

    # name
    self.obj132.name.setValue('KnowledgeArtifacts')

    # attributes
    self.obj132.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj132.attributes.setValue(lcobj2)

    # Abstract
    self.obj132.Abstract.setValue((None, 1))
    self.obj132.Abstract.config = 0

    # cardinality
    self.obj132.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj132.cardinality.setValue(lcobj2)

    # display
    self.obj132.display.setValue('Attributes:\n  - ID :: String\n  - description :: String\n  - name :: String\n')
    self.obj132.display.setHeight(15)

    # Actions
    self.obj132.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj132.Actions.setValue(lcobj2)

    # Constraints
    self.obj132.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj132.Constraints.setValue(lcobj2)

    self.obj132.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(980.0,1080.0,self.obj132)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0454545454545454]
    else: new_obj = None
    self.obj132.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj132)
    self.globalAndLocalPostcondition(self.obj132, rootNode)
    self.obj132.postAction( rootNode.CREATE )

    self.obj133=CD_Class3(self)
    self.obj133.isGraphObjectVisual = True

    if(hasattr(self.obj133, '_setHierarchicalLink')):
      self.obj133._setHierarchicalLink(False)

    # QOCA
    self.obj133.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj133.Graphical_Appearance.setValue( ('OrganisationalKnArt', self.obj133))

    # name
    self.obj133.name.setValue('OrganisationalKnArt')

    # attributes
    self.obj133.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj133.attributes.setValue(lcobj2)

    # Abstract
    self.obj133.Abstract.setValue((None, 0))
    self.obj133.Abstract.config = 0

    # cardinality
    self.obj133.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj133.cardinality.setValue(lcobj2)

    # display
    self.obj133.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj133.display.setHeight(15)

    # Actions
    self.obj133.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj133.Actions.setValue(lcobj2)

    # Constraints
    self.obj133.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj133.Constraints.setValue(lcobj2)

    self.obj133.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(700.0,1080.0,self.obj133)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj133.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj133)
    self.globalAndLocalPostcondition(self.obj133, rootNode)
    self.obj133.postAction( rootNode.CREATE )

    self.obj134=CD_Class3(self)
    self.obj134.isGraphObjectVisual = True

    if(hasattr(self.obj134, '_setHierarchicalLink')):
      self.obj134._setHierarchicalLink(False)

    # QOCA
    self.obj134.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj134.Graphical_Appearance.setValue( ('IndividualKnArt', self.obj134))

    # name
    self.obj134.name.setValue('IndividualKnArt')

    # attributes
    self.obj134.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtID', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj134.attributes.setValue(lcobj2)

    # Abstract
    self.obj134.Abstract.setValue((None, 0))
    self.obj134.Abstract.config = 0

    # cardinality
    self.obj134.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj134.cardinality.setValue(lcobj2)

    # display
    self.obj134.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj134.display.setHeight(15)

    # Actions
    self.obj134.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj134.Actions.setValue(lcobj2)

    # Constraints
    self.obj134.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj134.Constraints.setValue(lcobj2)

    self.obj134.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1240.0,1060.0,self.obj134)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj134.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj134)
    self.globalAndLocalPostcondition(self.obj134, rootNode)
    self.obj134.postAction( rootNode.CREATE )

    self.obj135=CD_Class3(self)
    self.obj135.isGraphObjectVisual = True

    if(hasattr(self.obj135, '_setHierarchicalLink')):
      self.obj135._setHierarchicalLink(False)

    # QOCA
    self.obj135.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj135.Graphical_Appearance.setValue( ('Strategy', self.obj135))

    # name
    self.obj135.name.setValue('Strategy')

    # attributes
    self.obj135.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('STR', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj135.attributes.setValue(lcobj2)

    # Abstract
    self.obj135.Abstract.setValue((None, 1))
    self.obj135.Abstract.config = 0

    # cardinality
    self.obj135.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj135.cardinality.setValue(lcobj2)

    # display
    self.obj135.display.setValue('Attributes:\n  - Description :: Text\n  - ID :: String\n  - name :: String\n')
    self.obj135.display.setHeight(15)

    # Actions
    self.obj135.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj135.Actions.setValue(lcobj2)

    # Constraints
    self.obj135.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj135.Constraints.setValue(lcobj2)

    self.obj135.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(40.0,340.0,self.obj135)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0454545454545454]
    else: new_obj = None
    self.obj135.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj135)
    self.globalAndLocalPostcondition(self.obj135, rootNode)
    self.obj135.postAction( rootNode.CREATE )

    self.obj136=CD_Class3(self)
    self.obj136.isGraphObjectVisual = True

    if(hasattr(self.obj136, '_setHierarchicalLink')):
      self.obj136._setHierarchicalLink(False)

    # QOCA
    self.obj136.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj136.Graphical_Appearance.setValue( ('Objective', self.obj136))

    # name
    self.obj136.name.setValue('Objective')

    # attributes
    self.obj136.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('STR', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Measurement', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Reward', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj136.attributes.setValue(lcobj2)

    # Abstract
    self.obj136.Abstract.setValue((None, 0))
    self.obj136.Abstract.config = 0

    # cardinality
    self.obj136.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj136.cardinality.setValue(lcobj2)

    # display
    self.obj136.display.setValue('Attributes:\n  - Measurement :: Text\n  - Reward :: Text\nMultiplicities:\n  - To isPartOfObjective: 0 to N\n  - From isPartOfObjective: 0 to N\n  - From hasObjective: 0 to N\n')
    self.obj136.display.setHeight(15)

    # Actions
    self.obj136.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj136.Actions.setValue(lcobj2)

    # Constraints
    self.obj136.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj136.Constraints.setValue(lcobj2)

    self.obj136.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(40.0,600.0,self.obj136)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.26875, 1.4459016393442625]
    else: new_obj = None
    self.obj136.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj136)
    self.globalAndLocalPostcondition(self.obj136, rootNode)
    self.obj136.postAction( rootNode.CREATE )

    self.obj137=CD_Class3(self)
    self.obj137.isGraphObjectVisual = True

    if(hasattr(self.obj137, '_setHierarchicalLink')):
      self.obj137._setHierarchicalLink(False)

    # QOCA
    self.obj137.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj137.Graphical_Appearance.setValue( ('Process', self.obj137))

    # name
    self.obj137.name.setValue('Process')

    # attributes
    self.obj137.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Activities', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,10 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('PRCS', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj137.attributes.setValue(lcobj2)

    # Abstract
    self.obj137.Abstract.setValue((None, 0))
    self.obj137.Abstract.config = 0

    # cardinality
    self.obj137.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj137.cardinality.setValue(lcobj2)

    # display
    self.obj137.display.setValue('Attributes:\n  - Activities :: Text\n  - ID :: String\n  - Name :: String\nMultiplicities:\n  - From canStartProcess: 0 to N\n  - To hasObjective: 0 to N\n')
    self.obj137.display.setHeight(15)

    # Actions
    self.obj137.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj137.Actions.setValue(lcobj2)

    # Constraints
    self.obj137.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj137.Constraints.setValue(lcobj2)

    self.obj137.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(280.0,80.0,self.obj137)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.23046875, 1.4459016393442625]
    else: new_obj = None
    self.obj137.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj137)
    self.globalAndLocalPostcondition(self.obj137, rootNode)
    self.obj137.postAction( rootNode.CREATE )

    self.obj138=CD_Association3(self)
    self.obj138.isGraphObjectVisual = True

    if(hasattr(self.obj138, '_setHierarchicalLink')):
      self.obj138._setHierarchicalLink(True)

    # QOCA
    self.obj138.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj138.Graphical_Appearance.setValue( ('isPartOfOrgUnit', self.obj138))
    self.obj138.Graphical_Appearance.linkInfo=linkEditor(self,self.obj138.Graphical_Appearance.semObject, "isPartOfOrgUnit")
    self.obj138.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfOrgUnit_1stLink', self.obj138.Graphical_Appearance.linkInfo.FirstLink))
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfOrgUnit_1stSegment', self.obj138.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj138.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj138.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfOrgUnit_Center', self.obj138.Graphical_Appearance.linkInfo))
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfOrgUnit_2ndSegment', self.obj138.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj138.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfOrgUnit_2ndLink', self.obj138.Graphical_Appearance.linkInfo.SecondLink))
    self.obj138.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj138.Graphical_Appearance.semObject
    self.obj138.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj138.Graphical_Appearance.semObject
    self.obj138.Graphical_Appearance.linkInfo.Center.semObject=self.obj138.Graphical_Appearance.semObject
    self.obj138.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj138.Graphical_Appearance.semObject
    self.obj138.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj138.Graphical_Appearance.semObject

    # name
    self.obj138.name.setValue('isPartOfOrgUnit')

    # displaySelect
    self.obj138.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj138.displaySelect.config = 0

    # attributes
    self.obj138.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj138.attributes.setValue(lcobj2)

    # cardinality
    self.obj138.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj138.cardinality.setValue(lcobj2)

    # display
    self.obj138.display.setValue('Multiplicities:\n  - From OrgUnit: 1 to N\n  - To OrgUnit: 1 to N\n')
    self.obj138.display.setHeight(15)

    # Actions
    self.obj138.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj138.Actions.setValue(lcobj2)

    # Constraints
    self.obj138.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj138.Constraints.setValue(lcobj2)

    self.obj138.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1387.9955984,65.809726225,self.obj138)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj138.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj138)
    self.globalAndLocalPostcondition(self.obj138, rootNode)
    self.obj138.postAction( rootNode.CREATE )

    self.obj139=CD_Association3(self)
    self.obj139.isGraphObjectVisual = True

    if(hasattr(self.obj139, '_setHierarchicalLink')):
      self.obj139._setHierarchicalLink(True)

    # QOCA
    self.obj139.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj139.Graphical_Appearance.setValue( ('canHaveRole', self.obj139))
    self.obj139.Graphical_Appearance.linkInfo=linkEditor(self,self.obj139.Graphical_Appearance.semObject, "canHaveRole")
    self.obj139.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canHaveRole_1stLink', self.obj139.Graphical_Appearance.linkInfo.FirstLink))
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canHaveRole_1stSegment', self.obj139.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj139.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj139.Graphical_Appearance.linkInfo.Center.setValue( ('canHaveRole_Center', self.obj139.Graphical_Appearance.linkInfo))
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canHaveRole_2ndSegment', self.obj139.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj139.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canHaveRole_2ndLink', self.obj139.Graphical_Appearance.linkInfo.SecondLink))
    self.obj139.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj139.Graphical_Appearance.semObject
    self.obj139.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj139.Graphical_Appearance.semObject
    self.obj139.Graphical_Appearance.linkInfo.Center.semObject=self.obj139.Graphical_Appearance.semObject
    self.obj139.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj139.Graphical_Appearance.semObject
    self.obj139.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj139.Graphical_Appearance.semObject

    # name
    self.obj139.name.setValue('canHaveRole')

    # displaySelect
    self.obj139.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj139.displaySelect.config = 0

    # attributes
    self.obj139.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj139.attributes.setValue(lcobj2)

    # cardinality
    self.obj139.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj139.cardinality.setValue(lcobj2)

    # display
    self.obj139.display.setValue('Multiplicities:\n  - From OrgUnit: 0 to N\n  - To Role: 0 to N\n')
    self.obj139.display.setHeight(15)

    # Actions
    self.obj139.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj139.Actions.setValue(lcobj2)

    # Constraints
    self.obj139.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj139.Constraints.setValue(lcobj2)

    self.obj139.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(971.7601868,527.680947659,self.obj139)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj139.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj139)
    self.globalAndLocalPostcondition(self.obj139, rootNode)
    self.obj139.postAction( rootNode.CREATE )

    self.obj140=CD_Association3(self)
    self.obj140.isGraphObjectVisual = True

    if(hasattr(self.obj140, '_setHierarchicalLink')):
      self.obj140._setHierarchicalLink(False)

    # QOCA
    self.obj140.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj140.Graphical_Appearance.setValue( ('hasActions', self.obj140))
    self.obj140.Graphical_Appearance.linkInfo=linkEditor(self,self.obj140.Graphical_Appearance.semObject, "hasActions")
    self.obj140.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasActions_1stLink', self.obj140.Graphical_Appearance.linkInfo.FirstLink))
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasActions_1stSegment', self.obj140.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj140.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj140.Graphical_Appearance.linkInfo.Center.setValue( ('hasActions_Center', self.obj140.Graphical_Appearance.linkInfo))
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasActions_2ndSegment', self.obj140.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj140.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasActions_2ndLink', self.obj140.Graphical_Appearance.linkInfo.SecondLink))
    self.obj140.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj140.Graphical_Appearance.semObject
    self.obj140.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj140.Graphical_Appearance.semObject
    self.obj140.Graphical_Appearance.linkInfo.Center.semObject=self.obj140.Graphical_Appearance.semObject
    self.obj140.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj140.Graphical_Appearance.semObject
    self.obj140.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj140.Graphical_Appearance.semObject

    # name
    self.obj140.name.setValue('hasActions')

    # displaySelect
    self.obj140.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj140.displaySelect.config = 0

    # attributes
    self.obj140.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj140.attributes.setValue(lcobj2)

    # cardinality
    self.obj140.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Action', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', '1'))
    lcobj2.append(cobj2)
    self.obj140.cardinality.setValue(lcobj2)

    # display
    self.obj140.display.setValue('Multiplicities:\n  - To Action: 1 to N\n  - From Role: 1 to 1\n')
    self.obj140.display.setHeight(15)

    # Actions
    self.obj140.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj140.Actions.setValue(lcobj2)

    # Constraints
    self.obj140.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj140.Constraints.setValue(lcobj2)

    self.obj140.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(503.161248615,952.001803815,self.obj140)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj140.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj140)
    self.globalAndLocalPostcondition(self.obj140, rootNode)
    self.obj140.postAction( rootNode.CREATE )

    self.obj141=CD_Association3(self)
    self.obj141.isGraphObjectVisual = True

    if(hasattr(self.obj141, '_setHierarchicalLink')):
      self.obj141._setHierarchicalLink(False)

    # QOCA
    self.obj141.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj141.Graphical_Appearance.setValue( ('canAccessKnArt', self.obj141))
    self.obj141.Graphical_Appearance.linkInfo=linkEditor(self,self.obj141.Graphical_Appearance.semObject, "canAccessKnArt")
    self.obj141.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canAccessKnArt_1stLink', self.obj141.Graphical_Appearance.linkInfo.FirstLink))
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canAccessKnArt_1stSegment', self.obj141.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj141.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj141.Graphical_Appearance.linkInfo.Center.setValue( ('canAccessKnArt_Center', self.obj141.Graphical_Appearance.linkInfo))
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canAccessKnArt_2ndSegment', self.obj141.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj141.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canAccessKnArt_2ndLink', self.obj141.Graphical_Appearance.linkInfo.SecondLink))
    self.obj141.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj141.Graphical_Appearance.semObject
    self.obj141.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj141.Graphical_Appearance.semObject
    self.obj141.Graphical_Appearance.linkInfo.Center.semObject=self.obj141.Graphical_Appearance.semObject
    self.obj141.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj141.Graphical_Appearance.semObject
    self.obj141.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj141.Graphical_Appearance.semObject

    # name
    self.obj141.name.setValue('canAccessKnArt')

    # displaySelect
    self.obj141.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj141.displaySelect.config = 0

    # attributes
    self.obj141.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj141.attributes.setValue(lcobj2)

    # cardinality
    self.obj141.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrganisationalKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('IndividualKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj141.cardinality.setValue(lcobj2)

    # display
    self.obj141.display.setValue('Constraints:\n  > ConstraintKnArt\nMultiplicities:\n  - To OrganisationalKnArt: 0 to N\n  - From Role: 0 to N\n  - From OrgUnit: 0 to N\n  - To IndividualKnArt: 0 to N\n')
    self.obj141.display.setHeight(15)

    # Actions
    self.obj141.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj141.Actions.setValue(lcobj2)

    # Constraints
    self.obj141.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = canAccessKnArtCheckConnections(self)\n\nif res is "eitherRoleOrUnit":\n    return ("Either Role of OrgUnit can access knowledge.", self.graphObject_)\nelif res is "onlyOneInput":\n    return ("Only one Role or OrgUnit can access one knowledge medium.", self.graphObject_)\nelif res is "RoleWithOrgOnly":\n    return ("Role can access OrganisationalKnArt only!", self.graphObject_)\nelif res is "OrgUnitWithIndivOnly":\n    return ("OrgUnit can access IndividualKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj141.Constraints.setValue(lcobj2)

    self.obj141.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1106.462784,821.548234957,self.obj141)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.6380000000000001, 1.8967741935483875]
    else: new_obj = None
    self.obj141.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj141)
    self.globalAndLocalPostcondition(self.obj141, rootNode)
    self.obj141.postAction( rootNode.CREATE )

    self.obj142=CD_Association3(self)
    self.obj142.isGraphObjectVisual = True

    if(hasattr(self.obj142, '_setHierarchicalLink')):
      self.obj142._setHierarchicalLink(True)

    # QOCA
    self.obj142.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj142.Graphical_Appearance.setValue( ('isPartOfObjective', self.obj142))
    self.obj142.Graphical_Appearance.linkInfo=linkEditor(self,self.obj142.Graphical_Appearance.semObject, "isPartOfObjective")
    self.obj142.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfObjective_1stLink', self.obj142.Graphical_Appearance.linkInfo.FirstLink))
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfObjective_1stSegment', self.obj142.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj142.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj142.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfObjective_Center', self.obj142.Graphical_Appearance.linkInfo))
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfObjective_2ndSegment', self.obj142.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj142.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfObjective_2ndLink', self.obj142.Graphical_Appearance.linkInfo.SecondLink))
    self.obj142.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj142.Graphical_Appearance.semObject
    self.obj142.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj142.Graphical_Appearance.semObject
    self.obj142.Graphical_Appearance.linkInfo.Center.semObject=self.obj142.Graphical_Appearance.semObject
    self.obj142.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj142.Graphical_Appearance.semObject
    self.obj142.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj142.Graphical_Appearance.semObject

    # name
    self.obj142.name.setValue('isPartOfObjective')

    # displaySelect
    self.obj142.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj142.displaySelect.config = 0

    # attributes
    self.obj142.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj142.attributes.setValue(lcobj2)

    # cardinality
    self.obj142.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj142.cardinality.setValue(lcobj2)

    # display
    self.obj142.display.setValue('Multiplicities:\n  - From Objective: 0 to N\n  - To Objective: 0 to N\n')
    self.obj142.display.setHeight(15)

    # Actions
    self.obj142.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj142.Actions.setValue(lcobj2)

    # Constraints
    self.obj142.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj142.Constraints.setValue(lcobj2)

    self.obj142.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(131.944046519,946.91223085,self.obj142)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.225, 1.0]
    else: new_obj = None
    self.obj142.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj142)
    self.globalAndLocalPostcondition(self.obj142, rootNode)
    self.obj142.postAction( rootNode.CREATE )

    self.obj143=CD_Association3(self)
    self.obj143.isGraphObjectVisual = True

    if(hasattr(self.obj143, '_setHierarchicalLink')):
      self.obj143._setHierarchicalLink(False)

    # QOCA
    self.obj143.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj143.Graphical_Appearance.setValue( ('hasObjective', self.obj143))
    self.obj143.Graphical_Appearance.linkInfo=linkEditor(self,self.obj143.Graphical_Appearance.semObject, "hasObjective")
    self.obj143.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasObjective_1stLink', self.obj143.Graphical_Appearance.linkInfo.FirstLink))
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasObjective_1stSegment', self.obj143.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj143.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj143.Graphical_Appearance.linkInfo.Center.setValue( ('hasObjective_Center', self.obj143.Graphical_Appearance.linkInfo))
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasObjective_2ndSegment', self.obj143.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj143.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasObjective_2ndLink', self.obj143.Graphical_Appearance.linkInfo.SecondLink))
    self.obj143.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj143.Graphical_Appearance.semObject
    self.obj143.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj143.Graphical_Appearance.semObject
    self.obj143.Graphical_Appearance.linkInfo.Center.semObject=self.obj143.Graphical_Appearance.semObject
    self.obj143.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj143.Graphical_Appearance.semObject
    self.obj143.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj143.Graphical_Appearance.semObject

    # name
    self.obj143.name.setValue('hasObjective')

    # displaySelect
    self.obj143.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj143.displaySelect.config = 0

    # attributes
    self.obj143.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj143.attributes.setValue(lcobj2)

    # cardinality
    self.obj143.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj143.cardinality.setValue(lcobj2)

    # display
    self.obj143.display.setValue('Multiplicities:\n  - To Objective: 1 to N\n  - From Role: 0 to N\n  - From Process: 0 to N\n')
    self.obj143.display.setHeight(15)

    # Actions
    self.obj143.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj143.Actions.setValue(lcobj2)

    # Constraints
    self.obj143.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj143.Constraints.setValue(lcobj2)

    self.obj143.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(436.73445957,632.859445861,self.obj143)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.1620000000000001, 1.0838709677419356]
    else: new_obj = None
    self.obj143.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj143)
    self.globalAndLocalPostcondition(self.obj143, rootNode)
    self.obj143.postAction( rootNode.CREATE )

    self.obj144=CD_Association3(self)
    self.obj144.isGraphObjectVisual = True

    if(hasattr(self.obj144, '_setHierarchicalLink')):
      self.obj144._setHierarchicalLink(False)

    # QOCA
    self.obj144.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj144.Graphical_Appearance.setValue( ('genericAssociation', self.obj144))
    self.obj144.Graphical_Appearance.linkInfo=linkEditor(self,self.obj144.Graphical_Appearance.semObject, "genericAssociation")
    self.obj144.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('genericAssociation_1stLink', self.obj144.Graphical_Appearance.linkInfo.FirstLink))
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('genericAssociation_1stSegment', self.obj144.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj144.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj144.Graphical_Appearance.linkInfo.Center.setValue( ('genericAssociation_Center', self.obj144.Graphical_Appearance.linkInfo))
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('genericAssociation_2ndSegment', self.obj144.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj144.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('genericAssociation_2ndLink', self.obj144.Graphical_Appearance.linkInfo.SecondLink))
    self.obj144.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj144.Graphical_Appearance.semObject
    self.obj144.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj144.Graphical_Appearance.semObject
    self.obj144.Graphical_Appearance.linkInfo.Center.semObject=self.obj144.Graphical_Appearance.semObject
    self.obj144.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj144.Graphical_Appearance.semObject
    self.obj144.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj144.Graphical_Appearance.semObject

    # name
    self.obj144.name.setValue('genericAssociation')

    # displaySelect
    self.obj144.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj144.displaySelect.config = 0

    # attributes
    self.obj144.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,10 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj144.attributes.setValue(lcobj2)

    # cardinality
    self.obj144.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj144.cardinality.setValue(lcobj2)

    # display
    self.obj144.display.setValue('Attributes:\n  - Name :: String\n  - Description :: Text\nMultiplicities:\n  - To Role: 1 to N\n  - From Role: 1 to N\n')
    self.obj144.display.setHeight(15)

    # Actions
    self.obj144.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj144.Actions.setValue(lcobj2)

    # Constraints
    self.obj144.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj144.Constraints.setValue(lcobj2)

    self.obj144.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1044.0,340.0,self.obj144)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.015, 1.6258064516129034]
    else: new_obj = None
    self.obj144.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj144)
    self.globalAndLocalPostcondition(self.obj144, rootNode)
    self.obj144.postAction( rootNode.CREATE )

    self.obj145=CD_Association3(self)
    self.obj145.isGraphObjectVisual = True

    if(hasattr(self.obj145, '_setHierarchicalLink')):
      self.obj145._setHierarchicalLink(True)

    # QOCA
    self.obj145.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj145.Graphical_Appearance.setValue( ('answersToRole', self.obj145))
    self.obj145.Graphical_Appearance.linkInfo=linkEditor(self,self.obj145.Graphical_Appearance.semObject, "answersToRole")
    self.obj145.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToRole_1stLink', self.obj145.Graphical_Appearance.linkInfo.FirstLink))
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToRole_1stSegment', self.obj145.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj145.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj145.Graphical_Appearance.linkInfo.Center.setValue( ('answersToRole_Center', self.obj145.Graphical_Appearance.linkInfo))
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToRole_2ndSegment', self.obj145.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj145.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToRole_2ndLink', self.obj145.Graphical_Appearance.linkInfo.SecondLink))
    self.obj145.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj145.Graphical_Appearance.semObject
    self.obj145.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj145.Graphical_Appearance.semObject
    self.obj145.Graphical_Appearance.linkInfo.Center.semObject=self.obj145.Graphical_Appearance.semObject
    self.obj145.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj145.Graphical_Appearance.semObject
    self.obj145.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj145.Graphical_Appearance.semObject

    # name
    self.obj145.name.setValue('answersToRole')

    # displaySelect
    self.obj145.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj145.displaySelect.config = 0

    # attributes
    self.obj145.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj145.attributes.setValue(lcobj2)

    # cardinality
    self.obj145.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj145.cardinality.setValue(lcobj2)

    # display
    self.obj145.display.setValue('Multiplicities:\n  - From Role: 1 to N\n  - To Role: 1 to N\n')
    self.obj145.display.setHeight(15)

    # Actions
    self.obj145.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj145.Actions.setValue(lcobj2)

    # Constraints
    self.obj145.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj145.Constraints.setValue(lcobj2)

    self.obj145.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(933.0,176.0,self.obj145)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj145.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj145)
    self.globalAndLocalPostcondition(self.obj145, rootNode)
    self.obj145.postAction( rootNode.CREATE )

    self.obj146=CD_Association3(self)
    self.obj146.isGraphObjectVisual = True

    if(hasattr(self.obj146, '_setHierarchicalLink')):
      self.obj146._setHierarchicalLink(False)

    # QOCA
    self.obj146.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj146.Graphical_Appearance.setValue( ('canStartProcess', self.obj146))
    self.obj146.Graphical_Appearance.linkInfo=linkEditor(self,self.obj146.Graphical_Appearance.semObject, "canStartProcess")
    self.obj146.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canStartProcess_1stLink', self.obj146.Graphical_Appearance.linkInfo.FirstLink))
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canStartProcess_1stSegment', self.obj146.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj146.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj146.Graphical_Appearance.linkInfo.Center.setValue( ('canStartProcess_Center', self.obj146.Graphical_Appearance.linkInfo))
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canStartProcess_2ndSegment', self.obj146.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj146.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canStartProcess_2ndLink', self.obj146.Graphical_Appearance.linkInfo.SecondLink))
    self.obj146.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj146.Graphical_Appearance.semObject
    self.obj146.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj146.Graphical_Appearance.semObject
    self.obj146.Graphical_Appearance.linkInfo.Center.semObject=self.obj146.Graphical_Appearance.semObject
    self.obj146.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj146.Graphical_Appearance.semObject
    self.obj146.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj146.Graphical_Appearance.semObject

    # name
    self.obj146.name.setValue('canStartProcess')

    # displaySelect
    self.obj146.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj146.displaySelect.config = 0

    # attributes
    self.obj146.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj146.attributes.setValue(lcobj2)

    # cardinality
    self.obj146.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj146.cardinality.setValue(lcobj2)

    # display
    self.obj146.display.setValue('Multiplicities:\n  - To Process: 0 to N\n  - From Role: 0 to N\n')
    self.obj146.display.setHeight(15)

    # Actions
    self.obj146.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj146.Actions.setValue(lcobj2)

    # Constraints
    self.obj146.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj146.Constraints.setValue(lcobj2)

    self.obj146.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(470.4921875,411.163934426,self.obj146)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.036, 1.0]
    else: new_obj = None
    self.obj146.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj146)
    self.globalAndLocalPostcondition(self.obj146, rootNode)
    self.obj146.postAction( rootNode.CREATE )

    self.obj147=CD_Association3(self)
    self.obj147.isGraphObjectVisual = True

    if(hasattr(self.obj147, '_setHierarchicalLink')):
      self.obj147._setHierarchicalLink(True)

    # QOCA
    self.obj147.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj147.Graphical_Appearance.setValue( ('answersToOrgUnit', self.obj147))
    self.obj147.Graphical_Appearance.linkInfo=linkEditor(self,self.obj147.Graphical_Appearance.semObject, "answersToOrgUnit")
    self.obj147.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToOrgUnit_1stLink', self.obj147.Graphical_Appearance.linkInfo.FirstLink))
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToOrgUnit_1stSegment', self.obj147.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj147.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj147.Graphical_Appearance.linkInfo.Center.setValue( ('answersToOrgUnit_Center', self.obj147.Graphical_Appearance.linkInfo))
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToOrgUnit_2ndSegment', self.obj147.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj147.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToOrgUnit_2ndLink', self.obj147.Graphical_Appearance.linkInfo.SecondLink))
    self.obj147.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj147.Graphical_Appearance.semObject
    self.obj147.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj147.Graphical_Appearance.semObject
    self.obj147.Graphical_Appearance.linkInfo.Center.semObject=self.obj147.Graphical_Appearance.semObject
    self.obj147.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj147.Graphical_Appearance.semObject
    self.obj147.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj147.Graphical_Appearance.semObject

    # name
    self.obj147.name.setValue('answersToOrgUnit')

    # displaySelect
    self.obj147.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj147.displaySelect.config = 0

    # attributes
    self.obj147.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj147.attributes.setValue(lcobj2)

    # cardinality
    self.obj147.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj147.cardinality.setValue(lcobj2)

    # display
    self.obj147.display.setValue('Multiplicities:\n  - To OrgUnit: 1 to N\n  - From OrgUnit: 1 to N\n')
    self.obj147.display.setHeight(15)

    # Actions
    self.obj147.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj147.Actions.setValue(lcobj2)

    # Constraints
    self.obj147.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj147.Constraints.setValue(lcobj2)

    self.obj147.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1113.0,79.0,self.obj147)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.0]
    else: new_obj = None
    self.obj147.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj147)
    self.globalAndLocalPostcondition(self.obj147, rootNode)
    self.obj147.postAction( rootNode.CREATE )

    self.obj148=CD_Association3(self)
    self.obj148.isGraphObjectVisual = True

    if(hasattr(self.obj148, '_setHierarchicalLink')):
      self.obj148._setHierarchicalLink(True)

    # QOCA
    self.obj148.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj148.Graphical_Appearance.setValue( ('isPartOfRole', self.obj148))
    self.obj148.Graphical_Appearance.linkInfo=linkEditor(self,self.obj148.Graphical_Appearance.semObject, "isPartOfRole")
    self.obj148.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfRole_1stLink', self.obj148.Graphical_Appearance.linkInfo.FirstLink))
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfRole_1stSegment', self.obj148.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj148.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj148.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfRole_Center', self.obj148.Graphical_Appearance.linkInfo))
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfRole_2ndSegment', self.obj148.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],0,0)
    self.obj148.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfRole_2ndLink', self.obj148.Graphical_Appearance.linkInfo.SecondLink))
    self.obj148.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj148.Graphical_Appearance.semObject
    self.obj148.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj148.Graphical_Appearance.semObject
    self.obj148.Graphical_Appearance.linkInfo.Center.semObject=self.obj148.Graphical_Appearance.semObject
    self.obj148.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj148.Graphical_Appearance.semObject
    self.obj148.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj148.Graphical_Appearance.semObject

    # name
    self.obj148.name.setValue('isPartOfRole')

    # displaySelect
    self.obj148.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj148.displaySelect.config = 0

    # attributes
    self.obj148.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj148.attributes.setValue(lcobj2)

    # cardinality
    self.obj148.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj148.cardinality.setValue(lcobj2)

    # display
    self.obj148.display.setValue('Multiplicities:\n  - From Role: 0 to N\n  - To Role: 0 to N\n')
    self.obj148.display.setHeight(15)

    # Actions
    self.obj148.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj148.Actions.setValue(lcobj2)

    # Constraints
    self.obj148.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj148.Constraints.setValue(lcobj2)

    self.obj148.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(675.0,160.0,self.obj148)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj148.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj148)
    self.globalAndLocalPostcondition(self.obj148, rootNode)
    self.obj148.postAction( rootNode.CREATE )

    self.obj149=CD_Inheritance3(self)
    self.obj149.isGraphObjectVisual = True

    if(hasattr(self.obj149, '_setHierarchicalLink')):
      self.obj149._setHierarchicalLink(False)

    self.obj149.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(1056.21888986,1366.92763695,self.obj149)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj149.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj149)
    self.globalAndLocalPostcondition(self.obj149, rootNode)
    self.obj149.postAction( rootNode.CREATE )

    self.obj150=CD_Inheritance3(self)
    self.obj150.isGraphObjectVisual = True

    if(hasattr(self.obj150, '_setHierarchicalLink')):
      self.obj150._setHierarchicalLink(False)

    self.obj150.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(1136.90914946,1358.75085967,self.obj150)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj150.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj150)
    self.globalAndLocalPostcondition(self.obj150, rootNode)
    self.obj150.postAction( rootNode.CREATE )

    self.obj151=CD_Inheritance3(self)
    self.obj151.isGraphObjectVisual = True

    if(hasattr(self.obj151, '_setHierarchicalLink')):
      self.obj151._setHierarchicalLink(False)

    self.obj151.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(152.858254695,586.846159545,self.obj151)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj151.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj151)
    self.globalAndLocalPostcondition(self.obj151, rootNode)
    self.obj151.postAction( rootNode.CREATE )

    # Connections for obj129 (graphObject_: Obj148) named OrgUnit
    self.drawConnections(
(self.obj129,self.obj138,[1368.8125, 220.52459016393442, 1387.9955983980042, 65.8097262245276, 1387.9955984, 65.80972622499999],"true", 3),
(self.obj129,self.obj139,[1241.14453125, 483.0655737704918, 967.8422485527899, 481.40176688146084, 971.7601868, 527.680947659],"true", 3),
(self.obj129,self.obj141,[1241.14453125, 483.0655737704918, 997.8287423035672, 492.3266545159663, 1106.462784, 821.548234957],"true", 3),
(self.obj129,self.obj147,[1241.14453125, 323.8032786885246, 1130.0, 231.0, 1113.0, 79.0], 0, 3) )
    # Connections for obj130 (graphObject_: Obj149) named Role
    self.drawConnections(
(self.obj130,self.obj140,[660.0, 811.0, 541.1631302538499, 883.356649681594, 503.161248615, 952.001803815],"true", 3),
(self.obj130,self.obj141,[832.921875, 735.2622950819672, 1023.5805784296024, 714.1457487347751, 1106.462784, 821.548234957],"true", 3),
(self.obj130,self.obj143,[620.953125, 538.344262295082, 522.0012232889502, 553.7739542825374, 436.73445957, 632.859445861],"true", 3),
(self.obj130,self.obj144,[832.921875, 432.3114754098361, 1044.0, 340.0], 0, 2),
(self.obj130,self.obj145,[793.875, 280.8360655737705, 933.0, 176.0], 0, 2),
(self.obj130,self.obj146,[620.953125, 432.3114754098361, 470.4921875, 411.163934426], 0, 2),
(self.obj130,self.obj148,[660.0, 280.8360655737705, 675.0, 160.0],"true", 2) )
    # Connections for obj131 (graphObject_: Obj150) named Action
    self.drawConnections(
 )
    # Connections for obj132 (graphObject_: Obj151) named KnowledgeArtifacts
    self.drawConnections(
 )
    # Connections for obj133 (graphObject_: Obj152) named OrganisationalKnArt
    self.drawConnections(
(self.obj133,self.obj149,[935.5703125, 1206.090909090909, 1056.21888986, 1366.92763695],"true", 2) )
    # Connections for obj134 (graphObject_: Obj153) named IndividualKnArt
    self.drawConnections(
(self.obj134,self.obj150,[1240.7421875, 1186.090909090909, 1136.90914946, 1358.75085967],"true", 2) )
    # Connections for obj135 (graphObject_: Obj154) named Strategy
    self.drawConnections(
 )
    # Connections for obj136 (graphObject_: Obj155) named Objective
    self.drawConnections(
(self.obj136,self.obj151,[139.75, 629.4918032786885, 152.858254695, 586.846159545],"true", 2),
(self.obj136,self.obj142,[139.75, 803.0, 131.94404651894035, 946.9122308488277, 131.944046519, 946.91223085],"true", 3) )
    # Connections for obj137 (graphObject_: Obj156) named Process
    self.drawConnections(
(self.obj137,self.obj143,[324.0, 283.0, 333.0, 453.0, 436.73445957, 632.859445861],"true", 3) )
    # Connections for obj138 (graphObject_: Obj157) named isPartOfOrgUnit
    self.drawConnections(
(self.obj138,self.obj129,[1387.9955984, 65.80972622499999, 1387.9955983980042, 65.8097262245276, 1368.8125, 220.52459016393442],"true", 3) )
    # Connections for obj139 (graphObject_: Obj159) named canHaveRole
    self.drawConnections(
(self.obj139,self.obj130,[971.7601868, 527.680947659, 975.67812505129, 573.9601284363068, 832.921875, 538.344262295082],"true", 3) )
    # Connections for obj140 (graphObject_: Obj161) named hasActions
    self.drawConnections(
(self.obj140,self.obj131,[503.161248615, 952.001803815, 465.1593669760688, 1020.6469579482074, 741.20703125, 946.0909090909091],"true", 3) )
    # Connections for obj141 (graphObject_: Obj163) named canAccessKnArt
    self.drawConnections(
(self.obj141,self.obj133,[1106.462784, 821.548234957, 1128.2678325033444, 887.9439489105719, 935.5703125, 1122.4545454545455],"true", 3),
(self.obj141,self.obj134,[1106.462784, 821.548234957, 1033.4035107781324, 923.4763808302594, 1240.7421875, 1102.4545454545455],"true", 3) )
    # Connections for obj142 (graphObject_: Obj165) named isPartOfObjective
    self.drawConnections(
(self.obj142,self.obj136,[131.944046519, 946.91223085, 131.94404651894035, 946.9122308488277, 139.75, 803.0],"true", 3) )
    # Connections for obj143 (graphObject_: Obj167) named hasObjective
    self.drawConnections(
(self.obj143,self.obj136,[436.73445957, 632.859445861, 351.4676958509182, 711.9449374392455, 281.65625, 698.8950819672131],"true", 3) )
    # Connections for obj144 (graphObject_: Obj169) named genericAssociation
    self.drawConnections(
(self.obj144,self.obj130,[1044.0, 340.0, 832.921875, 432.3114754098361], 0, 2) )
    # Connections for obj145 (graphObject_: Obj171) named answersToRole
    self.drawConnections(
(self.obj145,self.obj130,[933.0, 176.0, 793.875, 280.8360655737705], 0, 2) )
    # Connections for obj146 (graphObject_: Obj173) named canStartProcess
    self.drawConnections(
(self.obj146,self.obj137,[470.4921875, 411.163934426, 471.65625, 283.0], 0, 2) )
    # Connections for obj147 (graphObject_: Obj175) named answersToOrgUnit
    self.drawConnections(
(self.obj147,self.obj129,[1113.0, 79.0, 1279.0, 145.0, 1280.0, 220.52459016393442], 0, 3) )
    # Connections for obj148 (graphObject_: Obj177) named isPartOfRole
    self.drawConnections(
(self.obj148,self.obj130,[675.0, 160.0, 660.0, 280.8360655737705],"true", 2) )
    # Connections for obj149 (graphObject_: Obj179) of type CD_Inheritance3
    self.drawConnections(
(self.obj149,self.obj132,[1056.21888986, 1366.92763695, 1073.0, 1255.0],"true", 2) )
    # Connections for obj150 (graphObject_: Obj181) of type CD_Inheritance3
    self.drawConnections(
(self.obj150,self.obj132,[1136.90914946, 1358.75085967, 1153.0, 1255.0],"true", 2) )
    # Connections for obj151 (graphObject_: Obj183) of type CD_Inheritance3
    self.drawConnections(
(self.obj151,self.obj135,[152.858254695, 586.846159545, 156.0, 487.0],"true", 2) )

newfunction = LSMASOMM_MDL

loadedMMName = 'CD_ClassDiagramsV3_META'

atom3version = '0.3'
