"""
__LSMASOMM_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: bogdan
Modified: Sun Oct 22 23:17:03 2017
______________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from CD_Class3 import *
from CD_Association3 import *
from CD_Inheritance3 import *
from graph_CD_Association3 import *
from graph_CD_Class3 import *
from graph_CD_Inheritance3 import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def LSMASOMM_MDL(self, rootNode, CD_ClassDiagramsV3RootNode=None):

    # --- Generating attributes code for ASG CD_ClassDiagramsV3 ---
    if( CD_ClassDiagramsV3RootNode ): 
        # name
        CD_ClassDiagramsV3RootNode.name.setValue('LSMASOMM')

        # author
        CD_ClassDiagramsV3RootNode.author.setValue('Bogdan')

        # showCardinalities
        CD_ClassDiagramsV3RootNode.showCardinalities.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showCardinalities.config = 0

        # showAssociationBox
        CD_ClassDiagramsV3RootNode.showAssociationBox.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAssociationBox.config = 0

        # description
        CD_ClassDiagramsV3RootNode.description.setValue('\n')
        CD_ClassDiagramsV3RootNode.description.setHeight(15)

        # showAttributes
        CD_ClassDiagramsV3RootNode.showAttributes.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showAttributes.config = 0

        # showActions
        CD_ClassDiagramsV3RootNode.showActions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showActions.config = 0

        # showConditions
        CD_ClassDiagramsV3RootNode.showConditions.setValue((None, 1))
        CD_ClassDiagramsV3RootNode.showConditions.config = 0

        # attributes
        CD_ClassDiagramsV3RootNode.attributes.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('LSMASOMM', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('author', 'String', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('Annonymous', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3Text('\n', 60,15 )
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('title', 'String', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3String('', 20)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        cobj1=ATOM3Attribute(self.types)
        cobj1.setValue(('agentImplementation', 'Enum', None, ('Key', 0), ('Direct Editing', 1)))
        cobj1.initialValue=ATOM3Enum(['SPADE', 'Enmasse', 'EveJS'],0,1)
        cobj1.initialValue.configItems.setActionFlags([ 1, 1, 1, 0])
        lcobj2 =[]
        cobj2=ATOM3String('SPADE', 20)
        lcobj2.append(cobj2)
        cobj2=ATOM3String('Enmasse', 20)
        lcobj2.append(cobj2)
        cobj2=ATOM3String('EveJS', 20)
        lcobj2.append(cobj2)
        cobj1.initialValue.configItems.setValue(lcobj2)
        cobj1.isDerivedAttribute = False
        lcobj1.append(cobj1)
        CD_ClassDiagramsV3RootNode.attributes.setValue(lcobj1)

        # constraints
        CD_ClassDiagramsV3RootNode.constraints.setActionFlags([ 1, 1, 1, 0])
        lcobj1 =[]
        cobj1=ATOM3Constraint()
        cobj1.setValue(('saveModelElements', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\n\nSaveAll(self)\n\n'))
        lcobj1.append(cobj1)
        cobj1=ATOM3Constraint()
        cobj1.setValue(('addConnectionsToDB', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\n\naddConnectionToDB(self)\n\n'))
        lcobj1.append(cobj1)
        cobj1=ATOM3Constraint()
        cobj1.setValue(('CheckUniqueID', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\n\nres = checkUniqueID(self)\n\nif res:\n  return ("Duplicate ID: {}! Specify another.".format(res[1]), res[0])\n\n'))
        lcobj1.append(cobj1)
        CD_ClassDiagramsV3RootNode.constraints.setValue(lcobj1)
    # --- ASG attributes over ---


    self.obj185=CD_Class3(self)
    self.obj185.isGraphObjectVisual = True

    if(hasattr(self.obj185, '_setHierarchicalLink')):
      self.obj185._setHierarchicalLink(False)

    # QOCA
    self.obj185.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj185.Graphical_Appearance.setValue( ('OrgUnit', self.obj185))

    # name
    self.obj185.name.setValue('OrgUnit')

    # attributes
    self.obj185.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('OU|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Individual', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue(('1', 0))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('UnitSize', 'String', None, ('Key', 0), ('Direct Editing', 0)))
    cobj2.initialValue=ATOM3String('Individual', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('hasActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 1, 1, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj3=ATOM3String('ChangeRole', 20)
    lcobj3.append(cobj3)
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('OUname', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj185.attributes.setValue(lcobj2)

    # Abstract
    self.obj185.Abstract.setValue((None, 0))
    self.obj185.Abstract.config = 0

    # cardinality
    self.obj185.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToOrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj185.cardinality.setValue(lcobj2)

    # display
    self.obj185.display.setValue('Attributes:\n  - ID :: String\n  - Individual :: Boolean\n  - UnitSize :: String\n  - hasActions :: List\n  - name :: String\nConstraints:\n  > ConstraintOutputOrgUnit\nActions:\n  > determineSize\nMultiplicities:\n  - To isPartOfOrgUnit: 0 to N\n  - From isPartOfOrgUnit: 0 to N\n  - To canHaveRole: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To answersToOrgUnit: 0 to N\n  - From answersToOrgUnit: 0 to N\n')
    self.obj185.display.setHeight(15)

    # Actions
    self.obj185.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('determineSize', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitDetermineSize(self)\nself.UnitSize.setValue(res)\nself.graphObject_.ModifyAttribute(\'UnitSize\', res)\n\n'))
    lcobj2.append(cobj2)
    self.obj185.Actions.setValue(lcobj2)

    # Constraints
    self.obj185.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintOutputOrgUnit', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = OrgUnitCheckOutputs(self)\nif res is "manyKnArts":\n    return ("OrgUnit can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj185.Constraints.setValue(lcobj2)

    self.obj185.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1240.0,220.0,self.obj185)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.88
       new_obj.layConstraints['scale'] = [1.11015625, 2.9262295081967213]
    else: new_obj = None
    self.obj185.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj185)
    self.globalAndLocalPostcondition(self.obj185, rootNode)
    self.obj185.postAction( rootNode.CREATE )

    self.obj186=CD_Class3(self)
    self.obj186.isGraphObjectVisual = True

    if(hasattr(self.obj186, '_setHierarchicalLink')):
      self.obj186._setHierarchicalLink(False)

    # QOCA
    self.obj186.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj186.Graphical_Appearance.setValue( ('Role', self.obj186))

    # name
    self.obj186.name.setValue('Role')

    # attributes
    self.obj186.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('R|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('hasActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 0, 0, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('isMetaRole', 'Boolean', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Boolean()
    cobj2.initialValue.setValue((None, 0))
    cobj2.initialValue.config = 1
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('role name', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj186.attributes.setValue(lcobj2)

    # Abstract
    self.obj186.Abstract.setValue((None, 0))
    self.obj186.Abstract.config = 0

    # cardinality
    self.obj186.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canHaveRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('genericAssociation', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('answersToRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfRole', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj186.cardinality.setValue(lcobj2)

    # display
    self.obj186.display.setValue('Attributes:\n  - ID :: String\n  - hasActions :: List\n  - isMetaRole :: Boolean\n  - name :: String\nConstraints:\n  > RoleConstraintKnArt\nActions:\n  > checkMetaRole\nMultiplicities:\n  - From canHaveRole: 0 to N\n  - To hasActions: 0 to N\n  - To canAccessKnArt: 0 to N\n  - To hasObjective: 0 to N\n  - To genericAssociation: 0 to N\n  - From genericAssociation: 0 to N\n  - To answersToRole: 0 to N\n  - From answersToRole: 0 to N\n  - To canStartProcess: 0 to N\n  - To isPartOfRole: 0 to N\n  - From isPartOfRole: 0 to N\n')
    self.obj186.display.setHeight(15)

    # Actions
    self.obj186.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('checkMetaRole', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0]), 'from CustomCode import RoleHierarchy\nres = RoleHierarchy(self)\n\n'))
    lcobj2.append(cobj2)
    self.obj186.Actions.setValue(lcobj2)

    # Constraints
    self.obj186.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('RoleConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), '\nfrom CustomCode import *\n\nres = RoleCheckOutputs(self)\nif res is "manyKnArts":\n    return ("Roles can have only one accessway to knowledge artifacts (KnArt)!", self.graphObject_)\nelif res is "IndivKnArtError":\n    return ("Roles can have OrganizationalKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj186.Constraints.setValue(lcobj2)

    self.obj186.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(620.0,260.0,self.obj186)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 0.85
       new_obj.layConstraints['scale'] = [1.115625, 3.6147540983606556]
    else: new_obj = None
    self.obj186.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj186)
    self.globalAndLocalPostcondition(self.obj186, rootNode)
    self.obj186.postAction( rootNode.CREATE )

    self.obj187=CD_Class3(self)
    self.obj187.isGraphObjectVisual = True

    if(hasattr(self.obj187, '_setHierarchicalLink')):
      self.obj187._setHierarchicalLink(False)

    # QOCA
    self.obj187.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj187.Graphical_Appearance.setValue( ('Action', self.obj187))

    # name
    self.obj187.name.setValue('Action')

    # attributes
    self.obj187.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ActionCode', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#action code placeholder or description\n#\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('A|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('ActionName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj187.attributes.setValue(lcobj2)

    # Abstract
    self.obj187.Abstract.setValue((None, 0))
    self.obj187.Abstract.config = 0

    # cardinality
    self.obj187.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasActions', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfProcess', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj187.cardinality.setValue(lcobj2)

    # display
    self.obj187.display.setValue('Attributes:\n  - ActionCode :: Text\n  - ID :: String\n  - name :: String\nActions:\n  > initialActionCodeTemplate\nMultiplicities:\n  - From hasActions: 0 to N\n  - To isPartOfProcess: 0 to N\n  - To hasObjective: 0 to N\n')
    self.obj187.display.setHeight(15)

    # Actions
    self.obj187.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('initialActionCodeTemplate', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import ActionCodeTemplate\n\nres = ActionCodeTemplate(self)\n\nself.setAttrValue(\'ActionCode\', res)\n\n\n'))
    lcobj2.append(cobj2)
    self.obj187.Actions.setValue(lcobj2)

    # Constraints
    self.obj187.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj187.Constraints.setValue(lcobj2)

    self.obj187.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(380.0,1080.0,self.obj187)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['Text Scale'] = 1.06
       new_obj.layConstraints['scale'] = [1.1484375, 2.0655737704918034]
    else: new_obj = None
    self.obj187.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj187)
    self.globalAndLocalPostcondition(self.obj187, rootNode)
    self.obj187.postAction( rootNode.CREATE )

    self.obj188=CD_Class3(self)
    self.obj188.isGraphObjectVisual = True

    if(hasattr(self.obj188, '_setHierarchicalLink')):
      self.obj188._setHierarchicalLink(False)

    # QOCA
    self.obj188.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj188.Graphical_Appearance.setValue( ('KnowledgeArtifacts', self.obj188))

    # name
    self.obj188.name.setValue('KnowledgeArtifacts')

    # attributes
    self.obj188.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KA|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj188.attributes.setValue(lcobj2)

    # Abstract
    self.obj188.Abstract.setValue((None, 1))
    self.obj188.Abstract.config = 0

    # cardinality
    self.obj188.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj188.cardinality.setValue(lcobj2)

    # display
    self.obj188.display.setValue('Attributes:\n  - ID :: String\n  - description :: String\n  - name :: String\n')
    self.obj188.display.setHeight(15)

    # Actions
    self.obj188.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj188.Actions.setValue(lcobj2)

    # Constraints
    self.obj188.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj188.Constraints.setValue(lcobj2)

    self.obj188.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(980.0,1080.0,self.obj188)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0454545454545454]
    else: new_obj = None
    self.obj188.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj188)
    self.globalAndLocalPostcondition(self.obj188, rootNode)
    self.obj188.postAction( rootNode.CREATE )

    self.obj189=CD_Class3(self)
    self.obj189.isGraphObjectVisual = True

    if(hasattr(self.obj189, '_setHierarchicalLink')):
      self.obj189._setHierarchicalLink(False)

    # QOCA
    self.obj189.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj189.Graphical_Appearance.setValue( ('OrganisationalKnArt', self.obj189))

    # name
    self.obj189.name.setValue('OrganisationalKnArt')

    # attributes
    self.obj189.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KA|', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj189.attributes.setValue(lcobj2)

    # Abstract
    self.obj189.Abstract.setValue((None, 0))
    self.obj189.Abstract.config = 0

    # cardinality
    self.obj189.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj189.cardinality.setValue(lcobj2)

    # display
    self.obj189.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj189.display.setHeight(15)

    # Actions
    self.obj189.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj189.Actions.setValue(lcobj2)

    # Constraints
    self.obj189.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj189.Constraints.setValue(lcobj2)

    self.obj189.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(660.0,960.0,self.obj189)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj189.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj189)
    self.globalAndLocalPostcondition(self.obj189, rootNode)
    self.obj189.postAction( rootNode.CREATE )

    self.obj190=CD_Class3(self)
    self.obj190.isGraphObjectVisual = True

    if(hasattr(self.obj190, '_setHierarchicalLink')):
      self.obj190._setHierarchicalLink(False)

    # QOCA
    self.obj190.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj190.Graphical_Appearance.setValue( ('IndividualKnArt', self.obj190))

    # name
    self.obj190.name.setValue('IndividualKnArt')

    # attributes
    self.obj190.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KA|', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('KnArtContent', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('#content of the artifact\n', 80,15 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtDesc', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('KnArtName', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj190.attributes.setValue(lcobj2)

    # Abstract
    self.obj190.Abstract.setValue((None, 0))
    self.obj190.Abstract.config = 0

    # cardinality
    self.obj190.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canAccessKnArt', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj190.cardinality.setValue(lcobj2)

    # display
    self.obj190.display.setValue('Attributes:\n  - KnArtContent :: Text\nMultiplicities:\n  - From canAccessKnArt: 0 to N\n')
    self.obj190.display.setHeight(15)

    # Actions
    self.obj190.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj190.Actions.setValue(lcobj2)

    # Constraints
    self.obj190.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj190.Constraints.setValue(lcobj2)

    self.obj190.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(1220.0,1000.0,self.obj190)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2359375000000001, 1.0454545454545454]
    else: new_obj = None
    self.obj190.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj190)
    self.globalAndLocalPostcondition(self.obj190, rootNode)
    self.obj190.postAction( rootNode.CREATE )

    self.obj191=CD_Class3(self)
    self.obj191.isGraphObjectVisual = True

    if(hasattr(self.obj191, '_setHierarchicalLink')):
      self.obj191._setHierarchicalLink(False)

    # QOCA
    self.obj191.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj191.Graphical_Appearance.setValue( ('Strategy', self.obj191))

    # name
    self.obj191.name.setValue('Strategy')

    # attributes
    self.obj191.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj191.attributes.setValue(lcobj2)

    # Abstract
    self.obj191.Abstract.setValue((None, 1))
    self.obj191.Abstract.config = 0

    # cardinality
    self.obj191.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    self.obj191.cardinality.setValue(lcobj2)

    # display
    self.obj191.display.setValue('Attributes:\n  - description :: Text\n  - name :: String\n')
    self.obj191.display.setHeight(15)

    # Actions
    self.obj191.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj191.Actions.setValue(lcobj2)

    # Constraints
    self.obj191.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj191.Constraints.setValue(lcobj2)

    self.obj191.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(80.0,320.0,self.obj191)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0454545454545454]
    else: new_obj = None
    self.obj191.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj191)
    self.globalAndLocalPostcondition(self.obj191, rootNode)
    self.obj191.postAction( rootNode.CREATE )

    self.obj192=CD_Class3(self)
    self.obj192.isGraphObjectVisual = True

    if(hasattr(self.obj192, '_setHierarchicalLink')):
      self.obj192._setHierarchicalLink(False)

    # QOCA
    self.obj192.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj192.Graphical_Appearance.setValue( ('Objective', self.obj192))

    # name
    self.obj192.name.setValue('Objective')

    # attributes
    self.obj192.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('O|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Measurement', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Reward', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ofActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 0, 0, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj192.attributes.setValue(lcobj2)

    # Abstract
    self.obj192.Abstract.setValue((None, 0))
    self.obj192.Abstract.config = 0

    # cardinality
    self.obj192.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj192.cardinality.setValue(lcobj2)

    # display
    self.obj192.display.setValue('Attributes:\n  - ID :: String\n  - Measurement :: Text\n  - Reward :: Text\n  - ofActions :: List\nMultiplicities:\n  - To isPartOfObjective: 0 to N\n  - From isPartOfObjective: 0 to N\n  - From hasObjective: 0 to N\n')
    self.obj192.display.setHeight(15)

    # Actions
    self.obj192.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj192.Actions.setValue(lcobj2)

    # Constraints
    self.obj192.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj192.Constraints.setValue(lcobj2)

    self.obj192.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(40.0,600.0,self.obj192)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.26875, 1.8590163934426231]
    else: new_obj = None
    self.obj192.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj192)
    self.globalAndLocalPostcondition(self.obj192, rootNode)
    self.obj192.postAction( rootNode.CREATE )

    self.obj193=CD_Class3(self)
    self.obj193.isGraphObjectVisual = True

    if(hasattr(self.obj193, '_setHierarchicalLink')):
      self.obj193._setHierarchicalLink(False)

    # QOCA
    self.obj193.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <---- Remove this to use QOCA\n\n""" Get the high level constraint helper and solver """\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.fixedWidth(self.graphObject_, self.graphObject_.sizeX)\noc.fixedHeight(self.graphObject_, self.graphObject_.sizeY)\n\n'))

    # Graphical_Appearance
    self.obj193.Graphical_Appearance.setValue( ('Process', self.obj193))

    # name
    self.obj193.name.setValue('Process')

    # attributes
    self.obj193.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('P|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,4 )
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('hasActions', 'List', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3List([ 0, 0, 1, self.types],ATOM3String)
    lcobj3=[]
    cobj2.initialValue.setValue(lcobj3)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = True
    lcobj2.append(cobj2)
    self.obj193.attributes.setValue(lcobj2)

    # Abstract
    self.obj193.Abstract.setValue((None, 0))
    self.obj193.Abstract.config = 0

    # cardinality
    self.obj193.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('canStartProcess', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('hasObjective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('isPartOfProcess', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj193.cardinality.setValue(lcobj2)

    # display
    self.obj193.display.setValue('Attributes:\n  - ID :: String\n  - Name :: String\n  - hasActions :: List\nMultiplicities:\n  - From canStartProcess: 0 to N\n  - To hasObjective: 0 to N\n  - From isPartOfProcess: 0 to N\n')
    self.obj193.display.setHeight(15)

    # Actions
    self.obj193.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj193.Actions.setValue(lcobj2)

    # Constraints
    self.obj193.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj193.Constraints.setValue(lcobj2)

    self.obj193.graphClass_= graph_CD_Class3
    if self.genGraphics:
       new_obj = graph_CD_Class3(220.0,80.0,self.obj193)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Class3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.23046875, 1.6524590163934427]
    else: new_obj = None
    self.obj193.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj193)
    self.globalAndLocalPostcondition(self.obj193, rootNode)
    self.obj193.postAction( rootNode.CREATE )

    self.obj194=CD_Association3(self)
    self.obj194.isGraphObjectVisual = True

    if(hasattr(self.obj194, '_setHierarchicalLink')):
      self.obj194._setHierarchicalLink(True)

    # QOCA
    self.obj194.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj194.Graphical_Appearance.setValue( ('isPartOfOrgUnit', self.obj194))
    self.obj194.Graphical_Appearance.linkInfo=linkEditor(self,self.obj194.Graphical_Appearance.semObject, "isPartOfOrgUnit")
    self.obj194.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfOrgUnit_1stLink', self.obj194.Graphical_Appearance.linkInfo.FirstLink))
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfOrgUnit_1stSegment', self.obj194.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj194.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj194.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfOrgUnit_Center', self.obj194.Graphical_Appearance.linkInfo))
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfOrgUnit_2ndSegment', self.obj194.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj194.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfOrgUnit_2ndLink', self.obj194.Graphical_Appearance.linkInfo.SecondLink))
    self.obj194.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj194.Graphical_Appearance.semObject
    self.obj194.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj194.Graphical_Appearance.semObject
    self.obj194.Graphical_Appearance.linkInfo.Center.semObject=self.obj194.Graphical_Appearance.semObject
    self.obj194.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj194.Graphical_Appearance.semObject
    self.obj194.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj194.Graphical_Appearance.semObject

    # name
    self.obj194.name.setValue('isPartOfOrgUnit')

    # displaySelect
    self.obj194.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj194.displaySelect.config = 0

    # attributes
    self.obj194.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('pOU|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj194.attributes.setValue(lcobj2)

    # cardinality
    self.obj194.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj194.cardinality.setValue(lcobj2)

    # display
    self.obj194.display.setValue('Attributes:\n  - ID :: String\nMultiplicities:\n  - From OrgUnit: 1 to N\n  - To OrgUnit: 1 to N\n')
    self.obj194.display.setHeight(15)

    # Actions
    self.obj194.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj194.Actions.setValue(lcobj2)

    # Constraints
    self.obj194.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj194.Constraints.setValue(lcobj2)

    self.obj194.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1386.9955984,65.809726225,self.obj194)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.3548387096774195]
    else: new_obj = None
    self.obj194.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj194)
    self.globalAndLocalPostcondition(self.obj194, rootNode)
    self.obj194.postAction( rootNode.CREATE )

    self.obj195=CD_Association3(self)
    self.obj195.isGraphObjectVisual = True

    if(hasattr(self.obj195, '_setHierarchicalLink')):
      self.obj195._setHierarchicalLink(True)

    # QOCA
    self.obj195.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj195.Graphical_Appearance.setValue( ('canHaveRole', self.obj195))
    self.obj195.Graphical_Appearance.linkInfo=linkEditor(self,self.obj195.Graphical_Appearance.semObject, "canHaveRole")
    self.obj195.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canHaveRole_1stLink', self.obj195.Graphical_Appearance.linkInfo.FirstLink))
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canHaveRole_1stSegment', self.obj195.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj195.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj195.Graphical_Appearance.linkInfo.Center.setValue( ('canHaveRole_Center', self.obj195.Graphical_Appearance.linkInfo))
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canHaveRole_2ndSegment', self.obj195.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj195.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canHaveRole_2ndLink', self.obj195.Graphical_Appearance.linkInfo.SecondLink))
    self.obj195.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj195.Graphical_Appearance.semObject
    self.obj195.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj195.Graphical_Appearance.semObject
    self.obj195.Graphical_Appearance.linkInfo.Center.semObject=self.obj195.Graphical_Appearance.semObject
    self.obj195.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj195.Graphical_Appearance.semObject
    self.obj195.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj195.Graphical_Appearance.semObject

    # name
    self.obj195.name.setValue('canHaveRole')

    # displaySelect
    self.obj195.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj195.displaySelect.config = 0

    # attributes
    self.obj195.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('OUR|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj195.attributes.setValue(lcobj2)

    # cardinality
    self.obj195.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj195.cardinality.setValue(lcobj2)

    # display
    self.obj195.display.setValue('Attributes:\n  - ID :: String\nMultiplicities:\n  - From OrgUnit: 0 to N\n  - To Role: 0 to N\n')
    self.obj195.display.setHeight(15)

    # Actions
    self.obj195.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj195.Actions.setValue(lcobj2)

    # Constraints
    self.obj195.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj195.Constraints.setValue(lcobj2)

    self.obj195.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(971.7601868,527.680947659,self.obj195)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.3548387096774195]
    else: new_obj = None
    self.obj195.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj195)
    self.globalAndLocalPostcondition(self.obj195, rootNode)
    self.obj195.postAction( rootNode.CREATE )

    self.obj196=CD_Association3(self)
    self.obj196.isGraphObjectVisual = True

    if(hasattr(self.obj196, '_setHierarchicalLink')):
      self.obj196._setHierarchicalLink(False)

    # QOCA
    self.obj196.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj196.Graphical_Appearance.setValue( ('hasActions', self.obj196))
    self.obj196.Graphical_Appearance.linkInfo=linkEditor(self,self.obj196.Graphical_Appearance.semObject, "hasActions")
    self.obj196.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasActions_1stLink', self.obj196.Graphical_Appearance.linkInfo.FirstLink))
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasActions_1stSegment', self.obj196.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj196.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj196.Graphical_Appearance.linkInfo.Center.setValue( ('hasActions_Center', self.obj196.Graphical_Appearance.linkInfo))
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasActions_2ndSegment', self.obj196.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj196.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasActions_2ndLink', self.obj196.Graphical_Appearance.linkInfo.SecondLink))
    self.obj196.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj196.Graphical_Appearance.semObject
    self.obj196.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj196.Graphical_Appearance.semObject
    self.obj196.Graphical_Appearance.linkInfo.Center.semObject=self.obj196.Graphical_Appearance.semObject
    self.obj196.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj196.Graphical_Appearance.semObject
    self.obj196.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj196.Graphical_Appearance.semObject

    # name
    self.obj196.name.setValue('hasActions')

    # displaySelect
    self.obj196.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj196.displaySelect.config = 0

    # attributes
    self.obj196.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('aR|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj196.attributes.setValue(lcobj2)

    # cardinality
    self.obj196.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Action', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', '1'))
    lcobj2.append(cobj2)
    self.obj196.cardinality.setValue(lcobj2)

    # display
    self.obj196.display.setValue('Attributes:\n  - ID :: String\nActions:\n  > updateRoleActions\nMultiplicities:\n  - To Action: 1 to N\n  - From Role: 1 to 1\n')
    self.obj196.display.setHeight(15)

    # Actions
    self.obj196.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('updateRoleActions', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0]), 'from CustomCode import UpdateActions\n\nres = UpdateActions(self)\n\n'))
    lcobj2.append(cobj2)
    self.obj196.Actions.setValue(lcobj2)

    # Constraints
    self.obj196.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj196.Constraints.setValue(lcobj2)

    self.obj196.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(517.161248615,904.001803815,self.obj196)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.099, 1.8967741935483875]
    else: new_obj = None
    self.obj196.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj196)
    self.globalAndLocalPostcondition(self.obj196, rootNode)
    self.obj196.postAction( rootNode.CREATE )

    self.obj197=CD_Association3(self)
    self.obj197.isGraphObjectVisual = True

    if(hasattr(self.obj197, '_setHierarchicalLink')):
      self.obj197._setHierarchicalLink(False)

    # QOCA
    self.obj197.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj197.Graphical_Appearance.setValue( ('canAccessKnArt', self.obj197))
    self.obj197.Graphical_Appearance.linkInfo=linkEditor(self,self.obj197.Graphical_Appearance.semObject, "canAccessKnArt")
    self.obj197.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canAccessKnArt_1stLink', self.obj197.Graphical_Appearance.linkInfo.FirstLink))
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canAccessKnArt_1stSegment', self.obj197.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj197.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj197.Graphical_Appearance.linkInfo.Center.setValue( ('canAccessKnArt_Center', self.obj197.Graphical_Appearance.linkInfo))
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canAccessKnArt_2ndSegment', self.obj197.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj197.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canAccessKnArt_2ndLink', self.obj197.Graphical_Appearance.linkInfo.SecondLink))
    self.obj197.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj197.Graphical_Appearance.semObject
    self.obj197.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj197.Graphical_Appearance.semObject
    self.obj197.Graphical_Appearance.linkInfo.Center.semObject=self.obj197.Graphical_Appearance.semObject
    self.obj197.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj197.Graphical_Appearance.semObject
    self.obj197.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj197.Graphical_Appearance.semObject

    # name
    self.obj197.name.setValue('canAccessKnArt')

    # displaySelect
    self.obj197.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj197.displaySelect.config = 0

    # attributes
    self.obj197.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('accKA|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj197.attributes.setValue(lcobj2)

    # cardinality
    self.obj197.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrganisationalKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('IndividualKnArt', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj197.cardinality.setValue(lcobj2)

    # display
    self.obj197.display.setValue('Attributes:\n  - ID :: String\nConstraints:\n  > ConstraintKnArt\nMultiplicities:\n  - To OrganisationalKnArt: 0 to N\n  - From Role: 0 to N\n  - From OrgUnit: 0 to N\n  - To IndividualKnArt: 0 to N\n')
    self.obj197.display.setHeight(15)

    # Actions
    self.obj197.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj197.Actions.setValue(lcobj2)

    # Constraints
    self.obj197.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Constraint()
    cobj2.setValue(('ConstraintKnArt', (['Python', 'OCL'], 1), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), 'from CustomCode import *\nres = canAccessKnArtCheckConnections(self)\n\nif res is "eitherRoleOrUnit":\n    return ("Either Role of OrgUnit can access knowledge.", self.graphObject_)\nelif res is "onlyOneInput":\n    return ("Only one Role or OrgUnit can access one knowledge medium.", self.graphObject_)\nelif res is "RoleWithOrgOnly":\n    return ("Role can access OrganisationalKnArt only!", self.graphObject_)\nelif res is "OrgUnitWithIndivOnly":\n    return ("OrgUnit can access IndividualKnArt only!", self.graphObject_)\nelse:\n    return\n\n'))
    lcobj2.append(cobj2)
    self.obj197.Constraints.setValue(lcobj2)

    self.obj197.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1126.462784,833.548234957,self.obj197)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.6380000000000001, 2.438709677419355]
    else: new_obj = None
    self.obj197.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj197)
    self.globalAndLocalPostcondition(self.obj197, rootNode)
    self.obj197.postAction( rootNode.CREATE )

    self.obj198=CD_Association3(self)
    self.obj198.isGraphObjectVisual = True

    if(hasattr(self.obj198, '_setHierarchicalLink')):
      self.obj198._setHierarchicalLink(True)

    # QOCA
    self.obj198.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj198.Graphical_Appearance.setValue( ('isPartOfObjective', self.obj198))
    self.obj198.Graphical_Appearance.linkInfo=linkEditor(self,self.obj198.Graphical_Appearance.semObject, "isPartOfObjective")
    self.obj198.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfObjective_1stLink', self.obj198.Graphical_Appearance.linkInfo.FirstLink))
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfObjective_1stSegment', self.obj198.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj198.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj198.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfObjective_Center', self.obj198.Graphical_Appearance.linkInfo))
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfObjective_2ndSegment', self.obj198.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj198.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfObjective_2ndLink', self.obj198.Graphical_Appearance.linkInfo.SecondLink))
    self.obj198.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj198.Graphical_Appearance.semObject
    self.obj198.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj198.Graphical_Appearance.semObject
    self.obj198.Graphical_Appearance.linkInfo.Center.semObject=self.obj198.Graphical_Appearance.semObject
    self.obj198.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj198.Graphical_Appearance.semObject
    self.obj198.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj198.Graphical_Appearance.semObject

    # name
    self.obj198.name.setValue('isPartOfObjective')

    # displaySelect
    self.obj198.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj198.displaySelect.config = 0

    # attributes
    self.obj198.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('pO|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj198.attributes.setValue(lcobj2)

    # cardinality
    self.obj198.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj198.cardinality.setValue(lcobj2)

    # display
    self.obj198.display.setValue('Attributes:\n  - ID :: String\nMultiplicities:\n  - From Objective: 0 to N\n  - To Objective: 0 to N\n')
    self.obj198.display.setHeight(15)

    # Actions
    self.obj198.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj198.Actions.setValue(lcobj2)

    # Constraints
    self.obj198.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj198.Constraints.setValue(lcobj2)

    self.obj198.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(131.944046519,946.91223085,self.obj198)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.225, 1.3548387096774195]
    else: new_obj = None
    self.obj198.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj198)
    self.globalAndLocalPostcondition(self.obj198, rootNode)
    self.obj198.postAction( rootNode.CREATE )

    self.obj199=CD_Association3(self)
    self.obj199.isGraphObjectVisual = True

    if(hasattr(self.obj199, '_setHierarchicalLink')):
      self.obj199._setHierarchicalLink(False)

    # QOCA
    self.obj199.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj199.Graphical_Appearance.setValue( ('hasObjective', self.obj199))
    self.obj199.Graphical_Appearance.linkInfo=linkEditor(self,self.obj199.Graphical_Appearance.semObject, "hasObjective")
    self.obj199.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('hasObjective_1stLink', self.obj199.Graphical_Appearance.linkInfo.FirstLink))
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('hasObjective_1stSegment', self.obj199.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj199.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj199.Graphical_Appearance.linkInfo.Center.setValue( ('hasObjective_Center', self.obj199.Graphical_Appearance.linkInfo))
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('hasObjective_2ndSegment', self.obj199.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj199.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('hasObjective_2ndLink', self.obj199.Graphical_Appearance.linkInfo.SecondLink))
    self.obj199.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj199.Graphical_Appearance.semObject
    self.obj199.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj199.Graphical_Appearance.semObject
    self.obj199.Graphical_Appearance.linkInfo.Center.semObject=self.obj199.Graphical_Appearance.semObject
    self.obj199.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj199.Graphical_Appearance.semObject
    self.obj199.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj199.Graphical_Appearance.semObject

    # name
    self.obj199.name.setValue('hasObjective')

    # displaySelect
    self.obj199.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj199.displaySelect.config = 0

    # attributes
    self.obj199.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('RPO|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj199.attributes.setValue(lcobj2)

    # cardinality
    self.obj199.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Objective', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Action', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj199.cardinality.setValue(lcobj2)

    # display
    self.obj199.display.setValue('Attributes:\n  - ID :: String\nActions:\n  > updateObjectiveActions\nMultiplicities:\n  - To Objective: 1 to N\n  - From Role: 0 to N\n  - From Process: 0 to N\n  - From Action: 0 to N\n')
    self.obj199.display.setHeight(15)

    # Actions
    self.obj199.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('updateObjectiveActions', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0]), 'from CustomCode import UpdateActions\n\nres = UpdateActions(self)\n'))
    lcobj2.append(cobj2)
    self.obj199.Actions.setValue(lcobj2)

    # Constraints
    self.obj199.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj199.Constraints.setValue(lcobj2)

    self.obj199.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(436.73445957,632.859445861,self.obj199)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.33, 2.438709677419355]
    else: new_obj = None
    self.obj199.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj199)
    self.globalAndLocalPostcondition(self.obj199, rootNode)
    self.obj199.postAction( rootNode.CREATE )

    self.obj200=CD_Association3(self)
    self.obj200.isGraphObjectVisual = True

    if(hasattr(self.obj200, '_setHierarchicalLink')):
      self.obj200._setHierarchicalLink(False)

    # QOCA
    self.obj200.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj200.Graphical_Appearance.setValue( ('genericAssociation', self.obj200))
    self.obj200.Graphical_Appearance.linkInfo=linkEditor(self,self.obj200.Graphical_Appearance.semObject, "genericAssociation")
    self.obj200.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('genericAssociation_1stLink', self.obj200.Graphical_Appearance.linkInfo.FirstLink))
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('genericAssociation_1stSegment', self.obj200.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj200.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj200.Graphical_Appearance.linkInfo.Center.setValue( ('genericAssociation_Center', self.obj200.Graphical_Appearance.linkInfo))
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('genericAssociation_2ndSegment', self.obj200.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj200.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('genericAssociation_2ndLink', self.obj200.Graphical_Appearance.linkInfo.SecondLink))
    self.obj200.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj200.Graphical_Appearance.semObject
    self.obj200.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj200.Graphical_Appearance.semObject
    self.obj200.Graphical_Appearance.linkInfo.Center.semObject=self.obj200.Graphical_Appearance.semObject
    self.obj200.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj200.Graphical_Appearance.semObject
    self.obj200.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj200.Graphical_Appearance.semObject

    # name
    self.obj200.name.setValue('genericAssociation')

    # displaySelect
    self.obj200.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj200.displaySelect.config = 0

    # attributes
    self.obj200.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('name', 'String', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('Description', 'Text', None, ('Key', 0), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3Text('\n', 80,10 )
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('genR|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj200.attributes.setValue(lcobj2)

    # cardinality
    self.obj200.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj200.cardinality.setValue(lcobj2)

    # display
    self.obj200.display.setValue('Attributes:\n  - name :: String\n  - Description :: Text\n  - ID :: String\nMultiplicities:\n  - To Role: 1 to N\n  - From Role: 1 to N\n')
    self.obj200.display.setHeight(15)

    # Actions
    self.obj200.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj200.Actions.setValue(lcobj2)

    # Constraints
    self.obj200.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj200.Constraints.setValue(lcobj2)

    self.obj200.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1028.0,327.0,self.obj200)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.015, 1.8967741935483875]
    else: new_obj = None
    self.obj200.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj200)
    self.globalAndLocalPostcondition(self.obj200, rootNode)
    self.obj200.postAction( rootNode.CREATE )

    self.obj201=CD_Association3(self)
    self.obj201.isGraphObjectVisual = True

    if(hasattr(self.obj201, '_setHierarchicalLink')):
      self.obj201._setHierarchicalLink(True)

    # QOCA
    self.obj201.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj201.Graphical_Appearance.setValue( ('answersToRole', self.obj201))
    self.obj201.Graphical_Appearance.linkInfo=linkEditor(self,self.obj201.Graphical_Appearance.semObject, "answersToRole")
    self.obj201.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToRole_1stLink', self.obj201.Graphical_Appearance.linkInfo.FirstLink))
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToRole_1stSegment', self.obj201.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj201.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj201.Graphical_Appearance.linkInfo.Center.setValue( ('answersToRole_Center', self.obj201.Graphical_Appearance.linkInfo))
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToRole_2ndSegment', self.obj201.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj201.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToRole_2ndLink', self.obj201.Graphical_Appearance.linkInfo.SecondLink))
    self.obj201.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj201.Graphical_Appearance.semObject
    self.obj201.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj201.Graphical_Appearance.semObject
    self.obj201.Graphical_Appearance.linkInfo.Center.semObject=self.obj201.Graphical_Appearance.semObject
    self.obj201.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj201.Graphical_Appearance.semObject
    self.obj201.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj201.Graphical_Appearance.semObject

    # name
    self.obj201.name.setValue('answersToRole')

    # displaySelect
    self.obj201.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj201.displaySelect.config = 0

    # attributes
    self.obj201.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('hR|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj201.attributes.setValue(lcobj2)

    # cardinality
    self.obj201.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj201.cardinality.setValue(lcobj2)

    # display
    self.obj201.display.setValue('Attributes:\n  - ID :: String\nMultiplicities:\n  - From Role: 1 to N\n  - To Role: 1 to N\n')
    self.obj201.display.setHeight(15)

    # Actions
    self.obj201.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj201.Actions.setValue(lcobj2)

    # Constraints
    self.obj201.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj201.Constraints.setValue(lcobj2)

    self.obj201.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(887.0,133.0,self.obj201)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.3548387096774195]
    else: new_obj = None
    self.obj201.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj201)
    self.globalAndLocalPostcondition(self.obj201, rootNode)
    self.obj201.postAction( rootNode.CREATE )

    self.obj202=CD_Association3(self)
    self.obj202.isGraphObjectVisual = True

    if(hasattr(self.obj202, '_setHierarchicalLink')):
      self.obj202._setHierarchicalLink(False)

    # QOCA
    self.obj202.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj202.Graphical_Appearance.setValue( ('canStartProcess', self.obj202))
    self.obj202.Graphical_Appearance.linkInfo=linkEditor(self,self.obj202.Graphical_Appearance.semObject, "canStartProcess")
    self.obj202.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('canStartProcess_1stLink', self.obj202.Graphical_Appearance.linkInfo.FirstLink))
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('canStartProcess_1stSegment', self.obj202.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj202.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj202.Graphical_Appearance.linkInfo.Center.setValue( ('canStartProcess_Center', self.obj202.Graphical_Appearance.linkInfo))
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('canStartProcess_2ndSegment', self.obj202.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj202.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('canStartProcess_2ndLink', self.obj202.Graphical_Appearance.linkInfo.SecondLink))
    self.obj202.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj202.Graphical_Appearance.semObject
    self.obj202.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj202.Graphical_Appearance.semObject
    self.obj202.Graphical_Appearance.linkInfo.Center.semObject=self.obj202.Graphical_Appearance.semObject
    self.obj202.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj202.Graphical_Appearance.semObject
    self.obj202.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj202.Graphical_Appearance.semObject

    # name
    self.obj202.name.setValue('canStartProcess')

    # displaySelect
    self.obj202.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj202.displaySelect.config = 0

    # attributes
    self.obj202.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('RP|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj202.attributes.setValue(lcobj2)

    # cardinality
    self.obj202.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj202.cardinality.setValue(lcobj2)

    # display
    self.obj202.display.setValue('Attributes:\n  - ID :: String\nMultiplicities:\n  - To Process: 0 to N\n  - From Role: 0 to N\n')
    self.obj202.display.setHeight(15)

    # Actions
    self.obj202.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj202.Actions.setValue(lcobj2)

    # Constraints
    self.obj202.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj202.Constraints.setValue(lcobj2)

    self.obj202.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(470.4921875,411.163934426,self.obj202)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.036, 1.3548387096774195]
    else: new_obj = None
    self.obj202.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj202)
    self.globalAndLocalPostcondition(self.obj202, rootNode)
    self.obj202.postAction( rootNode.CREATE )

    self.obj203=CD_Association3(self)
    self.obj203.isGraphObjectVisual = True

    if(hasattr(self.obj203, '_setHierarchicalLink')):
      self.obj203._setHierarchicalLink(True)

    # QOCA
    self.obj203.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj203.Graphical_Appearance.setValue( ('answersToOrgUnit', self.obj203))
    self.obj203.Graphical_Appearance.linkInfo=linkEditor(self,self.obj203.Graphical_Appearance.semObject, "answersToOrgUnit")
    self.obj203.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('answersToOrgUnit_1stLink', self.obj203.Graphical_Appearance.linkInfo.FirstLink))
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('answersToOrgUnit_1stSegment', self.obj203.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj203.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj203.Graphical_Appearance.linkInfo.Center.setValue( ('answersToOrgUnit_Center', self.obj203.Graphical_Appearance.linkInfo))
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('answersToOrgUnit_2ndSegment', self.obj203.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj203.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('answersToOrgUnit_2ndLink', self.obj203.Graphical_Appearance.linkInfo.SecondLink))
    self.obj203.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj203.Graphical_Appearance.semObject
    self.obj203.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj203.Graphical_Appearance.semObject
    self.obj203.Graphical_Appearance.linkInfo.Center.semObject=self.obj203.Graphical_Appearance.semObject
    self.obj203.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj203.Graphical_Appearance.semObject
    self.obj203.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj203.Graphical_Appearance.semObject

    # name
    self.obj203.name.setValue('answersToOrgUnit')

    # displaySelect
    self.obj203.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj203.displaySelect.config = 0

    # attributes
    self.obj203.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('hOU|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj203.attributes.setValue(lcobj2)

    # cardinality
    self.obj203.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 0), '1', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('OrgUnit', (('Source', 'Destination'), 1), '1', 'N'))
    lcobj2.append(cobj2)
    self.obj203.cardinality.setValue(lcobj2)

    # display
    self.obj203.display.setValue('Attributes:\n  - ID :: String\nMultiplicities:\n  - To OrgUnit: 1 to N\n  - From OrgUnit: 1 to N\n')
    self.obj203.display.setHeight(15)

    # Actions
    self.obj203.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj203.Actions.setValue(lcobj2)

    # Constraints
    self.obj203.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj203.Constraints.setValue(lcobj2)

    self.obj203.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(1113.0,79.0,self.obj203)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.141, 1.3548387096774195]
    else: new_obj = None
    self.obj203.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj203)
    self.globalAndLocalPostcondition(self.obj203, rootNode)
    self.obj203.postAction( rootNode.CREATE )

    self.obj204=CD_Association3(self)
    self.obj204.isGraphObjectVisual = True

    if(hasattr(self.obj204, '_setHierarchicalLink')):
      self.obj204._setHierarchicalLink(True)

    # QOCA
    self.obj204.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj204.Graphical_Appearance.setValue( ('isPartOfRole', self.obj204))
    self.obj204.Graphical_Appearance.linkInfo=linkEditor(self,self.obj204.Graphical_Appearance.semObject, "isPartOfRole")
    self.obj204.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfRole_1stLink', self.obj204.Graphical_Appearance.linkInfo.FirstLink))
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfRole_1stSegment', self.obj204.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj204.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj204.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfRole_Center', self.obj204.Graphical_Appearance.linkInfo))
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfRole_2ndSegment', self.obj204.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],0,0)
    self.obj204.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfRole_2ndLink', self.obj204.Graphical_Appearance.linkInfo.SecondLink))
    self.obj204.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj204.Graphical_Appearance.semObject
    self.obj204.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj204.Graphical_Appearance.semObject
    self.obj204.Graphical_Appearance.linkInfo.Center.semObject=self.obj204.Graphical_Appearance.semObject
    self.obj204.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj204.Graphical_Appearance.semObject
    self.obj204.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj204.Graphical_Appearance.semObject

    # name
    self.obj204.name.setValue('isPartOfRole')

    # displaySelect
    self.obj204.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj204.displaySelect.config = 0

    # attributes
    self.obj204.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Attribute(self.types)
    cobj2.setValue(('ID', 'String', None, ('Key', 1), ('Direct Editing', 1)))
    cobj2.initialValue=ATOM3String('pR|', 20)
    cobj2.isDerivedAttribute = False
    lcobj2.append(cobj2)
    self.obj204.attributes.setValue(lcobj2)

    # cardinality
    self.obj204.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Role', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj204.cardinality.setValue(lcobj2)

    # display
    self.obj204.display.setValue('Attributes:\n  - ID :: String\nMultiplicities:\n  - From Role: 0 to N\n  - To Role: 0 to N\n')
    self.obj204.display.setHeight(15)

    # Actions
    self.obj204.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj204.Actions.setValue(lcobj2)

    # Constraints
    self.obj204.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj204.Constraints.setValue(lcobj2)

    self.obj204.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(675.0,160.0,self.obj204)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.3548387096774195]
    else: new_obj = None
    self.obj204.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj204)
    self.globalAndLocalPostcondition(self.obj204, rootNode)
    self.obj204.postAction( rootNode.CREATE )

    self.obj205=CD_Association3(self)
    self.obj205.isGraphObjectVisual = True

    if(hasattr(self.obj205, '_setHierarchicalLink')):
      self.obj205._setHierarchicalLink(False)

    # QOCA
    self.obj205.QOCA.setValue(('QOCA', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), '"""\nQOCA Constraint Template\nNOTE: DO NOT select a POST/PRE action trigger\nConstraints will be added/removed in a logical manner by other mechanisms.\n"""\nreturn # <--- Remove this if you want to use QOCA\n\n# Get the high level constraint helper and solver\nfrom Qoca.atom3constraints.OffsetConstraints import OffsetConstraints\noc = OffsetConstraints(self.parent.qocaSolver)  \n\n# Constraint only makes sense if there exists 2 objects connected to this link\nif(not (self.in_connections_ and self.out_connections_)): return\n\n# Get the graphical objects (subclass of graphEntity/graphLink) \ngraphicalObjectLink = self.graphObject_\ngraphicalObjectSource = self.in_connections_[0].graphObject_\ngraphicalObjectTarget = self.out_connections_[0].graphObject_\nobjTuple = (graphicalObjectSource, graphicalObjectTarget, graphicalObjectLink)\n\n"""\nExample constraint, see Kernel/QOCA/atom3constraints/OffsetConstraints.py\nFor more types of constraints\n"""\noc.LeftExactDistance(objTuple, 20)\noc.resolve() # Resolve immediately after creating entity & constraint \n\n'))

    # Graphical_Appearance
    self.obj205.Graphical_Appearance.setValue( ('isPartOfProcess', self.obj205))
    self.obj205.Graphical_Appearance.linkInfo=linkEditor(self,self.obj205.Graphical_Appearance.semObject, "isPartOfProcess")
    self.obj205.Graphical_Appearance.linkInfo.FirstLink= stickylink()
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.arrow=ATOM3Boolean()
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.arrow.setValue((' ', 0))
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.arrow.config = 0
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.arrowShape1=ATOM3Integer(8)
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.arrowShape2=ATOM3Integer(10)
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.arrowShape3=ATOM3Integer(3)
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.decoration=ATOM3Appearance()
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.decoration.setValue( ('isPartOfProcess_1stLink', self.obj205.Graphical_Appearance.linkInfo.FirstLink))
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment= widthXfillXdecoration()
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.width=ATOM3Integer(2)
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.fill=ATOM3String('black', 20)
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.stipple=ATOM3String('', 20)
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.arrow=ATOM3Boolean()
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.arrow.setValue((' ', 0))
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.arrow.config = 0
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.arrowShape1=ATOM3Integer(8)
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.arrowShape2=ATOM3Integer(10)
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.arrowShape3=ATOM3Integer(3)
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.decoration=ATOM3Appearance()
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.decoration.setValue( ('isPartOfProcess_1stSegment', self.obj205.Graphical_Appearance.linkInfo.FirstSegment))
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj205.Graphical_Appearance.linkInfo.Center=ATOM3Appearance()
    self.obj205.Graphical_Appearance.linkInfo.Center.setValue( ('isPartOfProcess_Center', self.obj205.Graphical_Appearance.linkInfo))
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment= widthXfillXdecoration()
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.width=ATOM3Integer(2)
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.fill=ATOM3String('black', 20)
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.stipple=ATOM3String('', 20)
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.arrow=ATOM3Boolean()
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.arrow.setValue((' ', 0))
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.arrow.config = 0
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.arrowShape1=ATOM3Integer(8)
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.arrowShape2=ATOM3Integer(10)
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.arrowShape3=ATOM3Integer(3)
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.decoration=ATOM3Appearance()
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.decoration.setValue( ('isPartOfProcess_2ndSegment', self.obj205.Graphical_Appearance.linkInfo.SecondSegment))
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.decoration_Position=ATOM3Enum(['Up', 'Down', 'Middle', 'No decoration'],3,0)
    self.obj205.Graphical_Appearance.linkInfo.SecondLink= stickylink()
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.arrow=ATOM3Boolean()
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.arrow.setValue((' ', 1))
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.arrow.config = 0
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.arrowShape1=ATOM3Integer(8)
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.arrowShape2=ATOM3Integer(10)
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.arrowShape3=ATOM3Integer(3)
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.decoration=ATOM3Appearance()
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.decoration.setValue( ('isPartOfProcess_2ndLink', self.obj205.Graphical_Appearance.linkInfo.SecondLink))
    self.obj205.Graphical_Appearance.linkInfo.FirstLink.decoration.semObject=self.obj205.Graphical_Appearance.semObject
    self.obj205.Graphical_Appearance.linkInfo.FirstSegment.decoration.semObject=self.obj205.Graphical_Appearance.semObject
    self.obj205.Graphical_Appearance.linkInfo.Center.semObject=self.obj205.Graphical_Appearance.semObject
    self.obj205.Graphical_Appearance.linkInfo.SecondSegment.decoration.semObject=self.obj205.Graphical_Appearance.semObject
    self.obj205.Graphical_Appearance.linkInfo.SecondLink.decoration.semObject=self.obj205.Graphical_Appearance.semObject

    # name
    self.obj205.name.setValue('isPartOfProcess')

    # displaySelect
    self.obj205.displaySelect.setValue( (['attributes', 'constraints', 'actions', 'cardinality'], [0, 0, 0, 0]) )
    self.obj205.displaySelect.config = 0

    # attributes
    self.obj205.attributes.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj205.attributes.setValue(lcobj2)

    # cardinality
    self.obj205.cardinality.setActionFlags([ 0, 1, 0, 0])
    lcobj2 =[]
    cobj2=ATOM3Connection()
    cobj2.setValue(('Action', (('Source', 'Destination'), 1), '0', 'N'))
    lcobj2.append(cobj2)
    cobj2=ATOM3Connection()
    cobj2.setValue(('Process', (('Source', 'Destination'), 0), '0', 'N'))
    lcobj2.append(cobj2)
    self.obj205.cardinality.setValue(lcobj2)

    # display
    self.obj205.display.setValue('Actions:\n  > updateProcessActions\nMultiplicities:\n  - From Action: 0 to N\n  - To Process: 0 to N\n')
    self.obj205.display.setHeight(15)

    # Actions
    self.obj205.Actions.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    cobj2=ATOM3Action()
    cobj2.setValue(('updateProcessActions', (['Python', 'OCL'], 1), (['PREaction', 'POSTaction'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0]), 'from CustomCode import UpdateActions\n\nres = UpdateActions(self)\n\n\n'))
    lcobj2.append(cobj2)
    self.obj205.Actions.setValue(lcobj2)

    # Constraints
    self.obj205.Constraints.setActionFlags([ 1, 1, 1, 0])
    lcobj2 =[]
    self.obj205.Constraints.setValue(lcobj2)

    self.obj205.graphClass_= graph_CD_Association3
    if self.genGraphics:
       new_obj = graph_CD_Association3(319.0,939.0,self.obj205)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Association3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.2670000000000001, 1.3548387096774195]
    else: new_obj = None
    self.obj205.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj205)
    self.globalAndLocalPostcondition(self.obj205, rootNode)
    self.obj205.postAction( rootNode.CREATE )

    self.obj206=CD_Inheritance3(self)
    self.obj206.isGraphObjectVisual = True

    if(hasattr(self.obj206, '_setHierarchicalLink')):
      self.obj206._setHierarchicalLink(False)

    self.obj206.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(863.21888986,1199.92763695,self.obj206)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj206.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj206)
    self.globalAndLocalPostcondition(self.obj206, rootNode)
    self.obj206.postAction( rootNode.CREATE )

    self.obj207=CD_Inheritance3(self)
    self.obj207.isGraphObjectVisual = True

    if(hasattr(self.obj207, '_setHierarchicalLink')):
      self.obj207._setHierarchicalLink(False)

    self.obj207.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(1278.90914946,1212.75085967,self.obj207)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj207.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj207)
    self.globalAndLocalPostcondition(self.obj207, rootNode)
    self.obj207.postAction( rootNode.CREATE )

    self.obj208=CD_Inheritance3(self)
    self.obj208.isGraphObjectVisual = True

    if(hasattr(self.obj208, '_setHierarchicalLink')):
      self.obj208._setHierarchicalLink(False)

    self.obj208.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(152.858254695,586.846159545,self.obj208)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj208.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj208)
    self.globalAndLocalPostcondition(self.obj208, rootNode)
    self.obj208.postAction( rootNode.CREATE )

    self.obj209=CD_Inheritance3(self)
    self.obj209.isGraphObjectVisual = True

    if(hasattr(self.obj209, '_setHierarchicalLink')):
      self.obj209._setHierarchicalLink(False)

    self.obj209.graphClass_= graph_CD_Inheritance3
    if self.genGraphics:
       new_obj = graph_CD_Inheritance3(135.466796875,193.786885246,self.obj209)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("CD_Inheritance3", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj209.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj209)
    self.globalAndLocalPostcondition(self.obj209, rootNode)
    self.obj209.postAction( rootNode.CREATE )

    # Connections for obj185 (graphObject_: Obj207) named OrgUnit
    self.drawConnections(
(self.obj185,self.obj194,[1368.8125, 221.22950819672127, 1386.9955983980042, 65.8097262245276, 1386.9955984, 65.809726225],"true", 3),
(self.obj185,self.obj195,[1241.14453125, 515.5737704918033, 967.8422485527899, 481.40176688146084, 971.7601868, 527.680947659],"true", 3),
(self.obj185,self.obj197,[1241.14453125, 515.5737704918033, 1017.8287423035672, 504.3266545159663, 1126.462784, 833.548234957],"true", 3),
(self.obj185,self.obj203,[1280.0, 221.22950819672127, 1130.0, 231.0, 1113.0, 79.0], 0, 3) )
    # Connections for obj186 (graphObject_: Obj208) named Role
    self.drawConnections(
(self.obj186,self.obj196,[660.0, 791.0, 555.1631302538499, 835.356649681594, 532.161248615, 913.001803815],"true", 3),
(self.obj186,self.obj197,[832.921875, 715.2622950819672, 1043.5805784296024, 726.1457487347751, 1126.462784, 833.548234957],"true", 3),
(self.obj186,self.obj199,[620.953125, 506.7377049180328, 522.0012232889502, 553.7739542825374, 436.73445957, 632.859445861],"true", 3),
(self.obj186,self.obj200,[832.921875, 412.3114754098361, 1028.0, 327.0], 0, 2),
(self.obj186,self.obj201,[793.875, 260.8360655737705, 887.0, 133.0], 0, 2),
(self.obj186,self.obj202,[620.953125, 405.5245901639344, 470.4921875, 411.163934426], 0, 2),
(self.obj186,self.obj204,[660.0, 260.8360655737705, 675.0, 160.0],"true", 2) )
    # Connections for obj187 (graphObject_: Obj209) named Action
    self.drawConnections(
(self.obj187,self.obj205,[419.0, 1051.655737704918, 319.0, 939.0],"true", 2),
(self.obj187,self.obj199,[421.0, 1080.7377049180327, 436.73445957, 632.859445861],"true", 2) )
    # Connections for obj188 (graphObject_: Obj210) named KnowledgeArtifacts
    self.drawConnections(
 )
    # Connections for obj189 (graphObject_: Obj211) named OrganisationalKnArt
    self.drawConnections(
(self.obj189,self.obj206,[852.3125, 1107.0, 863.21888986, 1199.92763695],"true", 2) )
    # Connections for obj190 (graphObject_: Obj212) named IndividualKnArt
    self.drawConnections(
(self.obj190,self.obj207,[1264.0, 1147.0, 1278.90914946, 1212.75085967],"true", 2) )
    # Connections for obj191 (graphObject_: Obj213) named Strategy
    self.drawConnections(
 )
    # Connections for obj192 (graphObject_: Obj214) named Objective
    self.drawConnections(
(self.obj192,self.obj208,[135.75, 600.5737704918033, 152.858254695, 586.846159545],"true", 2),
(self.obj192,self.obj198,[139.75, 803.0, 131.94404651894035, 946.9122308488277, 131.944046519, 946.91223085],"true", 3) )
    # Connections for obj193 (graphObject_: Obj215) named Process
    self.drawConnections(
(self.obj193,self.obj199,[313.21875, 283.0, 333.0, 453.0, 436.73445957, 632.859445861],"true", 3),
(self.obj193,self.obj209,[220.93359375, 178.89508196721312, 135.466796875, 193.786885246],"true", 2) )
    # Connections for obj194 (graphObject_: Obj216) named isPartOfOrgUnit
    self.drawConnections(
(self.obj194,self.obj185,[1386.9955984, 65.809726225, 1386.9955983980042, 65.8097262245276, 1368.8125, 221.22950819672127],"true", 3) )
    # Connections for obj195 (graphObject_: Obj218) named canHaveRole
    self.drawConnections(
(self.obj195,self.obj186,[971.7601868, 527.680947659, 975.67812505129, 573.9601284363068, 832.921875, 620.5901639344263],"true", 3) )
    # Connections for obj196 (graphObject_: Obj220) named hasActions
    self.drawConnections(
(self.obj196,self.obj187,[532.161248615, 913.001803815, 494.1593669760688, 981.6469579482074, 498.8125, 1053.4918032786886],"true", 3) )
    # Connections for obj197 (graphObject_: Obj222) named canAccessKnArt
    self.drawConnections(
(self.obj197,self.obj189,[1126.462784, 833.548234957, 1148.2678325033444, 899.9439489105719, 895.5703125, 1002.4545454545455],"true", 3),
(self.obj197,self.obj190,[1126.462784, 833.548234957, 1053.4035107781324, 935.4763808302594, 1220.7421875, 1042.4545454545455],"true", 3) )
    # Connections for obj198 (graphObject_: Obj224) named isPartOfObjective
    self.drawConnections(
(self.obj198,self.obj192,[131.944046519, 946.91223085, 131.94404651894035, 946.9122308488277, 139.75, 803.0],"true", 3) )
    # Connections for obj199 (graphObject_: Obj226) named hasObjective
    self.drawConnections(
(self.obj199,self.obj192,[436.73445957, 632.859445861, 351.4676958509182, 711.9449374392455, 281.65625, 713.0229508196721],"true", 3) )
    # Connections for obj200 (graphObject_: Obj228) named genericAssociation
    self.drawConnections(
(self.obj200,self.obj186,[1028.0, 327.0, 832.921875, 412.3114754098361], 0, 2) )
    # Connections for obj201 (graphObject_: Obj230) named answersToRole
    self.drawConnections(
(self.obj201,self.obj186,[887.0, 133.0, 793.875, 260.8360655737705], 0, 2) )
    # Connections for obj202 (graphObject_: Obj232) named canStartProcess
    self.drawConnections(
(self.obj202,self.obj193,[470.4921875, 411.163934426, 411.65625, 283.0], 0, 2) )
    # Connections for obj203 (graphObject_: Obj234) named answersToOrgUnit
    self.drawConnections(
(self.obj203,self.obj185,[1113.0, 79.0, 1279.0, 145.0, 1280.0, 221.22950819672127], 0, 3) )
    # Connections for obj204 (graphObject_: Obj236) named isPartOfRole
    self.drawConnections(
(self.obj204,self.obj186,[675.0, 160.0, 660.0, 260.8360655737705],"true", 2) )
    # Connections for obj205 (graphObject_: Obj238) named isPartOfProcess
    self.drawConnections(
(self.obj205,self.obj193,[319.0, 939.0, 313.21875, 312.0],"true", 2) )
    # Connections for obj206 (graphObject_: Obj240) of type CD_Inheritance3
    self.drawConnections(
(self.obj206,self.obj188,[863.21888986, 1199.92763695, 981.0, 1199.2295081967213],"true", 2) )
    # Connections for obj207 (graphObject_: Obj242) of type CD_Inheritance3
    self.drawConnections(
(self.obj207,self.obj188,[1278.90914946, 1212.75085967, 1171.0, 1199.2295081967213],"true", 2) )
    # Connections for obj208 (graphObject_: Obj244) of type CD_Inheritance3
    self.drawConnections(
(self.obj208,self.obj191,[152.858254695, 586.846159545, 156.0, 495.0],"true", 2) )
    # Connections for obj209 (graphObject_: Obj246) of type CD_Inheritance3
    self.drawConnections(
(self.obj209,self.obj191,[135.466796875, 193.786885246, 116.0, 320.6363636363636],"true", 2) )

newfunction = LSMASOMM_MDL

loadedMMName = 'CD_ClassDiagramsV3_META'

atom3version = '0.3'
