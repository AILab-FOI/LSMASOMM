from GraphGrammarEdit import *
from GGruleEdit import *

def savedTrans(self):
   self.EditingGraphGrammar= GraphGrammarEdit(None, self)
   self.EditingGraphGrammar.Name=ATOM3String('LSPExample', 20)
   self.EditingGraphGrammar.Rules=ATOM3List([ 1, 1, 1, 0],GGruleEdit,None, self)
   lcobj0=[]
   cobj0= GGruleEdit(None, self)
   cobj0.Name=ATOM3String('AddRoles', 20)
   cobj0.Order=ATOM3Integer(1)
   cobj0.TimeDelay=ATOM3Integer(2)
   cobj0.SubtypesMatching=ATOM3Boolean()
   cobj0.SubtypesMatching.setValue((None, 0))
   cobj0.SubtypesMatching.config = 0

   from hasObjective import *
   from isPartOfOrgUnit import *
   from Strategy import *
   from canStartProcess import *
   from Role import *
   from canHaveRole import *
   from Objective import *
   from ASG_LSMASOMM import *
   from OrganisationalKnArt import *
   from hasActions import *
   from isPartOfRole import *
   from answersToOrgUnit import *
   from isPartOfObjective import *
   from IndividualKnArt import *
   from answersToRole import *
   from Action import *
   from KnowledgeArtifacts import *
   from genericAssociation import *
   from Process import *
   from OrgUnit import *
   from isPartOfProcess import *
   from canAccessKnArt import *
   from precedentTo import *

   cobj0.LHS = ASG_LSMASOMM(self)

   self.obj52=OrgUnit(self)
   self.obj52.preAction( cobj0.LHS.CREATE )
   self.obj52.isGraphObjectVisual = True

   if(hasattr(self.obj52, '_setHierarchicalLink')):
     self.obj52._setHierarchicalLink(False)

   # Individual
   self.obj52.Individual.setValue(('1', 0))
   self.obj52.Individual.config = 0

   # hasActions
   self.obj52.hasActions.setActionFlags([ 1, 1, 1, 0])
   lcobj2 =[]
   cobj2=ATOM3String('ChangeRole', 20)
   lcobj2.append(cobj2)
   self.obj52.hasActions.setValue(lcobj2)

   # ID
   self.obj52.ID.setValue('')
   self.obj52.ID.setNone()

   # name
   self.obj52.name.setValue('')
   self.obj52.name.setNone()

   # UnitSize
   self.obj52.UnitSize.setValue('Individual')

   self.obj52.GGLabel.setValue(1)
   self.obj52.graphClass_= graph_OrgUnit
   if self.genGraphics:
      new_obj = graph_OrgUnit(60.0,120.0,self.obj52)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj52.graphObject_ = new_obj

   # Add node to the root: cobj0.LHS
   cobj0.LHS.addNode(self.obj52)
   self.obj52.postAction( cobj0.LHS.CREATE )


   cobj0.RHS = ASG_LSMASOMM(self)

   self.obj54=OrgUnit(self)
   self.obj54.preAction( cobj0.RHS.CREATE )
   self.obj54.isGraphObjectVisual = True

   if(hasattr(self.obj54, '_setHierarchicalLink')):
     self.obj54._setHierarchicalLink(False)

   # Individual
   self.obj54.Individual.setValue(('1', 0))
   self.obj54.Individual.config = 0

   # hasActions
   self.obj54.hasActions.setActionFlags([ 1, 1, 1, 0])
   lcobj2 =[]
   cobj2=ATOM3String('ChangeRole', 20)
   lcobj2.append(cobj2)
   self.obj54.hasActions.setValue(lcobj2)

   # ID
   self.obj54.ID.setValue('OU|0')

   # name
   self.obj54.name.setValue('OUname')

   # UnitSize
   self.obj54.UnitSize.setValue('Individual')

   self.obj54.GGLabel.setValue(1)
   self.obj54.graphClass_= graph_OrgUnit
   if self.genGraphics:
      new_obj = graph_OrgUnit(40.0,140.0,self.obj54)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj54.graphObject_ = new_obj
   self.obj540= AttrCalc()
   self.obj540.Copy=ATOM3Boolean()
   self.obj540.Copy.setValue(('Copy from LHS', 1))
   self.obj540.Copy.config = 0
   self.obj540.Specify=ATOM3Constraint()
   self.obj540.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj54.GGset2Any['ID']= self.obj540
   self.obj541= AttrCalc()
   self.obj541.Copy=ATOM3Boolean()
   self.obj541.Copy.setValue(('Copy from LHS', 1))
   self.obj541.Copy.config = 0
   self.obj541.Specify=ATOM3Constraint()
   self.obj541.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj54.GGset2Any['Individual']= self.obj541
   self.obj542= AttrCalc()
   self.obj542.Copy=ATOM3Boolean()
   self.obj542.Copy.setValue(('Copy from LHS', 1))
   self.obj542.Copy.config = 0
   self.obj542.Specify=ATOM3Constraint()
   self.obj542.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj54.GGset2Any['hasActions']= self.obj542
   self.obj543= AttrCalc()
   self.obj543.Copy=ATOM3Boolean()
   self.obj543.Copy.setValue(('Copy from LHS', 1))
   self.obj543.Copy.config = 0
   self.obj543.Specify=ATOM3Constraint()
   self.obj543.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj54.GGset2Any['UnitSize']= self.obj543
   self.obj544= AttrCalc()
   self.obj544.Copy=ATOM3Boolean()
   self.obj544.Copy.setValue(('Copy from LHS', 1))
   self.obj544.Copy.config = 0
   self.obj544.Specify=ATOM3Constraint()
   self.obj544.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj54.GGset2Any['name']= self.obj544

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj54)
   self.obj54.postAction( cobj0.RHS.CREATE )

   self.obj55=Role(self)
   self.obj55.preAction( cobj0.RHS.CREATE )
   self.obj55.isGraphObjectVisual = True

   if(hasattr(self.obj55, '_setHierarchicalLink')):
     self.obj55._setHierarchicalLink(False)

   # isMetaRole
   self.obj55.isMetaRole.setValue((None, 0))
   self.obj55.isMetaRole.config = 0

   # hasActions
   self.obj55.hasActions.setActionFlags([ 0, 0, 1, 0])
   lcobj2 =[]
   self.obj55.hasActions.setValue(lcobj2)

   # ID
   self.obj55.ID.setValue('R|90')

   # name
   self.obj55.name.setValue('PartyFounder')

   self.obj55.GGLabel.setValue(2)
   self.obj55.graphClass_= graph_Role
   if self.genGraphics:
      new_obj = graph_Role(250.0,50.0,self.obj55)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj55.graphObject_ = new_obj
   self.obj550= AttrCalc()
   self.obj550.Copy=ATOM3Boolean()
   self.obj550.Copy.setValue(('Copy from LHS', 0))
   self.obj550.Copy.config = 0
   self.obj550.Specify=ATOM3Constraint()
   self.obj550.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj55.GGset2Any['isMetaRole']= self.obj550
   self.obj551= AttrCalc()
   self.obj551.Copy=ATOM3Boolean()
   self.obj551.Copy.setValue(('Copy from LHS', 0))
   self.obj551.Copy.config = 0
   self.obj551.Specify=ATOM3Constraint()
   self.obj551.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj55.GGset2Any['hasActions']= self.obj551
   self.obj552= AttrCalc()
   self.obj552.Copy=ATOM3Boolean()
   self.obj552.Copy.setValue(('Copy from LHS', 0))
   self.obj552.Copy.config = 0
   self.obj552.Specify=ATOM3Constraint()
   self.obj552.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj55.GGset2Any['ID']= self.obj552
   self.obj553= AttrCalc()
   self.obj553.Copy=ATOM3Boolean()
   self.obj553.Copy.setValue(('Copy from LHS', 0))
   self.obj553.Copy.config = 0
   self.obj553.Specify=ATOM3Constraint()
   self.obj553.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj55.GGset2Any['name']= self.obj553

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj55)
   self.obj55.postAction( cobj0.RHS.CREATE )

   self.obj56=Role(self)
   self.obj56.preAction( cobj0.RHS.CREATE )
   self.obj56.isGraphObjectVisual = True

   if(hasattr(self.obj56, '_setHierarchicalLink')):
     self.obj56._setHierarchicalLink(False)

   # isMetaRole
   self.obj56.isMetaRole.setValue((None, 0))
   self.obj56.isMetaRole.config = 0

   # hasActions
   self.obj56.hasActions.setActionFlags([ 0, 0, 1, 0])
   lcobj2 =[]
   self.obj56.hasActions.setValue(lcobj2)

   # ID
   self.obj56.ID.setValue('R|91')

   # name
   self.obj56.name.setValue('PartyMember')

   self.obj56.GGLabel.setValue(3)
   self.obj56.graphClass_= graph_Role
   if self.genGraphics:
      new_obj = graph_Role(270.0,170.0,self.obj56)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj56.graphObject_ = new_obj
   self.obj560= AttrCalc()
   self.obj560.Copy=ATOM3Boolean()
   self.obj560.Copy.setValue(('Copy from LHS', 0))
   self.obj560.Copy.config = 0
   self.obj560.Specify=ATOM3Constraint()
   self.obj560.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj56.GGset2Any['isMetaRole']= self.obj560
   self.obj561= AttrCalc()
   self.obj561.Copy=ATOM3Boolean()
   self.obj561.Copy.setValue(('Copy from LHS', 0))
   self.obj561.Copy.config = 0
   self.obj561.Specify=ATOM3Constraint()
   self.obj561.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj56.GGset2Any['hasActions']= self.obj561
   self.obj562= AttrCalc()
   self.obj562.Copy=ATOM3Boolean()
   self.obj562.Copy.setValue(('Copy from LHS', 0))
   self.obj562.Copy.config = 0
   self.obj562.Specify=ATOM3Constraint()
   self.obj562.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj56.GGset2Any['ID']= self.obj562
   self.obj563= AttrCalc()
   self.obj563.Copy=ATOM3Boolean()
   self.obj563.Copy.setValue(('Copy from LHS', 0))
   self.obj563.Copy.config = 0
   self.obj563.Specify=ATOM3Constraint()
   self.obj563.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj56.GGset2Any['name']= self.obj563

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj56)
   self.obj56.postAction( cobj0.RHS.CREATE )

   self.obj57=canHaveRole(self)
   self.obj57.preAction( cobj0.RHS.CREATE )
   self.obj57.isGraphObjectVisual = True

   if(hasattr(self.obj57, '_setHierarchicalLink')):
     self.obj57._setHierarchicalLink(True)

   # ID
   self.obj57.ID.setValue('OUR|90')

   self.obj57.GGLabel.setValue(4)
   self.obj57.graphClass_= graph_canHaveRole
   if self.genGraphics:
      new_obj = graph_canHaveRole(178.5,145.5,self.obj57)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj57.graphObject_ = new_obj
   self.obj570= AttrCalc()
   self.obj570.Copy=ATOM3Boolean()
   self.obj570.Copy.setValue(('Copy from LHS', 0))
   self.obj570.Copy.config = 0
   self.obj570.Specify=ATOM3Constraint()
   self.obj570.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj57.GGset2Any['ID']= self.obj570

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj57)
   self.obj57.postAction( cobj0.RHS.CREATE )

   self.obj54.out_connections_.append(self.obj57)
   self.obj57.in_connections_.append(self.obj54)
   self.obj54.graphObject_.pendingConnections.append((self.obj54.graphObject_.tag, self.obj57.graphObject_.tag, [71.0, 203.0, 178.5, 145.5], 0, True))
   self.obj57.out_connections_.append(self.obj55)
   self.obj55.in_connections_.append(self.obj57)
   self.obj57.graphObject_.pendingConnections.append((self.obj57.graphObject_.tag, self.obj55.graphObject_.tag, [286.0, 102.0, 178.5, 152.5], 0, True))
   self.obj57.out_connections_.append(self.obj56)
   self.obj56.in_connections_.append(self.obj57)
   self.obj57.graphObject_.pendingConnections.append((self.obj57.graphObject_.tag, self.obj56.graphObject_.tag, [306.0, 222.0, 178.5, 152.5], 0, True))

   cobj0.Condition=ATOM3Constraint()
   cobj0.Condition.setValue(('condition', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'return 1\n'))
   cobj0.Action=ATOM3Constraint()
   cobj0.Action.setValue(('action', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   lcobj0.append(cobj0)
   cobj0= GGruleEdit(None, self)
   cobj0.Name=ATOM3String('CreateParty', 20)
   cobj0.Order=ATOM3Integer(1)
   cobj0.TimeDelay=ATOM3Integer(2)
   cobj0.SubtypesMatching=ATOM3Boolean()
   cobj0.SubtypesMatching.setValue((None, 0))
   cobj0.SubtypesMatching.config = 0

   from hasObjective import *
   from isPartOfOrgUnit import *
   from Strategy import *
   from canStartProcess import *
   from Role import *
   from canHaveRole import *
   from Objective import *
   from ASG_LSMASOMM import *
   from OrganisationalKnArt import *
   from hasActions import *
   from isPartOfRole import *
   from answersToOrgUnit import *
   from isPartOfObjective import *
   from IndividualKnArt import *
   from answersToRole import *
   from Action import *
   from KnowledgeArtifacts import *
   from genericAssociation import *
   from Process import *
   from OrgUnit import *
   from isPartOfProcess import *
   from canAccessKnArt import *
   from precedentTo import *

   cobj0.LHS = ASG_LSMASOMM(self)

   self.obj62=OrgUnit(self)
   self.obj62.preAction( cobj0.LHS.CREATE )
   self.obj62.isGraphObjectVisual = True

   if(hasattr(self.obj62, '_setHierarchicalLink')):
     self.obj62._setHierarchicalLink(False)

   # Individual
   self.obj62.Individual.setNone()
   self.obj62.Individual.config = 0

   # hasActions
   self.obj62.hasActions.setActionFlags([ 1, 1, 1, 0])
   lcobj2 =[]
   cobj2=ATOM3String('ChangeRole', 20)
   lcobj2.append(cobj2)
   self.obj62.hasActions.setValue(lcobj2)
   self.obj62.hasActions.setNone()

   # ID
   self.obj62.ID.setValue('')
   self.obj62.ID.setNone()

   # name
   self.obj62.name.setValue('')
   self.obj62.name.setNone()

   # UnitSize
   self.obj62.UnitSize.setValue('Individual')

   self.obj62.GGLabel.setValue(1)
   self.obj62.graphClass_= graph_OrgUnit
   if self.genGraphics:
      new_obj = graph_OrgUnit(0,0,self.obj62)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj62.graphObject_ = new_obj

   # Add node to the root: cobj0.LHS
   cobj0.LHS.addNode(self.obj62)
   self.obj62.postAction( cobj0.LHS.CREATE )

   self.obj63=Role(self)
   self.obj63.preAction( cobj0.LHS.CREATE )
   self.obj63.isGraphObjectVisual = True

   if(hasattr(self.obj63, '_setHierarchicalLink')):
     self.obj63._setHierarchicalLink(False)

   # isMetaRole
   self.obj63.isMetaRole.setNone()
   self.obj63.isMetaRole.config = 0

   # hasActions
   self.obj63.hasActions.setActionFlags([ 0, 0, 1, 0])
   lcobj2 =[]
   self.obj63.hasActions.setValue(lcobj2)
   self.obj63.hasActions.setNone()

   # ID
   self.obj63.ID.setValue('')
   self.obj63.ID.setNone()

   # name
   self.obj63.name.setValue('PartyFounder')

   self.obj63.GGLabel.setValue(2)
   self.obj63.graphClass_= graph_Role
   if self.genGraphics:
      new_obj = graph_Role(93,0,self.obj63)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj63.graphObject_ = new_obj

   # Add node to the root: cobj0.LHS
   cobj0.LHS.addNode(self.obj63)
   self.obj63.postAction( cobj0.LHS.CREATE )

   self.obj64=canHaveRole(self)
   self.obj64.preAction( cobj0.LHS.CREATE )
   self.obj64.isGraphObjectVisual = True

   if(hasattr(self.obj64, '_setHierarchicalLink')):
     self.obj64._setHierarchicalLink(True)

   # ID
   self.obj64.ID.setValue('OUR|0')

   self.obj64.GGLabel.setValue(3)
   self.obj64.graphClass_= graph_canHaveRole
   if self.genGraphics:
      new_obj = graph_canHaveRole(82.7757140317,49.5328543483,self.obj64)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj64.graphObject_ = new_obj

   # Add node to the root: cobj0.LHS
   cobj0.LHS.addNode(self.obj64)
   self.obj64.postAction( cobj0.LHS.CREATE )

   self.obj62.out_connections_.append(self.obj64)
   self.obj64.in_connections_.append(self.obj62)
   self.obj62.graphObject_.pendingConnections.append((self.obj62.graphObject_.tag, self.obj64.graphObject_.tag, [320.0, 383.0, 82.7757140313197, 49.532854348516736], 0, True))
   self.obj64.out_connections_.append(self.obj63)
   self.obj63.in_connections_.append(self.obj64)
   self.obj64.graphObject_.pendingConnections.append((self.obj64.graphObject_.tag, self.obj63.graphObject_.tag, [318.0, 18.0, 248.5, 202.5], 0, True))

   cobj0.RHS = ASG_LSMASOMM(self)

   self.obj66=OrgUnit(self)
   self.obj66.preAction( cobj0.RHS.CREATE )
   self.obj66.isGraphObjectVisual = True

   if(hasattr(self.obj66, '_setHierarchicalLink')):
     self.obj66._setHierarchicalLink(False)

   # Individual
   self.obj66.Individual.setNone()
   self.obj66.Individual.config = 0

   # hasActions
   self.obj66.hasActions.setActionFlags([ 1, 1, 1, 0])
   lcobj2 =[]
   cobj2=ATOM3String('ChangeRole', 20)
   lcobj2.append(cobj2)
   self.obj66.hasActions.setValue(lcobj2)
   self.obj66.hasActions.setNone()

   # ID
   self.obj66.ID.setValue('')
   self.obj66.ID.setNone()

   # name
   self.obj66.name.setValue('')
   self.obj66.name.setNone()

   # UnitSize
   self.obj66.UnitSize.setValue('Individual')

   self.obj66.GGLabel.setValue(1)
   self.obj66.graphClass_= graph_OrgUnit
   if self.genGraphics:
      new_obj = graph_OrgUnit(0,104,self.obj66)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj66.graphObject_ = new_obj
   self.obj660= AttrCalc()
   self.obj660.Copy=ATOM3Boolean()
   self.obj660.Copy.setValue(('Copy from LHS', 1))
   self.obj660.Copy.config = 0
   self.obj660.Specify=ATOM3Constraint()
   self.obj660.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj66.GGset2Any['UnitSize']= self.obj660
   self.obj661= AttrCalc()
   self.obj661.Copy=ATOM3Boolean()
   self.obj661.Copy.setValue(('Copy from LHS', 1))
   self.obj661.Copy.config = 0
   self.obj661.Specify=ATOM3Constraint()
   self.obj661.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj66.GGset2Any['Individual']= self.obj661
   self.obj662= AttrCalc()
   self.obj662.Copy=ATOM3Boolean()
   self.obj662.Copy.setValue(('Copy from LHS', 1))
   self.obj662.Copy.config = 0
   self.obj662.Specify=ATOM3Constraint()
   self.obj662.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj66.GGset2Any['hasActions']= self.obj662
   self.obj663= AttrCalc()
   self.obj663.Copy=ATOM3Boolean()
   self.obj663.Copy.setValue(('Copy from LHS', 1))
   self.obj663.Copy.config = 0
   self.obj663.Specify=ATOM3Constraint()
   self.obj663.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj66.GGset2Any['name']= self.obj663
   self.obj664= AttrCalc()
   self.obj664.Copy=ATOM3Boolean()
   self.obj664.Copy.setValue(('Copy from LHS', 1))
   self.obj664.Copy.config = 0
   self.obj664.Specify=ATOM3Constraint()
   self.obj664.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj66.GGset2Any['ID']= self.obj664

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj66)
   self.obj66.postAction( cobj0.RHS.CREATE )

   self.obj67=OrgUnit(self)
   self.obj67.preAction( cobj0.RHS.CREATE )
   self.obj67.isGraphObjectVisual = True

   if(hasattr(self.obj67, '_setHierarchicalLink')):
     self.obj67._setHierarchicalLink(False)

   # Individual
   self.obj67.Individual.setValue(('1', 0))
   self.obj67.Individual.config = 0

   # hasActions
   self.obj67.hasActions.setActionFlags([ 1, 1, 1, 0])
   lcobj2 =[]
   cobj2=ATOM3String('ChangeRole', 20)
   lcobj2.append(cobj2)
   self.obj67.hasActions.setValue(lcobj2)

   # ID
   self.obj67.ID.setValue('OU|99')

   # name
   self.obj67.name.setValue('Party')

   # UnitSize
   self.obj67.UnitSize.setValue('Group')

   self.obj67.GGLabel.setValue(5)
   self.obj67.graphClass_= graph_OrgUnit
   if self.genGraphics:
      new_obj = graph_OrgUnit(248,104,self.obj67)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj67.graphObject_ = new_obj
   self.obj670= AttrCalc()
   self.obj670.Copy=ATOM3Boolean()
   self.obj670.Copy.setValue(('Copy from LHS', 0))
   self.obj670.Copy.config = 0
   self.obj670.Specify=ATOM3Constraint()
   self.obj670.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj67.GGset2Any['UnitSize']= self.obj670
   self.obj671= AttrCalc()
   self.obj671.Copy=ATOM3Boolean()
   self.obj671.Copy.setValue(('Copy from LHS', 0))
   self.obj671.Copy.config = 0
   self.obj671.Specify=ATOM3Constraint()
   self.obj671.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj67.GGset2Any['Individual']= self.obj671
   self.obj672= AttrCalc()
   self.obj672.Copy=ATOM3Boolean()
   self.obj672.Copy.setValue(('Copy from LHS', 0))
   self.obj672.Copy.config = 0
   self.obj672.Specify=ATOM3Constraint()
   self.obj672.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj67.GGset2Any['hasActions']= self.obj672
   self.obj673= AttrCalc()
   self.obj673.Copy=ATOM3Boolean()
   self.obj673.Copy.setValue(('Copy from LHS', 0))
   self.obj673.Copy.config = 0
   self.obj673.Specify=ATOM3Constraint()
   self.obj673.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj67.GGset2Any['name']= self.obj673
   self.obj674= AttrCalc()
   self.obj674.Copy=ATOM3Boolean()
   self.obj674.Copy.setValue(('Copy from LHS', 0))
   self.obj674.Copy.config = 0
   self.obj674.Specify=ATOM3Constraint()
   self.obj674.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj67.GGset2Any['ID']= self.obj674

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj67)
   self.obj67.postAction( cobj0.RHS.CREATE )

   self.obj68=Role(self)
   self.obj68.preAction( cobj0.RHS.CREATE )
   self.obj68.isGraphObjectVisual = True

   if(hasattr(self.obj68, '_setHierarchicalLink')):
     self.obj68._setHierarchicalLink(False)

   # isMetaRole
   self.obj68.isMetaRole.setNone()
   self.obj68.isMetaRole.config = 0

   # hasActions
   self.obj68.hasActions.setActionFlags([ 0, 0, 1, 0])
   lcobj2 =[]
   self.obj68.hasActions.setValue(lcobj2)
   self.obj68.hasActions.setNone()

   # ID
   self.obj68.ID.setValue('')
   self.obj68.ID.setNone()

   # name
   self.obj68.name.setValue('PartyFounder')

   self.obj68.GGLabel.setValue(2)
   self.obj68.graphClass_= graph_Role
   if self.genGraphics:
      new_obj = graph_Role(124,0,self.obj68)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj68.graphObject_ = new_obj
   self.obj680= AttrCalc()
   self.obj680.Copy=ATOM3Boolean()
   self.obj680.Copy.setValue(('Copy from LHS', 1))
   self.obj680.Copy.config = 0
   self.obj680.Specify=ATOM3Constraint()
   self.obj680.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj68.GGset2Any['isMetaRole']= self.obj680
   self.obj681= AttrCalc()
   self.obj681.Copy=ATOM3Boolean()
   self.obj681.Copy.setValue(('Copy from LHS', 1))
   self.obj681.Copy.config = 0
   self.obj681.Specify=ATOM3Constraint()
   self.obj681.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj68.GGset2Any['hasActions']= self.obj681
   self.obj682= AttrCalc()
   self.obj682.Copy=ATOM3Boolean()
   self.obj682.Copy.setValue(('Copy from LHS', 1))
   self.obj682.Copy.config = 0
   self.obj682.Specify=ATOM3Constraint()
   self.obj682.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj68.GGset2Any['ID']= self.obj682
   self.obj683= AttrCalc()
   self.obj683.Copy=ATOM3Boolean()
   self.obj683.Copy.setValue(('Copy from LHS', 1))
   self.obj683.Copy.config = 0
   self.obj683.Specify=ATOM3Constraint()
   self.obj683.Specify.setValue(('AttrSpecify', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.obj68.GGset2Any['name']= self.obj683

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj68)
   self.obj68.postAction( cobj0.RHS.CREATE )

   self.obj69=isPartOfOrgUnit(self)
   self.obj69.preAction( cobj0.RHS.CREATE )
   self.obj69.isGraphObjectVisual = True

   if(hasattr(self.obj69, '_setHierarchicalLink')):
     self.obj69._setHierarchicalLink(True)

   # ID
   self.obj69.ID.setValue('pOU|0')

   self.obj69.GGLabel.setValue(6)
   self.obj69.graphClass_= graph_isPartOfOrgUnit
   if self.genGraphics:
      new_obj = graph_isPartOfOrgUnit(170.95,135.5,self.obj69)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj69.graphObject_ = new_obj

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj69)
   self.obj69.postAction( cobj0.RHS.CREATE )

   self.obj70=canHaveRole(self)
   self.obj70.preAction( cobj0.RHS.CREATE )
   self.obj70.isGraphObjectVisual = True

   if(hasattr(self.obj70, '_setHierarchicalLink')):
     self.obj70._setHierarchicalLink(True)

   # ID
   self.obj70.ID.setValue('OUR|0')

   self.obj70.GGLabel.setValue(3)
   self.obj70.graphClass_= graph_canHaveRole
   if self.genGraphics:
      new_obj = graph_canHaveRole(96.0835477534,103.612551906,self.obj70)
      new_obj.layConstraints = dict() # Graphical Layout Constraints 
      new_obj.layConstraints['scale'] = [1.0, 1.0]
   else: new_obj = None
   self.obj70.graphObject_ = new_obj

   # Add node to the root: cobj0.RHS
   cobj0.RHS.addNode(self.obj70)
   self.obj70.postAction( cobj0.RHS.CREATE )

   self.obj66.out_connections_.append(self.obj70)
   self.obj70.in_connections_.append(self.obj66)
   self.obj66.graphObject_.pendingConnections.append((self.obj66.graphObject_.tag, self.obj70.graphObject_.tag, [172.0, 262.0, 95.70697149494045, 93.18039110188538], 2, 0))
   self.obj66.out_connections_.append(self.obj69)
   self.obj69.in_connections_.append(self.obj66)
   self.obj66.graphObject_.pendingConnections.append((self.obj66.graphObject_.tag, self.obj69.graphObject_.tag, [172.0, 262.0, 170.9500000000995, 135.49999999995433], 0, True))
   self.obj69.out_connections_.append(self.obj67)
   self.obj67.in_connections_.append(self.obj69)
   self.obj69.graphObject_.pendingConnections.append((self.obj69.graphObject_.tag, self.obj67.graphObject_.tag, [138.0, 54.0, 146.5, 173.5], 0, True))
   self.obj70.out_connections_.append(self.obj68)
   self.obj68.in_connections_.append(self.obj70)
   self.obj70.graphObject_.pendingConnections.append((self.obj70.graphObject_.tag, self.obj68.graphObject_.tag, [271.0, 251.0, 211.39913777316735, 113.1006935442384], 2, 0))

   cobj0.Condition=ATOM3Constraint()
   cobj0.Condition.setValue(('condition', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'return 1\n'))
   cobj0.Action=ATOM3Constraint()
   cobj0.Action.setValue(('action', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   lcobj0.append(cobj0)
   self.EditingGraphGrammar.Rules.setValue(lcobj0)
   self.EditingGraphGrammar.InitialAction=ATOM3Constraint()
   self.EditingGraphGrammar.InitialAction.setValue(('constraint', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))
   self.EditingGraphGrammar.FinalAction=ATOM3Constraint()
   self.EditingGraphGrammar.FinalAction.setValue(('const', (['Python', 'OCL'], 0), (['PREcondition', 'POSTcondition'], 1), (['EDIT', 'SAVE', 'CREATE', 'CONNECT', 'DELETE', 'DISCONNECT', 'TRANSFORM', 'SELECT', 'DRAG', 'DROP', 'MOVE'], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), None))


